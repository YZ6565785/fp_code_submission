%%
clear all;
close all;
import IK.*
import InverseReachability.*
import PlotTools.*

%% 

%set robot path
robot_path = "xarm_description/robots/xarm6_robot.urdf";

% set boolean indices file
file_rm_bl = 'Victor/bl_xarm6_r0.05_reachability_200_poses.txt';

% set hdf5 file
file = "xarm6_r0.05_reachability_200_poses.h5";
path = "Victor/" + file;

num_poses = 200

% check H5 info
h5disp(path);

info = h5info(path)

% LOAD DATASET FROM H5
pose_dataset = h5read(path, '/Poses/poses_dataset');
sphere_dataset = h5read(path, '/Spheres/sphere_dataset');
res = info.Groups(2).Datasets(1).Attributes(1).Value;
disp('# Summary:');
disp("pose dataset size: "+ size(pose_dataset,1)+"x"+ ...
    size(pose_dataset,2));
disp("sphere dataset size: "+ size(sphere_dataset,1)+"x"+ ...
    size(sphere_dataset,2));
disp("Resolution: " + res);

% LOAD BOOLEAN INDICES
disp("Hold on. Loading boolean indices...");
fileID = fopen(file_rm_bl,'r');
formatSpec = '%c';
all = fscanf(fileID,formatSpec);
lines = splitlines(all);
fclose(fileID);
disp("Still loading...");

progress = 1;
check = round(size(lines,1)/10);
bool_indices = [];
for i=1:size(lines)
    if mod(progress, check)== 0
        disp("Progress: " + round(progress/size(lines,1)*100) + "%");
    end
    fields = split(lines(i), ',');
    if str2num(fields{1}) > 0
       bool_indices = [
           bool_indices; 
           str2num(fields{1}) str2num(fields{2}) str2num(fields{3})
       ];
    end
    progress = progress + 1;
end
disp("Done!");
disp("Total: " + size(bool_indices,1));


% test logical operator
% bool_indices(1, 4:end) & zeros(1,50)

% FILTER OUT EMPTY SPHERES FOR BETTER VISUALIZATION
% sphere_X = [];
% sphere_Y = [];
% sphere_Z = [];
% H = [];
% for i=1:size(bool_indices,1) hang

%     if ~ bool_indices(i,1)<0.2 &&  bool_indices(i,3)>0.1)
%         sphere_X = [sphere_X sphere_dataset(1,i)];
%         sphere_Y = [sphere_Y sphere_dataset(2,i)];
%         sphere_Z = [sphere_Z sphere_dataset(3,i)];
%         H = [H sphere_dataset(4,i)];
%     end
% end
%%
indices = bool_indices(:,1)>0.2 | bool_indices(:,3)<=0.1;
sphere_X = bool_indices(indices,2);
sphere_Y = bool_indices(indices,3);
sphere_Z = bool_indices(indices,4);
H = sum(bool_indices(indices,5:end),2);
disp("*** Filtered.");


% CONVERT SCALAR TO COLOR (rgb) - scaling from red to blue (0-100)

sphere_color = PlotTools.generateRGB(H, max(H));

% PLOT robot and RM
figure(1);
clf
robot = importrobot(robot_path);
show(robot, 'Collisions','off','Visuals','on');
hold on
scatter3(sphere_X', sphere_Y', sphere_Z', 90, sphere_color, 'filled');
title('Reachability Map and Robot');
colorbar
axis equal



%% PLOT CONSTRAINED RM AND SAMPLE POSES - ZACHARIAS SAMPLING
samples = InverseReachability.zacharias(res, num_poses);


mask = PlotTools.generateMask(samples, 3, true);

sphere_X = [];
sphere_Y = [];
sphere_Z = [];
H = [];
for i=1:size(bool_indices,1)
    bl = bool_indices(i,4:end) & mask';
    ri = sum(bl);
    if ~(bool_indices(i,1)<0.2 && bool_indices(i,3)>0.1) && ri>0
        sphere_X = [sphere_X bool_indices(i,1)];
        sphere_Y = [sphere_Y bool_indices(i,2)];
        sphere_Z = [sphere_Z bool_indices(i,3)];
        H = [H ri];
    end
end
sphere_color = PlotTools.generateRGB(H, sum(mask));

figure(1);
clf;

% Top plot
subplot(2,1,1)
robot = importrobot(robot_path);
show(robot, 'Collisions','off','Visuals','on');
hold on;
scatter3(sphere_X', sphere_Y', sphere_Z', 50, sphere_color, 'filled');

title('Reachability Map and Robot with Mask');
xlabel('x axis')
ylabel('y axis')
zlabel('z axis')

% plot local sphere poses with mask
% Bottom plot
subplot(2,1,2)
[X,Y,Z] = sphere;


r = res;
X2 = X * r;
Y2 = Y * r;
Z2 = Z * r;
hold on
surf(X2,Y2,Z2)
axis equal
Visualization.draw_poses(samples(mask,:), 0.5, [1 0 0], 'r');
Visualization.draw_poses(samples(mask,:), 0.5, [0 1 0], 'g');
Visualization.draw_poses(samples(mask,:), 0.5, [0 0 1], 'b');
hold off

xlabel('x axis')
ylabel('y axis')
zlabel('z axis')
title('Local Sphere Poses with Mask')