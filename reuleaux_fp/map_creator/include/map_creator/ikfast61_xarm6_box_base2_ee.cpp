/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-08-29 13:05:40.749312
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=IKsin(j[2]);
x7=IKsin(j[1]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((0.076)*x0);
x13=((0.3425)*x1);
x14=((0.076)*x3);
x15=((0.2845)*x7);
x16=((0.0535)*x4);
x17=((1.0)*x2);
x18=((0.0775)*x1);
x19=((0.0775)*x0);
x20=((1.0)*x1);
x21=((1.0)*x9);
x22=((1.0)*x10);
x23=((1.0)*x0);
x24=((1.0)*x3);
x25=((0.3425)*x0);
x26=(x5*x7);
x27=(x4*x5);
x28=(x4*x6);
x29=(x6*x7);
x30=(x10*x3);
x31=(x0*x2);
x32=(x1*x2);
x33=(x3*x9);
x34=(x0*x17);
x35=((0.249)*x28);
x36=((0.076)*x28);
x37=(x23*x29);
x38=(x20*x29);
x39=((((-1.0)*x27))+x29);
x40=((((1.0)*x26))+(((1.0)*x28)));
x41=((-1.0)*x40);
x42=((((-1.0)*x37))+((x0*x27)));
x43=((((-1.0)*x38))+((x1*x27)));
x44=(x3*x41);
x45=(x2*x40);
x46=(x23*(((((-1.0)*x26))+(((-1.0)*x28)))));
x47=(x20*(((((-1.0)*x26))+(((-1.0)*x28)))));
x48=(x3*x43);
x49=(x3*x42);
x50=(x10*x46);
x51=(x10*x47);
x52=(x32+x49);
x53=((((-1.0)*x34))+x48);
x54=(((x1*x3))+((x2*((x37+(((-1.0)*x23*x27)))))));
x55=(((x2*((x38+(((-1.0)*x20*x27))))))+(((-1.0)*x23*x3)));
x56=(x53*x9);
eerot[0]=(((x11*((x50+((x52*x9))))))+((x54*x8)));
eerot[1]=(((x11*x54))+((x8*(((((-1.0)*x22*x46))+(((-1.0)*x21*x52)))))));
eerot[2]=(((x46*x9))+((x10*(((((-1.0)*x1*x17))+(((-1.0)*x24*x42)))))));
IkReal x57=((1.0)*x12);
IkReal x58=((1.0)*x25);
eetrans[0]=((0.18)+((x9*(((((-0.249)*x0*x26))+(((-1.0)*x0*x35))))))+((x0*x16))+((x0*x15))+((x19*x27))+((x9*((((x14*x42))+(((0.076)*x32))))))+(((-1.0)*x19*x29))+(((-1.0)*x26*x58))+((x10*(((((-0.249)*x32))+(((-0.249)*x49))))))+(((-1.0)*x28*x58))+((x10*(((((-1.0)*x26*x57))+(((-1.0)*x28*x57)))))));
eerot[3]=(((x11*((x56+x51))))+((x55*x8)));
eerot[4]=(((x11*x55))+((x8*(((((-1.0)*x22*x47))+(((-1.0)*x21*x53)))))));
eerot[5]=(((x47*x9))+((x10*(((((-1.0)*x24*x43))+x34)))));
IkReal x59=(x1*x26);
IkReal x60=((1.0)*x13);
IkReal x61=((1.0)*x1);
eetrans[1]=(((x18*x27))+((x10*(((((0.249)*x31))+(((-0.249)*x48))))))+((x1*x15))+((x1*x16))+((x9*(((((-1.0)*x35*x61))+(((-0.249)*x59))))))+((x10*(((((-1.0)*x36*x61))+(((-0.076)*x59))))))+(((-1.0)*x18*x29))+(((-1.0)*x26*x60))+(((-1.0)*x28*x60))+((x9*((((x14*x43))+(((-0.076)*x31)))))));
eerot[6]=(((x11*((((x10*x39))+((x33*x41))))))+((x45*x8)));
eerot[7]=(((x8*(((((-1.0)*x22*x39))+(((-1.0)*x21*x44))))))+((x11*x45)));
eerot[8]=(((x30*x40))+((x39*x9)));
eetrans[2]=((0.519)+(((-0.0535)*x7))+(((0.3425)*x29))+((x9*(((((-0.249)*x27))+(((0.249)*x29))))))+((x10*(((((-0.076)*x27))+(((0.076)*x29))))))+((x30*((x35+(((0.249)*x26))))))+(((0.2845)*x4))+(((-0.0775)*x28))+(((-0.0775)*x26))+(((-0.3425)*x27))+((x33*(((((-1.0)*x36))+(((-0.076)*x26)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.18)+px+(((-0.249)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.249)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.519)+(((-0.249)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x62=((1.0)*px);
IkReal x63=((1.0)*pz);
IkReal x64=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x64))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x63)));
rxp0_2=((((-1.0)*r10*x62))+((py*r00)));
rxp1_0=((((-1.0)*r21*x64))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x63)));
rxp1_2=((((-1.0)*r11*x62))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x64)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x63)));
rxp2_2=((((-1.0)*r12*x62))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x65=((0.152)*r20);
IkReal x66=((0.076)*r21);
IkReal x67=((1.0)*rxp2_2);
IkReal x68=((0.685)*npz);
IkReal x69=((1.0)*pp);
IkReal x70=((0.307)*npx);
IkReal x71=((0.155)*npy);
IkReal x72=((0.003)*npx);
IkReal x73=((4.0)*rxp1_2);
IkReal x74=((2.0)*rxp0_2);
IkReal x75=((0.31)*npz);
IkReal x76=((1.37)*npx);
IkReal x77=(rxp2_2+(((-1.0)*x66)));
IkReal x78=((0.006)*npy);
IkReal x79=(x66+(((-1.0)*x67)));
IkReal x80=((-0.155)*npy);
IkReal x81=((-0.31)*npx);
IkReal x82=((-2.0)*rxp0_2);
IkReal x83=((-2.74)*npy);
IkReal x84=((-0.152)*r20);
IkReal x85=(rxp2_2+x66);
IkReal x86=((-0.614)*npy);
IkReal x87=((-0.033506)+x68);
IkReal x88=((-0.057066)+x68);
IkReal x89=((((-1.0)*x67))+(((-1.0)*x66)));
IkReal x90=(x68+x69);
IkReal x91=(x76+x75);
IkReal x92=(x72+x69);
op[0]=x79;
op[1]=x79;
op[2]=x65;
op[3]=x65;
op[4]=x89;
op[5]=x89;
op[6]=(x70+x88+(((-1.0)*x69)));
op[7]=x80;
op[8]=x86;
op[9]=x81;
op[10]=((((-1.0)*x70))+x88+(((-1.0)*x69)));
op[11]=x71;
op[12]=x80;
op[13]=(x87+(((-1.0)*x92)));
op[14]=x81;
op[15]=x78;
op[16]=x71;
op[17]=(x72+x87+(((-1.0)*x69)));
op[18]=0;
op[19]=x79;
op[20]=0;
op[21]=x65;
op[22]=0;
op[23]=x89;
op[24]=x82;
op[25]=x82;
op[26]=x73;
op[27]=x73;
op[28]=x74;
op[29]=x74;
op[30]=((-0.10412)+(((-1.0)*x75))+x76);
op[31]=0;
op[32]=x83;
op[33]=0;
op[34]=((-0.10412)+(((-1.0)*x91)));
op[35]=0;
op[36]=0;
op[37]=((-0.10412)+x91);
op[38]=0;
op[39]=x83;
op[40]=0;
op[41]=((-0.10412)+(((-1.0)*x76))+x75);
op[42]=0;
op[43]=x82;
op[44]=0;
op[45]=x73;
op[46]=0;
op[47]=x74;
op[48]=x77;
op[49]=x77;
op[50]=x84;
op[51]=x84;
op[52]=x85;
op[53]=x85;
op[54]=((-0.033506)+(((-1.0)*x72))+(((-1.0)*x90)));
op[55]=x80;
op[56]=x78;
op[57]=x81;
op[58]=((-0.033506)+x72+(((-1.0)*x90)));
op[59]=x71;
op[60]=x80;
op[61]=((-0.057066)+x70+(((-1.0)*x90)));
op[62]=x81;
op[63]=x86;
op[64]=x71;
op[65]=((-0.057066)+(((-1.0)*x70))+(((-1.0)*x90)));
op[66]=0;
op[67]=x77;
op[68]=0;
op[69]=x84;
op[70]=0;
op[71]=x85;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj3 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj3)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x93=htj4*htj4;
CheckValue<IkReal> x94=IKPowWithIntegerCheck(((1.0)+x93),-1);
if(!x94.valid){
continue;
}
cj4array[numsolutions]=((x94.value)*(((1.0)+(((-1.0)*x93)))));
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x95.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x95.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x96=htj5*htj5;
CheckValue<IkReal> x97=IKPowWithIntegerCheck(((1.0)+x96),-1);
if(!x97.valid){
continue;
}
cj5array[numsolutions]=((x97.value)*(((1.0)+(((-1.0)*x96)))));
CheckValue<IkReal> x98=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x98.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x98.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x99=htj3*htj3;
CheckValue<IkReal> x100=IKPowWithIntegerCheck(((1.0)+x99),-1);
if(!x100.valid){
continue;
}
cj3array[numsolutions]=((x100.value)*(((1.0)+(((-1.0)*x99)))));
CheckValue<IkReal> x101=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x101.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x101.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj3 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij4]-cj3array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij4]-sj3array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij3[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j3 = j3array[ij4]; cj3 = cj3array[ij4]; sj3 = sj3array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x102=(rxp0_2*sj5);
IkReal x103=(cj5*rxp1_2);
IkReal x104=((250.0)*cj3);
IkReal x105=((19.0)*cj3*sj5);
IkReal x106=((19.0)*cj3*cj5);
j0eval[0]=((((-1.0)*r22))+(((-13.1578947368421)*x103))+(((-13.1578947368421)*x102)));
j0eval[1]=IKsign(((((-0.076)*r22))+(((-1.0)*x102))+(((-1.0)*x103))));
j0eval[2]=((IKabs(((((-1.0)*r11*x105))+((r10*x106))+(((-1.0)*py*x104)))))+(IKabs(((((-1.0)*r01*x105))+(((-1.0)*px*x104))+((r00*x106))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x107=((1.0)*cj3);
IkReal x108=(cj5*sj4);
IkReal x109=(cj3*sj4*sj5);
IkReal x110=(((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj4*cj5*r20)));
j0eval[0]=x110;
j0eval[1]=IKsign(x110);
j0eval[2]=((IKabs(((((-1.0)*r10*x107*x108))+((r11*x109))+(((-1.0)*cj4*r12*x107)))))+(IKabs(((((-1.0)*cj4*r02*x107))+((r01*x109))+(((-1.0)*r00*x107*x108))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x111=(rxp2_2*sj4);
IkReal x112=((13.1578947368421)*cj4);
IkReal x113=(rxp1_2*sj5);
IkReal x114=((250.0)*sj3);
IkReal x115=((1.0)*sj4);
IkReal x116=(cj5*r21);
IkReal x117=((19.0)*sj3);
IkReal x118=(cj5*rxp0_2);
IkReal x119=(r20*sj5);
IkReal x120=((0.076)*sj4);
j0eval[0]=((((-1.0)*x112*x118))+((x112*x113))+(((-1.0)*x115*x116))+(((-1.0)*x115*x119))+(((13.1578947368421)*x111)));
j0eval[1]=IKsign(((((-1.0)*x119*x120))+(((-1.0)*x116*x120))+x111+((cj4*x113))+(((-1.0)*cj4*x118))));
j0eval[2]=((IKabs((((cj5*r10*x117))+(((-1.0)*r11*sj5*x117))+(((-1.0)*py*x114)))))+(IKabs(((((-1.0)*px*x114))+((cj5*r00*x117))+(((-1.0)*r01*sj5*x117))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x121=((0.076)*sj5);
IkReal x122=(rxp0_2*sj5);
IkReal x123=((0.076)*cj5);
IkReal x124=(cj5*rxp1_2);
j0eval[0]=((((-1.0)*r22))+(((-13.1578947368421)*x124))+(((-13.1578947368421)*x122)));
j0eval[1]=IKsign(((((-0.076)*r22))+(((-1.0)*x124))+(((-1.0)*x122))));
j0eval[2]=((IKabs((((r00*x123))+(((-1.0)*px))+(((-1.0)*r01*x121)))))+(IKabs(((((-1.0)*r11*x121))+(((-1.0)*py))+((r10*x123))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x125=(cj4*sj5);
IkReal x126=((1.0)*cj4*cj5);
IkReal x127=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)));
j0eval[0]=x127;
j0eval[1]=((IKabs(((((-1.0)*r10*x126))+((r12*sj4))+((r11*x125)))))+(IKabs(((((-1.0)*r00*x126))+((r01*x125))+((r02*sj4))))));
j0eval[2]=IKsign(x127);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x128=r20*r20;
IkReal x129=cj5*cj5;
IkReal x130=((1.0)+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x129*(r21*r21)))+(((-1.0)*x128))+((x128*x129)));
j0eval[0]=x130;
j0eval[1]=IKsign(x130);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x131=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x131) < -0.00001)
continue;
IkReal x132=IKabs(IKsqrt(x131));
IkReal x138 = x131;
if(IKabs(x138)==0){
continue;
}
IkReal x133=pow(x138,-0.5);
IkReal x134=((13.1578947368421)*x133);
CheckValue<IkReal> x139=IKPowWithIntegerCheck(x132,-1);
if(!x139.valid){
continue;
}
IkReal x135=x139.value;
IkReal x136=(r22*x135);
if((((1.0)+(((-1.0)*(x136*x136))))) < -0.00001)
continue;
IkReal x137=IKsqrt(((1.0)+(((-1.0)*(x136*x136)))));
if( (x136) < -1-IKFAST_SINCOS_THRESH || (x136) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x140 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x140.valid){
continue;
}
IkReal gconst6=((IKasin(x136))+(((-1.0)*(x140.value))));
IkReal gconst7=(((rxp1_2*x134*x137))+(((-1.0)*rxp0_2*x134*x136)));
IkReal gconst8=((((-1.0)*rxp1_2*x134*x136))+(((-1.0)*rxp0_2*x134*x137)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x141=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x141.valid){
continue;
}
if( ((r22*(x141.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x141.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x142 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x142.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x141.value))))))+(x142.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x143=gconst7*gconst7;
IkReal x144=gconst8*gconst8;
CheckValue<IkReal> x145=IKPowWithIntegerCheck(IKsign((x143+x144+(((-2.0)*gconst7*gconst8*r20*r21))+(((-1.0)*x144*(r21*r21)))+(((-1.0)*x143*(r20*r20))))),-1);
if(!x145.valid){
continue;
}
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal((((gconst7*r00))+((gconst8*r01)))),IkReal(((((-1.0)*gconst7*r10))+(((-1.0)*gconst8*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x145.value)))+(x146.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x147=IKcos(j0);
IkReal x148=IKsin(j0);
IkReal x149=(cj4*gconst7);
IkReal x150=((0.076)*gconst7);
IkReal x151=(gconst8*r01);
IkReal x152=(gconst7*r10);
IkReal x153=(gconst7*sj4);
IkReal x154=(gconst7*r00);
IkReal x155=((1.0)*cj4);
IkReal x156=(r11*x147);
IkReal x157=((1.0)*x148);
IkReal x158=(r12*x147);
IkReal x159=(gconst8*r00*x148);
IkReal x160=(gconst8*r10*x147);
evalcond[0]=(((x147*x151))+((x147*x154))+((x148*x152))+((gconst8*r11*x148)));
evalcond[1]=((1.0)+(((-1.0)*x154*x157))+(((-1.0)*x151*x157))+((gconst8*x156))+((x147*x152)));
evalcond[2]=((((-1.0)*x150*x156))+(((-1.0)*py*x147))+(((-0.076)*x159))+((px*x148))+(((0.076)*x160))+((r01*x148*x150)));
evalcond[3]=(((x153*x156))+((sj4*x159))+((cj4*r02*x148))+(((-1.0)*r01*x153*x157))+(((-1.0)*sj4*x160))+(((-1.0)*x155*x158)));
evalcond[4]=(((cj4*x159))+((x149*x156))+(((-1.0)*r02*sj4*x157))+((sj4*x158))+(((-1.0)*r01*x149*x157))+(((-1.0)*x155*x160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x161=x131;
if((x161) < -0.00001)
continue;
IkReal x162=IKabs(IKsqrt(x161));
IkReal x169 = x161;
if(IKabs(x169)==0){
continue;
}
IkReal x163=pow(x169,-0.5);
IkReal x164=((13.1578947368421)*x163);
CheckValue<IkReal> x170=IKPowWithIntegerCheck(x162,-1);
if(!x170.valid){
continue;
}
IkReal x165=x170.value;
IkReal x166=(r22*x165);
if((((1.0)+(((-1.0)*(x166*x166))))) < -0.00001)
continue;
IkReal x167=IKsqrt(((1.0)+(((-1.0)*(x166*x166)))));
if( (x166) < -1-IKFAST_SINCOS_THRESH || (x166) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x171 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x171.valid){
continue;
}
IkReal x168=((IKasin(x166))+(((-1.0)*(x171.value))));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst7;
cj5=gconst8;
j5=x168;
IkReal gconst6=x168;
IkReal gconst7=(((rxp1_2*x164*x167))+(((-1.0)*rxp0_2*x164*x166)));
IkReal gconst8=((((-1.0)*rxp1_2*x164*x166))+(((-1.0)*rxp0_2*x164*x167)));
IkReal x172=((12.0)*pz);
IkReal x173=((4.0)*pz);
IkReal x174=((0.93)*gconst8);
IkReal x175=(sj0*sj4);
IkReal x176=(cj4*r20);
IkReal x177=(gconst7*sj4);
IkReal x178=((0.31)*cj0);
IkReal x179=((0.93)*gconst7);
IkReal x180=(gconst7*r21);
IkReal x181=(gconst8*sj4);
IkReal x182=((0.31)*cj4);
IkReal x183=(gconst8*r20);
IkReal x184=((0.31)*gconst8);
IkReal x185=(cj4*r22);
IkReal x186=(r22*sj4);
IkReal x187=(r12*sj0);
IkReal x188=((0.912)*x180);
IkReal x189=((4.11)*x185);
IkReal x190=((0.912)*x183);
IkReal x191=((1.37)*x185);
IkReal x192=((0.304)*x183);
IkReal x193=((0.304)*x180);
IkReal x194=(cj0*cj4*r02);
IkReal x195=((4.11)*r21*x177);
IkReal x196=((4.11)*r20*x181);
IkReal x197=(x174*x176);
IkReal x198=((1.37)*r20*x181);
IkReal x199=((1.37)*r21*x177);
IkReal x200=(r11*x175*x179);
IkReal x201=((0.93)*cj0*r01*x177);
IkReal x202=(x172+x195+x188);
IkReal x203=(x173+x199+x193);
IkReal x204=(x201+x200);
IkReal x205=(x190+x196+x189);
IkReal x206=(x198+x192+x191);
IkReal x207=(((cj4*r21*x179))+x202+(((0.93)*x186)));
IkReal x208=(((r10*x174*x175))+((cj0*r00*sj4*x174))+(((0.93)*cj4*x187))+x205+(((0.93)*x194)));
j1eval[0]=((3.424)+(IKabs(((1.138)+(((0.31)*gconst7*r11*x175))+(((-1.0)*r10*x175*x184))+(((-1.0)*x206))+(((-1.0)*cj4*r02*x178))+x203+((r01*x177*x178))+(((-1.0)*r00*x178*x181))+(((-1.0)*x182*x187)))))+(IKabs(((-1.138)+(((-1.0)*x208))+x204+x202)))+(IKabs(((-1.138)+x197+(((-1.0)*x207))+x205)))+(IKabs(((-1.138)+((x176*x184))+(((-1.0)*x180*x182))+(((-1.0)*x203))+x206+(((-0.31)*x186)))))+(IKabs(((1.138)+x197+(((-1.0)*x207))+x205)))+(IKabs(((1.138)+(((-1.0)*x208))+x204+x202))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x209=(gconst8*r20);
IkReal x210=((0.31)*cj4);
IkReal x211=(r22*sj4);
IkReal x212=((4.11)*sj4);
IkReal x213=(cj4*r22);
IkReal x214=(gconst7*r21);
IkReal x215=((1.37)*sj4);
IkReal x216=((0.93)*cj4);
IkReal x217=((4.11)*x213);
IkReal x218=((0.912)*x209);
IkReal x219=((1.37)*x213);
IkReal x220=((0.304)*x209);
IkReal x221=(x209*x212);
IkReal x222=(x209*x216);
IkReal x223=(x209*x210);
IkReal x224=(x209*x215);
IkReal x225=(x219+x220+x223+x224);
IkReal x226=(x217+x218+x221+x222);
IkReal x227=(((x214*x216))+(((12.0)*pz))+((x212*x214))+(((0.912)*x214))+(((0.93)*x211)));
IkReal x228=((((0.304)*x214))+((x214*x215))+((x210*x214))+(((4.0)*pz))+(((0.31)*x211)));
op[0]=((-1.138)+x225+(((-1.0)*x228)));
op[1]=-0.428;
op[2]=((-1.138)+x226+(((-1.0)*x227)));
op[3]=-0.856;
op[4]=((1.138)+x226+(((-1.0)*x227)));
op[5]=-0.428;
op[6]=((1.138)+x225+(((-1.0)*x228)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x229=((4.0)*pz);
IkReal x230=((12.0)*pz);
IkReal x231=(gconst8*r10);
IkReal x232=((0.93)*cj0);
IkReal x233=(cj4*r02);
IkReal x234=(gconst7*sj4);
IkReal x235=((0.31)*cj0);
IkReal x236=(gconst7*r21);
IkReal x237=(gconst8*sj4);
IkReal x238=(gconst8*r20);
IkReal x239=((0.31)*sj0);
IkReal x240=(cj4*r22);
IkReal x241=(cj4*r12);
IkReal x242=((0.304)*x236);
IkReal x243=((0.912)*x236);
IkReal x244=((0.93)*sj0*sj4);
IkReal x245=((1.37)*r21*x234);
IkReal x246=((4.11)*r21*x234);
IkReal x247=((0.93)*r11*sj0*x234);
IkReal x248=(r01*x232*x234);
IkReal x249=(r01*x234*x235);
IkReal x250=(r11*x234*x239);
IkReal x251=(x230+x243+x247+x246+x248);
IkReal x252=(x250+x229+x242+x245+x249);
IkReal x253=(((x232*x233))+(((4.11)*x240))+((r00*x232*x237))+((x231*x244))+(((4.11)*r20*x237))+(((0.93)*sj0*x241))+(((0.912)*x238)));
IkReal x254=(((r00*x235*x237))+(((1.37)*r20*x237))+((x233*x235))+((x239*x241))+((sj4*x231*x239))+(((1.37)*x240))+(((0.304)*x238)));
j1evalpoly[0]=((-1.138)+(((0.428)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x252+(((-1.0)*x254))))))+x252+(((htj1*htj1*htj1*htj1)*(((1.138)+x251+(((-1.0)*x253))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.138)+x251+(((-1.0)*x253))))))+(((-1.0)*x254)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x255=(cj1*cj4);
IkReal x256=(gconst7*r21);
IkReal x257=(sj1*sj4);
IkReal x258=(cj4*sj1);
IkReal x259=(cj1*sj4);
IkReal x260=(gconst8*r20*sj4);
IkReal x261=((1.0)*gconst8*r20);
if( IKabs(((((-1.0)*x255*x261))+(((-1.0)*x256*x257))+((gconst8*r20*x257))+((r22*x258))+((r22*x259))+((x255*x256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x255))+(((-1.0)*x258*x261))+(((-1.0)*x259*x261))+((x256*x259))+((x256*x258))+((r22*x257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x255*x261))+(((-1.0)*x256*x257))+((gconst8*r20*x257))+((r22*x258))+((r22*x259))+((x255*x256))))+IKsqr(((((-1.0)*r22*x255))+(((-1.0)*x258*x261))+(((-1.0)*x259*x261))+((x256*x259))+((x256*x258))+((r22*x257))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x255*x261))+(((-1.0)*x256*x257))+((gconst8*r20*x257))+((r22*x258))+((r22*x259))+((x255*x256))), ((((-1.0)*r22*x255))+(((-1.0)*x258*x261))+(((-1.0)*x259*x261))+((x256*x259))+((x256*x258))+((r22*x257))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x262=IKcos(j2);
IkReal x263=IKsin(j2);
IkReal x264=((1.0)*cj4);
IkReal x265=(gconst7*r21);
IkReal x266=((0.076)*gconst7);
IkReal x267=(cj0*r01);
IkReal x268=((1.0)*sj4);
IkReal x269=(cj0*r02);
IkReal x270=(gconst8*r20);
IkReal x271=(r11*sj0);
IkReal x272=(r12*sj0);
IkReal x273=(cj4*gconst7);
IkReal x274=(gconst7*sj4);
IkReal x275=(cj1*x262);
IkReal x276=(cj0*gconst8*r00);
IkReal x277=(cj1*x263);
IkReal x278=(gconst8*r10*sj0);
IkReal x279=(sj1*x263);
IkReal x280=(sj1*x262);
IkReal x281=((1.0)*x279);
evalcond[0]=(((cj4*r22))+x275+(((-1.0)*x281))+(((-1.0)*x265*x268))+((sj4*x270)));
evalcond[1]=(((cj4*x270))+x277+x280+(((-1.0)*r22*x268))+(((-1.0)*x264*x265)));
evalcond[2]=((((-0.076)*x270))+(((0.0535)*sj1))+(((0.076)*x265))+(((0.0775)*x277))+(((-0.3425)*x279))+(((-0.2845)*cj1))+pz+(((0.0775)*x280))+(((0.3425)*x275)));
evalcond[3]=(((x271*x273))+x275+(((-1.0)*x281))+((sj4*x269))+((sj4*x272))+(((-1.0)*x264*x276))+(((-1.0)*x264*x278))+((x267*x273)));
evalcond[4]=(((x271*x274))+(((-1.0)*x277))+(((-1.0)*x280))+(((-1.0)*x268*x278))+(((-1.0)*x268*x276))+(((-1.0)*x264*x269))+(((-1.0)*x264*x272))+((x267*x274)));
evalcond[5]=((((0.2845)*sj1))+(((0.0775)*x275))+(((-0.3425)*x280))+(((0.076)*x278))+(((0.076)*x276))+(((-0.3425)*x277))+(((-0.0775)*x279))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*x266*x271))+(((-1.0)*x266*x267))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x282=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x282) < -0.00001)
continue;
IkReal x283=IKabs(IKsqrt(x282));
IkReal x289 = x282;
if(IKabs(x289)==0){
continue;
}
IkReal x284=pow(x289,-0.5);
IkReal x285=((13.1578947368421)*x284);
CheckValue<IkReal> x290=IKPowWithIntegerCheck(x283,-1);
if(!x290.valid){
continue;
}
IkReal x286=x290.value;
IkReal x287=(r22*x286);
if((((1.0)+(((-1.0)*(x287*x287))))) < -0.00001)
continue;
IkReal x288=IKsqrt(((1.0)+(((-1.0)*(x287*x287)))));
if( (x287) < -1-IKFAST_SINCOS_THRESH || (x287) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x291.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin(x287))))+(((-1.0)*(x291.value))));
IkReal gconst10=((((-1.0)*rxp0_2*x285*x287))+(((-1.0)*rxp1_2*x285*x288)));
IkReal gconst11=((((-1.0)*rxp1_2*x285*x287))+((rxp0_2*x285*x288)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x292=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x292.valid){
continue;
}
if( ((r22*(x292.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x292.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x293 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x293.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x292.value))))+(x293.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x294=gconst10*gconst10;
IkReal x295=gconst11*gconst11;
CheckValue<IkReal> x296 = IKatan2WithCheck(IkReal((((gconst10*r00))+((gconst11*r01)))),IkReal(((((-1.0)*gconst10*r10))+(((-1.0)*gconst11*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x296.valid){
continue;
}
CheckValue<IkReal> x297=IKPowWithIntegerCheck(IKsign(((((-1.0)*x295*(r21*r21)))+(((-2.0)*gconst10*gconst11*r20*r21))+x294+x295+(((-1.0)*x294*(r20*r20))))),-1);
if(!x297.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x296.value)+(((1.5707963267949)*(x297.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x298=IKsin(j0);
IkReal x299=IKcos(j0);
IkReal x300=((1.0)*sj4);
IkReal x301=((1.0)*cj4);
IkReal x302=(gconst10*r00);
IkReal x303=(gconst11*x299);
IkReal x304=(gconst11*x298);
IkReal x305=(gconst10*x299);
IkReal x306=(r02*x298);
IkReal x307=(r12*x299);
IkReal x308=(gconst10*r01*x298);
evalcond[0]=(((r11*x304))+((gconst10*r10*x298))+((x299*x302))+((r01*x303)));
evalcond[1]=((1.0)+((r11*x303))+(((-1.0)*x298*x302))+(((-1.0)*r01*x304))+((r10*x305)));
evalcond[2]=((((-1.0)*py*x299))+(((-0.076)*r00*x304))+(((0.076)*x308))+((px*x298))+(((-0.076)*r11*x305))+(((0.076)*r10*x303)));
evalcond[3]=((((-1.0)*x301*x307))+((r00*sj4*x304))+((r11*sj4*x305))+(((-1.0)*r10*x300*x303))+(((-1.0)*x300*x308))+((cj4*x306)));
evalcond[4]=((((-1.0)*x301*x308))+((cj4*r00*x304))+((cj4*r11*x305))+((sj4*x307))+(((-1.0)*x300*x306))+(((-1.0)*r10*x301*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x309=x282;
if((x309) < -0.00001)
continue;
IkReal x310=IKabs(IKsqrt(x309));
IkReal x317 = x309;
if(IKabs(x317)==0){
continue;
}
IkReal x311=pow(x317,-0.5);
IkReal x312=((13.1578947368421)*x311);
CheckValue<IkReal> x318=IKPowWithIntegerCheck(x310,-1);
if(!x318.valid){
continue;
}
IkReal x313=x318.value;
IkReal x314=(r22*x313);
if((((1.0)+(((-1.0)*(x314*x314))))) < -0.00001)
continue;
IkReal x315=IKsqrt(((1.0)+(((-1.0)*(x314*x314)))));
CheckValue<IkReal> x319 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x319.valid){
continue;
}
if( (x314) < -1-IKFAST_SINCOS_THRESH || (x314) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x316=((((1.0)*(x319.value)))+(((1.0)*(IKasin(x314)))));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x316)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x316)));
IkReal gconst10=((((-1.0)*rxp1_2*x312*x315))+(((-1.0)*rxp0_2*x312*x314)));
IkReal gconst11=((((-1.0)*rxp1_2*x312*x314))+((rxp0_2*x312*x315)));
IkReal x320=((12.0)*pz);
IkReal x321=((4.0)*pz);
IkReal x322=(sj0*sj4);
IkReal x323=((0.93)*gconst10);
IkReal x324=((0.31)*gconst11);
IkReal x325=((0.93)*cj4);
IkReal x326=(cj0*r02);
IkReal x327=(gconst10*sj4);
IkReal x328=(r12*sj0);
IkReal x329=(cj0*r01);
IkReal x330=(gconst11*r20);
IkReal x331=(cj4*r21);
IkReal x332=((0.93)*gconst11);
IkReal x333=((0.31)*gconst10);
IkReal x334=(cj4*r22);
IkReal x335=((0.31)*cj4);
IkReal x336=(r22*sj4);
IkReal x337=(gconst10*r21);
IkReal x338=((0.912)*x337);
IkReal x339=((4.11)*x334);
IkReal x340=((0.912)*x330);
IkReal x341=((0.304)*x337);
IkReal x342=((1.37)*x334);
IkReal x343=((0.304)*x330);
IkReal x344=(cj0*r00*sj4);
IkReal x345=((4.11)*r21*x327);
IkReal x346=((4.11)*sj4*x330);
IkReal x347=(x325*x330);
IkReal x348=((1.37)*r21*x327);
IkReal x349=((1.37)*sj4*x330);
IkReal x350=(sj4*x323*x329);
IkReal x351=(r11*x322*x323);
IkReal x352=(x321+x341+x348);
IkReal x353=(x339+x340+x346);
IkReal x354=(x342+x343+x349);
IkReal x355=(x338+x320+x345+(((0.93)*x336))+((x323*x331)));
IkReal x356=(x338+x320+x351+x350+x345);
IkReal x357=(((x325*x328))+((x325*x326))+x353+((x332*x344))+((r10*x322*x332)));
j1eval[0]=((3.424)+(IKabs(((-1.138)+(((-1.0)*x355))+x353+x347)))+(IKabs(((1.138)+(((-1.0)*x357))+x356)))+(IKabs(((-1.138)+(((-1.0)*x357))+x356)))+(IKabs(((1.138)+(((-1.0)*x355))+x353+x347)))+(IKabs(((1.138)+((r11*x322*x333))+(((-1.0)*x354))+(((-1.0)*x328*x335))+(((-1.0)*x324*x344))+x352+(((0.31)*x327*x329))+(((-1.0)*r10*x322*x324))+(((-1.0)*x326*x335)))))+(IKabs(((-1.138)+(((-1.0)*x352))+x354+(((-0.31)*x336))+((cj4*r20*x324))+(((-1.0)*x331*x333))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x358=(gconst11*r20);
IkReal x359=((1.37)*sj4);
IkReal x360=(r22*sj4);
IkReal x361=(gconst10*r21);
IkReal x362=((0.93)*cj4);
IkReal x363=(cj4*r22);
IkReal x364=((0.31)*cj4);
IkReal x365=((4.11)*sj4);
IkReal x366=((4.11)*x363);
IkReal x367=((0.912)*x358);
IkReal x368=((1.37)*x363);
IkReal x369=((0.304)*x358);
IkReal x370=(x358*x365);
IkReal x371=(x358*x362);
IkReal x372=(x358*x359);
IkReal x373=(x358*x364);
IkReal x374=(x371+x370+x366+x367);
IkReal x375=(x373+x372+x368+x369);
IkReal x376=(((x361*x362))+((x361*x365))+(((12.0)*pz))+(((0.912)*x361))+(((0.93)*x360)));
IkReal x377=(((x361*x364))+(((0.304)*x361))+(((4.0)*pz))+((x359*x361))+(((0.31)*x360)));
op[0]=((-1.138)+(((-1.0)*x377))+x375);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x376))+x374);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x376))+x374);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x377))+x375);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x378=((4.0)*pz);
IkReal x379=((12.0)*pz);
IkReal x380=(sj0*sj4);
IkReal x381=((0.93)*gconst10);
IkReal x382=(gconst11*r10);
IkReal x383=((0.93)*cj4);
IkReal x384=(cj0*r02);
IkReal x385=(r12*sj0);
IkReal x386=(gconst11*r20);
IkReal x387=((0.31)*gconst10);
IkReal x388=((1.37)*sj4);
IkReal x389=(cj4*r22);
IkReal x390=((0.31)*cj4);
IkReal x391=(gconst10*r21);
IkReal x392=((4.11)*sj4);
IkReal x393=((0.304)*x391);
IkReal x394=((0.912)*x391);
IkReal x395=(cj0*r01*sj4);
IkReal x396=(x391*x392);
IkReal x397=(x388*x391);
IkReal x398=(cj0*gconst11*r00*sj4);
IkReal x399=(r11*x380*x387);
IkReal x400=(x381*x395);
IkReal x401=(r11*x380*x381);
IkReal x402=(x387*x395);
IkReal x403=(x379+x394+x396+x401+x400);
IkReal x404=(x378+x397+x393+x399+x402);
IkReal x405=((((0.912)*x386))+(((4.11)*x389))+(((0.93)*x380*x382))+((x383*x385))+((x383*x384))+((x386*x392))+(((0.93)*x398)));
IkReal x406=(((x385*x390))+((x386*x388))+(((0.31)*x380*x382))+(((1.37)*x389))+((x384*x390))+(((0.31)*x398))+(((0.304)*x386)));
j1evalpoly[0]=((-1.138)+(((0.428)*htj1))+(((htj1*htj1)*(((-1.138)+x403+(((-1.0)*x405))))))+(((htj1*htj1*htj1*htj1)*(((1.138)+x403+(((-1.0)*x405))))))+x404+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x404+(((-1.0)*x406))))))+(((-1.0)*x406)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x407=((1.0)*cj1);
IkReal x408=(cj4*r22);
IkReal x409=(gconst11*r20);
IkReal x410=((1.0)*sj1);
IkReal x411=(sj1*sj4);
IkReal x412=(gconst10*r21*sj4);
IkReal x413=(cj4*gconst10*r21);
if( IKabs((((sj1*x408))+(((-1.0)*cj4*x407*x409))+((x409*x411))+(((-1.0)*x410*x412))+((cj1*r22*sj4))+((cj1*x413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x413))+((r22*x411))+(((-1.0)*sj4*x407*x409))+(((-1.0)*x407*x408))+(((-1.0)*cj4*x409*x410))+((cj1*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x408))+(((-1.0)*cj4*x407*x409))+((x409*x411))+(((-1.0)*x410*x412))+((cj1*r22*sj4))+((cj1*x413))))+IKsqr((((sj1*x413))+((r22*x411))+(((-1.0)*sj4*x407*x409))+(((-1.0)*x407*x408))+(((-1.0)*cj4*x409*x410))+((cj1*x412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x408))+(((-1.0)*cj4*x407*x409))+((x409*x411))+(((-1.0)*x410*x412))+((cj1*r22*sj4))+((cj1*x413))), (((sj1*x413))+((r22*x411))+(((-1.0)*sj4*x407*x409))+(((-1.0)*x407*x408))+(((-1.0)*cj4*x409*x410))+((cj1*x412))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x414=IKcos(j2);
IkReal x415=IKsin(j2);
IkReal x416=(gconst10*sj4);
IkReal x417=(cj0*r01);
IkReal x418=((0.076)*gconst11);
IkReal x419=((1.0)*r21);
IkReal x420=((0.076)*gconst10);
IkReal x421=(r11*sj0);
IkReal x422=(r10*sj0);
IkReal x423=(cj0*r00);
IkReal x424=(r12*sj0);
IkReal x425=(cj4*gconst10);
IkReal x426=(cj0*r02);
IkReal x427=((1.0)*cj4);
IkReal x428=(gconst11*sj4);
IkReal x429=(cj1*x414);
IkReal x430=(cj1*x415);
IkReal x431=(gconst11*x427);
IkReal x432=(sj1*x415);
IkReal x433=(sj1*x414);
IkReal x434=((1.0)*x432);
evalcond[0]=(((r20*x428))+(((-1.0)*x434))+((cj4*r22))+x429+(((-1.0)*x416*x419)));
evalcond[1]=(x430+x433+(((-1.0)*x419*x425))+(((-1.0)*r22*sj4))+((cj4*gconst11*r20)));
evalcond[2]=(((r21*x420))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x432))+(((-1.0)*r20*x418))+pz+(((0.3425)*x429))+(((0.0775)*x430))+(((0.0775)*x433)));
evalcond[3]=((((-1.0)*x434))+((sj4*x424))+((sj4*x426))+x429+(((-1.0)*x422*x431))+((x421*x425))+(((-1.0)*x423*x431))+((x417*x425)));
evalcond[4]=(((x416*x417))+(((-1.0)*x430))+(((-1.0)*x433))+(((-1.0)*x423*x428))+(((-1.0)*x422*x428))+((x416*x421))+(((-1.0)*x426*x427))+(((-1.0)*x424*x427)));
evalcond[5]=((((-1.0)*x420*x421))+(((0.2845)*sj1))+(((-0.3425)*x430))+(((-0.3425)*x433))+((x418*x422))+((x418*x423))+(((0.0535)*cj1))+(((-0.0775)*x432))+(((-1.0)*x417*x420))+(((-1.0)*py*sj0))+(((0.0775)*x429))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x435=cj5*cj5;
CheckValue<IkReal> x436 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x435*(r21*r21)))+(((-2.0)*cj5*r20*r21*sj5))+(((r20*r20)*(((-1.0)+x435)))))),-1);
if(!x437.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x436.value)+(((1.5707963267949)*(x437.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x438=IKcos(j0);
IkReal x439=IKsin(j0);
IkReal x440=((1.0)*r01);
IkReal x441=((1.0)*r10);
IkReal x442=(cj5*x439);
IkReal x443=(sj5*x438);
IkReal x444=(sj4*x439);
IkReal x445=(cj5*x438);
IkReal x446=(sj5*x439);
IkReal x447=(r12*x438);
evalcond[0]=(((r01*x445))+((r00*x443))+((r10*x446))+((r11*x442)));
evalcond[1]=((1.0)+(((-1.0)*r00*x446))+(((-1.0)*x440*x442))+((r10*x443))+((r11*x445)));
evalcond[2]=(((px*x439))+(((-0.076)*r11*x443))+(((-1.0)*py*x438))+(((-0.076)*r00*x442))+(((0.076)*r01*x446))+(((0.076)*r10*x445)));
evalcond[3]=(((cj4*r02*x439))+((r11*sj4*x443))+(((-1.0)*sj4*x441*x445))+(((-1.0)*cj4*x447))+(((-1.0)*sj5*x440*x444))+((r00*sj4*x442)));
evalcond[4]=((((-1.0)*cj4*x440*x446))+((sj4*x447))+(((-1.0)*r02*x444))+(((-1.0)*cj4*x441*x445))+((cj4*r11*x443))+((cj4*r00*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x448=((4.11)*pz);
IkReal x449=(cj5*r20);
IkReal x450=((4.11)*sj4);
IkReal x451=((0.31)*cj4);
IkReal x452=((0.07068)*sj5);
IkReal x453=(cj0*r01);
IkReal x454=(r21*sj5);
IkReal x455=(r22*sj4);
IkReal x456=((0.93)*cj4);
IkReal x457=((1.37)*sj4);
IkReal x458=((0.07068)*cj5);
IkReal x459=(r10*sj0);
IkReal x460=(cj0*r00);
IkReal x461=((0.02356)*cj5);
IkReal x462=(cj0*px);
IkReal x463=((0.49325)*sj4);
IkReal x464=(cj4*r22);
IkReal x465=(r11*sj0);
IkReal x466=((0.02356)*sj5);
IkReal x467=(py*sj0);
IkReal x468=((1.47975)*sj4);
IkReal x469=((0.31236)*x454);
IkReal x470=((4.11)*x464);
IkReal x471=((0.912)*x449);
IkReal x472=(x458*x459);
IkReal x473=(x458*x460);
IkReal x474=(x454*x468);
IkReal x475=(x449*x456);
IkReal x476=(x449*x450);
IkReal x477=(x475+x476+x470+x471);
IkReal x478=(((x454*x456))+(((12.0)*pz))+(((0.912)*x454))+((x450*x454))+(((0.93)*x455)));
IkReal x479=(x448+x469+x474+x472+x473);
IkReal x480=(((x452*x465))+((x452*x453))+(((0.31236)*x449))+((x449*x468))+(((0.93)*x462))+(((0.93)*x467))+(((1.47975)*x464)));
j1eval[0]=((3.00392)+(IKabs(((-0.37318)+(((-1.0)*x480))+x479)))+(IKabs(((0.37318)+(((-1.0)*x465*x466))+(((-0.49325)*x464))+(((-0.31)*x462))+(((-0.31)*x467))+(((1.37)*pz))+((x454*x463))+(((-0.10412)*x449))+(((-1.0)*x453*x466))+((x460*x461))+((x459*x461))+(((-1.0)*x449*x463))+(((0.10412)*x454)))))+(IKabs(((-1.138)+(((-1.0)*x478))+x477)))+(IKabs(((0.37318)+(((-1.0)*x480))+x479)))+(IKabs(((-1.138)+(((-0.31)*x455))+(((1.37)*x464))+(((-0.304)*x454))+(((-1.0)*x454*x457))+(((0.304)*x449))+((x449*x457))+((x449*x451))+(((-1.0)*x451*x454))+(((-4.0)*pz)))))+(IKabs(((1.138)+(((-1.0)*x478))+x477))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x481=(cj5*r20);
IkReal x482=((4.11)*sj4);
IkReal x483=(r21*sj5);
IkReal x484=((0.31)*cj4);
IkReal x485=((0.93)*cj4);
IkReal x486=(r22*sj4);
IkReal x487=(cj4*r22);
IkReal x488=((1.37)*sj4);
IkReal x489=((4.11)*x487);
IkReal x490=((0.912)*x481);
IkReal x491=((1.37)*x487);
IkReal x492=((0.304)*x481);
IkReal x493=(x481*x485);
IkReal x494=(x481*x482);
IkReal x495=(x481*x488);
IkReal x496=(x481*x484);
IkReal x497=(x492+x491+x496+x495);
IkReal x498=(x489+x493+x490+x494);
IkReal x499=((((12.0)*pz))+((x483*x485))+(((0.93)*x486))+(((0.912)*x483))+((x482*x483)));
IkReal x500=((((0.304)*x483))+(((4.0)*pz))+((x483*x488))+((x483*x484))+(((0.31)*x486)));
op[0]=((-1.138)+(((-1.0)*x500))+x497);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x499))+x498);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x499))+x498);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x500))+x497);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x501=((1.37)*pz);
IkReal x502=((4.11)*pz);
IkReal x503=((0.07068)*sj5);
IkReal x504=(cj0*r01);
IkReal x505=(cj5*r20);
IkReal x506=(r21*sj5);
IkReal x507=((0.07068)*cj5);
IkReal x508=(r10*sj0);
IkReal x509=(cj0*px);
IkReal x510=((0.49325)*sj4);
IkReal x511=(cj4*r22);
IkReal x512=(r11*sj0);
IkReal x513=(cj0*r00);
IkReal x514=((0.02356)*sj5);
IkReal x515=((0.02356)*cj5);
IkReal x516=(py*sj0);
IkReal x517=((1.47975)*sj4);
IkReal x518=((0.10412)*x506);
IkReal x519=((0.31236)*x506);
IkReal x520=(x508*x515);
IkReal x521=(x507*x508);
IkReal x522=(x507*x513);
IkReal x523=(x506*x517);
IkReal x524=(x513*x515);
IkReal x525=(x506*x510);
IkReal x526=(x502+x522+x523+x521+x519);
IkReal x527=(x501+x520+x524+x525+x518);
IkReal x528=((((0.93)*x509))+((x503*x512))+(((0.31236)*x505))+(((0.93)*x516))+((x503*x504))+(((1.47975)*x511))+((x505*x517)));
IkReal x529=((((0.49325)*x511))+(((0.31)*x509))+((x504*x514))+((x512*x514))+(((0.31)*x516))+(((0.10412)*x505))+((x505*x510)));
j1evalpoly[0]=((-0.37318)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x529))+x527))))+(((0.64596)*(htj1*htj1*htj1)))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x529))+(((htj1*htj1)*(((-0.37318)+(((-1.0)*x528))+x526))))+(((0.32298)*htj1))+x527+(((htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x528))+x526)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x530=(cj4*r22);
IkReal x531=((1.0)*cj1);
IkReal x532=(sj1*sj4);
IkReal x533=(cj5*r20);
IkReal x534=(r21*sj5);
IkReal x535=(cj4*sj1);
IkReal x536=(cj1*x534);
if( IKabs((((cj4*x536))+(((-1.0)*x532*x534))+((sj1*x530))+(((-1.0)*cj4*x531*x533))+((x532*x533))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x530*x531))+((r22*x532))+((x534*x535))+(((-1.0)*x533*x535))+((sj4*x536))+(((-1.0)*sj4*x531*x533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x536))+(((-1.0)*x532*x534))+((sj1*x530))+(((-1.0)*cj4*x531*x533))+((x532*x533))+((cj1*r22*sj4))))+IKsqr(((((-1.0)*x530*x531))+((r22*x532))+((x534*x535))+(((-1.0)*x533*x535))+((sj4*x536))+(((-1.0)*sj4*x531*x533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x536))+(((-1.0)*x532*x534))+((sj1*x530))+(((-1.0)*cj4*x531*x533))+((x532*x533))+((cj1*r22*sj4))), ((((-1.0)*x530*x531))+((r22*x532))+((x534*x535))+(((-1.0)*x533*x535))+((sj4*x536))+(((-1.0)*sj4*x531*x533))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x537=IKcos(j2);
IkReal x538=IKsin(j2);
IkReal x539=((1.0)*sj4);
IkReal x540=((0.076)*sj5);
IkReal x541=(r11*sj0);
IkReal x542=((1.0)*cj4);
IkReal x543=(cj0*r02);
IkReal x544=(cj0*r01);
IkReal x545=(cj5*r20);
IkReal x546=((1.0)*sj1);
IkReal x547=(sj4*sj5);
IkReal x548=(r21*sj5);
IkReal x549=(cj4*sj5);
IkReal x550=(r12*sj0);
IkReal x551=(cj1*x537);
IkReal x552=(cj5*r10*sj0);
IkReal x553=(cj0*cj5*r00);
IkReal x554=(cj1*x538);
IkReal x555=(sj1*x538);
IkReal x556=(sj1*x537);
IkReal x557=(x538*x546);
evalcond[0]=(((cj4*r22))+(((-1.0)*x539*x548))+(((-1.0)*x557))+x551+((sj4*x545)));
evalcond[1]=((((-1.0)*r22*x539))+(((-1.0)*x542*x548))+((cj4*x545))+x556+x554);
evalcond[2]=(((r21*x540))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x551))+(((-0.3425)*x555))+(((0.0775)*x556))+(((0.0775)*x554))+(((-0.076)*x545))+pz);
evalcond[3]=(((sj4*x550))+((x541*x549))+((x544*x549))+(((-1.0)*x557))+x551+((sj4*x543))+(((-1.0)*x542*x552))+(((-1.0)*x542*x553)));
evalcond[4]=((((-1.0)*x537*x546))+(((-1.0)*x554))+(((-1.0)*x542*x543))+((x541*x547))+((x544*x547))+(((-1.0)*x539*x552))+(((-1.0)*x539*x553))+(((-1.0)*x542*x550)));
evalcond[5]=((((0.2845)*sj1))+(((-0.0775)*x555))+(((-1.0)*x540*x544))+(((-1.0)*x540*x541))+(((-0.3425)*x556))+(((-0.3425)*x554))+(((0.0775)*x551))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.076)*x553))+(((0.076)*x552))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x558=(cj4*sj5);
IkReal x559=((1.0)*cj4*cj5);
CheckValue<IkReal> x560 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x559))+((r11*x558))+((r12*sj4)))),IkReal(((((-1.0)*r00*x559))+((r02*sj4))+((r01*x558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x560.valid){
continue;
}
CheckValue<IkReal> x561=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)))),-1);
if(!x561.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x560.value)+(((1.5707963267949)*(x561.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x562=IKcos(j0);
IkReal x563=IKsin(j0);
IkReal x564=((1.0)*r01);
IkReal x565=((1.0)*r10);
IkReal x566=(cj5*x563);
IkReal x567=(sj5*x562);
IkReal x568=(sj4*x563);
IkReal x569=(cj5*x562);
IkReal x570=(sj5*x563);
IkReal x571=(r12*x562);
evalcond[0]=(((r01*x569))+((r00*x567))+((r10*x570))+((r11*x566)));
evalcond[1]=((1.0)+(((-1.0)*x564*x566))+(((-1.0)*r00*x570))+((r10*x567))+((r11*x569)));
evalcond[2]=((((-1.0)*py*x562))+(((-0.076)*r11*x567))+(((0.076)*r01*x570))+(((-0.076)*r00*x566))+((px*x563))+(((0.076)*r10*x569)));
evalcond[3]=(((r11*sj4*x567))+(((-1.0)*sj5*x564*x568))+(((-1.0)*cj4*x571))+((r00*sj4*x566))+(((-1.0)*sj4*x565*x569))+((cj4*r02*x563)));
evalcond[4]=(((cj4*r11*x567))+((sj4*x571))+(((-1.0)*cj4*x565*x569))+(((-1.0)*cj4*x564*x570))+(((-1.0)*r02*x568))+((cj4*r00*x566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x572=((4.11)*pz);
IkReal x573=(cj5*r20);
IkReal x574=((4.11)*sj4);
IkReal x575=((0.31)*cj4);
IkReal x576=((0.07068)*sj5);
IkReal x577=(cj0*r01);
IkReal x578=(r21*sj5);
IkReal x579=(r22*sj4);
IkReal x580=((0.93)*cj4);
IkReal x581=((1.37)*sj4);
IkReal x582=((0.07068)*cj5);
IkReal x583=(r10*sj0);
IkReal x584=(cj0*r00);
IkReal x585=((0.02356)*cj5);
IkReal x586=(cj0*px);
IkReal x587=((0.49325)*sj4);
IkReal x588=(cj4*r22);
IkReal x589=(r11*sj0);
IkReal x590=((0.02356)*sj5);
IkReal x591=(py*sj0);
IkReal x592=((1.47975)*sj4);
IkReal x593=((0.31236)*x578);
IkReal x594=((4.11)*x588);
IkReal x595=((0.912)*x573);
IkReal x596=(x582*x583);
IkReal x597=(x582*x584);
IkReal x598=(x578*x592);
IkReal x599=(x573*x580);
IkReal x600=(x573*x574);
IkReal x601=(x595+x594+x599+x600);
IkReal x602=(((x578*x580))+(((12.0)*pz))+((x574*x578))+(((0.912)*x578))+(((0.93)*x579)));
IkReal x603=(x572+x597+x596+x593+x598);
IkReal x604=(((x573*x592))+(((0.31236)*x573))+((x576*x577))+(((1.47975)*x588))+(((0.93)*x591))+(((0.93)*x586))+((x576*x589)));
j1eval[0]=((3.00392)+(IKabs(((0.37318)+((x584*x585))+((x578*x587))+((x583*x585))+(((1.37)*pz))+(((0.10412)*x578))+(((-1.0)*x589*x590))+(((-0.31)*x586))+(((-0.10412)*x573))+(((-1.0)*x573*x587))+(((-0.31)*x591))+(((-1.0)*x577*x590))+(((-0.49325)*x588)))))+(IKabs(((-1.138)+x601+(((-1.0)*x602)))))+(IKabs(((-0.37318)+x603+(((-1.0)*x604)))))+(IKabs(((0.37318)+x603+(((-1.0)*x604)))))+(IKabs(((-1.138)+(((-0.31)*x579))+(((-1.0)*x578*x581))+(((1.37)*x588))+((x573*x575))+(((-1.0)*x575*x578))+((x573*x581))+(((0.304)*x573))+(((-4.0)*pz))+(((-0.304)*x578)))))+(IKabs(((1.138)+x601+(((-1.0)*x602))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x605=(cj5*r20);
IkReal x606=((4.11)*sj4);
IkReal x607=(r21*sj5);
IkReal x608=((0.31)*cj4);
IkReal x609=((0.93)*cj4);
IkReal x610=(r22*sj4);
IkReal x611=(cj4*r22);
IkReal x612=((1.37)*sj4);
IkReal x613=((4.11)*x611);
IkReal x614=((0.912)*x605);
IkReal x615=((1.37)*x611);
IkReal x616=((0.304)*x605);
IkReal x617=(x605*x609);
IkReal x618=(x605*x606);
IkReal x619=(x605*x612);
IkReal x620=(x605*x608);
IkReal x621=(x619+x615+x616+x620);
IkReal x622=(x618+x614+x617+x613);
IkReal x623=((((12.0)*pz))+((x607*x609))+((x606*x607))+(((0.93)*x610))+(((0.912)*x607)));
IkReal x624=((((4.0)*pz))+((x607*x608))+(((0.31)*x610))+((x607*x612))+(((0.304)*x607)));
op[0]=((-1.138)+(((-1.0)*x624))+x621);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x623))+x622);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x623))+x622);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x624))+x621);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x625=((1.37)*pz);
IkReal x626=((4.11)*pz);
IkReal x627=((0.07068)*sj5);
IkReal x628=(cj0*r01);
IkReal x629=(cj5*r20);
IkReal x630=(r21*sj5);
IkReal x631=((0.07068)*cj5);
IkReal x632=(r10*sj0);
IkReal x633=(cj0*px);
IkReal x634=((0.49325)*sj4);
IkReal x635=(cj4*r22);
IkReal x636=(r11*sj0);
IkReal x637=(cj0*r00);
IkReal x638=((0.02356)*sj5);
IkReal x639=((0.02356)*cj5);
IkReal x640=(py*sj0);
IkReal x641=((1.47975)*sj4);
IkReal x642=((0.10412)*x630);
IkReal x643=((0.31236)*x630);
IkReal x644=(x632*x639);
IkReal x645=(x631*x632);
IkReal x646=(x631*x637);
IkReal x647=(x630*x641);
IkReal x648=(x637*x639);
IkReal x649=(x630*x634);
IkReal x650=(x647+x646+x645+x643+x626);
IkReal x651=(x644+x642+x649+x648+x625);
IkReal x652=((((0.93)*x633))+((x629*x641))+(((0.93)*x640))+(((1.47975)*x635))+((x627*x636))+((x627*x628))+(((0.31236)*x629)));
IkReal x653=((((0.10412)*x629))+(((0.31)*x633))+((x628*x638))+(((0.31)*x640))+((x629*x634))+((x636*x638))+(((0.49325)*x635)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.37318)+(((-1.0)*x652))+x650))))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x652))+x650))))+(((-1.0)*x653))+(((0.32298)*htj1))+x651+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x653))+x651)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x654=(cj4*r22);
IkReal x655=((1.0)*cj1);
IkReal x656=(sj1*sj4);
IkReal x657=(cj5*r20);
IkReal x658=(r21*sj5);
IkReal x659=(cj4*sj1);
IkReal x660=(cj1*x658);
if( IKabs((((sj1*x654))+(((-1.0)*cj4*x655*x657))+((x656*x657))+((cj4*x660))+(((-1.0)*x656*x658))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x655*x657))+((sj4*x660))+((r22*x656))+(((-1.0)*x657*x659))+((x658*x659))+(((-1.0)*x654*x655)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x654))+(((-1.0)*cj4*x655*x657))+((x656*x657))+((cj4*x660))+(((-1.0)*x656*x658))+((cj1*r22*sj4))))+IKsqr(((((-1.0)*sj4*x655*x657))+((sj4*x660))+((r22*x656))+(((-1.0)*x657*x659))+((x658*x659))+(((-1.0)*x654*x655))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x654))+(((-1.0)*cj4*x655*x657))+((x656*x657))+((cj4*x660))+(((-1.0)*x656*x658))+((cj1*r22*sj4))), ((((-1.0)*sj4*x655*x657))+((sj4*x660))+((r22*x656))+(((-1.0)*x657*x659))+((x658*x659))+(((-1.0)*x654*x655))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x661=IKcos(j2);
IkReal x662=IKsin(j2);
IkReal x663=((1.0)*sj4);
IkReal x664=((0.076)*sj5);
IkReal x665=(r11*sj0);
IkReal x666=((1.0)*cj4);
IkReal x667=(cj0*r02);
IkReal x668=(cj0*r01);
IkReal x669=(cj5*r20);
IkReal x670=((1.0)*sj1);
IkReal x671=(sj4*sj5);
IkReal x672=(r21*sj5);
IkReal x673=(cj4*sj5);
IkReal x674=(r12*sj0);
IkReal x675=(cj1*x661);
IkReal x676=(cj5*r10*sj0);
IkReal x677=(cj0*cj5*r00);
IkReal x678=(cj1*x662);
IkReal x679=(sj1*x662);
IkReal x680=(sj1*x661);
IkReal x681=(x662*x670);
evalcond[0]=(((cj4*r22))+(((-1.0)*x681))+((sj4*x669))+(((-1.0)*x663*x672))+x675);
evalcond[1]=((((-1.0)*r22*x663))+(((-1.0)*x666*x672))+x678+x680+((cj4*x669)));
evalcond[2]=((((0.0775)*x678))+(((0.0535)*sj1))+(((0.0775)*x680))+(((-0.2845)*cj1))+(((-0.076)*x669))+((r21*x664))+pz+(((0.3425)*x675))+(((-0.3425)*x679)));
evalcond[3]=(((x665*x673))+(((-1.0)*x681))+((sj4*x667))+(((-1.0)*x666*x677))+(((-1.0)*x666*x676))+((x668*x673))+x675+((sj4*x674)));
evalcond[4]=(((x665*x671))+(((-1.0)*x663*x676))+(((-1.0)*x663*x677))+(((-1.0)*x666*x674))+((x668*x671))+(((-1.0)*x678))+(((-1.0)*x666*x667))+(((-1.0)*x661*x670)));
evalcond[5]=((((0.0775)*x675))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-0.0775)*x679))+(((-1.0)*py*sj0))+(((-0.3425)*x678))+(((-0.3425)*x680))+(((0.076)*x676))+(((0.076)*x677))+(((-1.0)*x664*x665))+(((-1.0)*x664*x668))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x682=((0.076)*sj5);
IkReal x683=((0.076)*cj5);
CheckValue<IkReal> x684=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-0.076)*r22)))),-1);
if(!x684.valid){
continue;
}
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r10*x683))+(((-1.0)*r11*x682)))),IkReal(((((-1.0)*r01*x682))+(((-1.0)*px))+((r00*x683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x684.value)))+(x685.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x686=IKcos(j0);
IkReal x687=IKsin(j0);
IkReal x688=((1.0)*r01);
IkReal x689=((1.0)*r10);
IkReal x690=(cj5*x687);
IkReal x691=(sj5*x686);
IkReal x692=(sj4*x687);
IkReal x693=(cj5*x686);
IkReal x694=(sj5*x687);
IkReal x695=(r12*x686);
evalcond[0]=(((r10*x694))+((r11*x690))+((r00*x691))+((r01*x693)));
evalcond[1]=((1.0)+(((-1.0)*x688*x690))+((r10*x691))+((r11*x693))+(((-1.0)*r00*x694)));
evalcond[2]=(((px*x687))+(((-1.0)*py*x686))+(((0.076)*r01*x694))+(((-0.076)*r11*x691))+(((0.076)*r10*x693))+(((-0.076)*r00*x690)));
evalcond[3]=((((-1.0)*sj4*x689*x693))+(((-1.0)*sj5*x688*x692))+((r00*sj4*x690))+(((-1.0)*cj4*x695))+((cj4*r02*x687))+((r11*sj4*x691)));
evalcond[4]=((((-1.0)*r02*x692))+((sj4*x695))+(((-1.0)*cj4*x689*x693))+((cj4*r11*x691))+((cj4*r00*x690))+(((-1.0)*cj4*x688*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x696=((4.11)*pz);
IkReal x697=(cj5*r20);
IkReal x698=((4.11)*sj4);
IkReal x699=((0.31)*cj4);
IkReal x700=((0.07068)*sj5);
IkReal x701=(cj0*r01);
IkReal x702=(r21*sj5);
IkReal x703=(r22*sj4);
IkReal x704=((0.93)*cj4);
IkReal x705=((1.37)*sj4);
IkReal x706=((0.07068)*cj5);
IkReal x707=(r10*sj0);
IkReal x708=(cj0*r00);
IkReal x709=((0.02356)*cj5);
IkReal x710=(cj0*px);
IkReal x711=((0.49325)*sj4);
IkReal x712=(cj4*r22);
IkReal x713=(r11*sj0);
IkReal x714=((0.02356)*sj5);
IkReal x715=(py*sj0);
IkReal x716=((1.47975)*sj4);
IkReal x717=((0.31236)*x702);
IkReal x718=((4.11)*x712);
IkReal x719=((0.912)*x697);
IkReal x720=(x706*x707);
IkReal x721=(x706*x708);
IkReal x722=(x702*x716);
IkReal x723=(x697*x704);
IkReal x724=(x697*x698);
IkReal x725=(x719+x718+x723+x724);
IkReal x726=((((12.0)*pz))+((x702*x704))+(((0.93)*x703))+((x698*x702))+(((0.912)*x702)));
IkReal x727=(x696+x717+x720+x721+x722);
IkReal x728=(((x700*x713))+((x700*x701))+(((0.31236)*x697))+(((0.93)*x715))+(((0.93)*x710))+(((1.47975)*x712))+((x697*x716)));
j1eval[0]=((3.00392)+(IKabs(((-1.138)+(((-1.0)*x702*x705))+(((-0.31)*x703))+((x697*x699))+(((1.37)*x712))+((x697*x705))+(((-1.0)*x699*x702))+(((-0.304)*x702))+(((-4.0)*pz))+(((0.304)*x697)))))+(IKabs(((-0.37318)+(((-1.0)*x728))+x727)))+(IKabs(((0.37318)+(((-1.0)*x728))+x727)))+(IKabs(((-1.138)+(((-1.0)*x726))+x725)))+(IKabs(((0.37318)+(((1.37)*pz))+(((-0.49325)*x712))+((x702*x711))+((x707*x709))+(((-0.31)*x715))+(((-0.31)*x710))+(((-0.10412)*x697))+(((-1.0)*x697*x711))+(((-1.0)*x713*x714))+(((0.10412)*x702))+(((-1.0)*x701*x714))+((x708*x709)))))+(IKabs(((1.138)+(((-1.0)*x726))+x725))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x729=(cj5*r20);
IkReal x730=((4.11)*sj4);
IkReal x731=(r21*sj5);
IkReal x732=((0.31)*cj4);
IkReal x733=((0.93)*cj4);
IkReal x734=(r22*sj4);
IkReal x735=(cj4*r22);
IkReal x736=((1.37)*sj4);
IkReal x737=((4.11)*x735);
IkReal x738=((0.912)*x729);
IkReal x739=((1.37)*x735);
IkReal x740=((0.304)*x729);
IkReal x741=(x729*x733);
IkReal x742=(x729*x730);
IkReal x743=(x729*x736);
IkReal x744=(x729*x732);
IkReal x745=(x739+x744+x743+x740);
IkReal x746=(x737+x738+x742+x741);
IkReal x747=(((x731*x733))+(((12.0)*pz))+(((0.93)*x734))+(((0.912)*x731))+((x730*x731)));
IkReal x748=(((x731*x736))+((x731*x732))+(((4.0)*pz))+(((0.304)*x731))+(((0.31)*x734)));
op[0]=((-1.138)+x745+(((-1.0)*x748)));
op[1]=-0.428;
op[2]=((-1.138)+x746+(((-1.0)*x747)));
op[3]=-0.856;
op[4]=((1.138)+x746+(((-1.0)*x747)));
op[5]=-0.428;
op[6]=((1.138)+x745+(((-1.0)*x748)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x749=((1.37)*pz);
IkReal x750=((4.11)*pz);
IkReal x751=((0.07068)*sj5);
IkReal x752=(cj0*r01);
IkReal x753=(cj5*r20);
IkReal x754=(r21*sj5);
IkReal x755=((0.07068)*cj5);
IkReal x756=(r10*sj0);
IkReal x757=(cj0*px);
IkReal x758=((0.49325)*sj4);
IkReal x759=(cj4*r22);
IkReal x760=(r11*sj0);
IkReal x761=(cj0*r00);
IkReal x762=((0.02356)*sj5);
IkReal x763=((0.02356)*cj5);
IkReal x764=(py*sj0);
IkReal x765=((1.47975)*sj4);
IkReal x766=((0.10412)*x754);
IkReal x767=((0.31236)*x754);
IkReal x768=(x756*x763);
IkReal x769=(x755*x756);
IkReal x770=(x755*x761);
IkReal x771=(x754*x765);
IkReal x772=(x761*x763);
IkReal x773=(x754*x758);
IkReal x774=(x750+x771+x770+x769+x767);
IkReal x775=(x749+x773+x772+x768+x766);
IkReal x776=(((x751*x752))+(((0.93)*x764))+(((0.93)*x757))+((x751*x760))+(((1.47975)*x759))+((x753*x765))+(((0.31236)*x753)));
IkReal x777=((((0.49325)*x759))+((x760*x762))+(((0.31)*x764))+((x752*x762))+(((0.10412)*x753))+((x753*x758))+(((0.31)*x757)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.37318)+x774+(((-1.0)*x776))))))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x774+(((-1.0)*x776))))))+(((0.32298)*htj1))+x775+(((-1.0)*x777))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x775+(((-1.0)*x777)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x778=(cj4*r22);
IkReal x779=((1.0)*cj1);
IkReal x780=(sj1*sj4);
IkReal x781=(cj5*r20);
IkReal x782=(r21*sj5);
IkReal x783=(cj4*sj1);
IkReal x784=(cj1*x782);
if( IKabs((((cj4*x784))+(((-1.0)*cj4*x779*x781))+((sj1*x778))+(((-1.0)*x780*x782))+((x780*x781))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x778*x779))+((x782*x783))+((sj4*x784))+(((-1.0)*x781*x783))+((r22*x780))+(((-1.0)*sj4*x779*x781)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x784))+(((-1.0)*cj4*x779*x781))+((sj1*x778))+(((-1.0)*x780*x782))+((x780*x781))+((cj1*r22*sj4))))+IKsqr(((((-1.0)*x778*x779))+((x782*x783))+((sj4*x784))+(((-1.0)*x781*x783))+((r22*x780))+(((-1.0)*sj4*x779*x781))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x784))+(((-1.0)*cj4*x779*x781))+((sj1*x778))+(((-1.0)*x780*x782))+((x780*x781))+((cj1*r22*sj4))), ((((-1.0)*x778*x779))+((x782*x783))+((sj4*x784))+(((-1.0)*x781*x783))+((r22*x780))+(((-1.0)*sj4*x779*x781))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x785=IKcos(j2);
IkReal x786=IKsin(j2);
IkReal x787=((1.0)*sj4);
IkReal x788=((0.076)*sj5);
IkReal x789=(r11*sj0);
IkReal x790=((1.0)*cj4);
IkReal x791=(cj0*r02);
IkReal x792=(cj0*r01);
IkReal x793=(cj5*r20);
IkReal x794=((1.0)*sj1);
IkReal x795=(sj4*sj5);
IkReal x796=(r21*sj5);
IkReal x797=(cj4*sj5);
IkReal x798=(r12*sj0);
IkReal x799=(cj1*x785);
IkReal x800=(cj5*r10*sj0);
IkReal x801=(cj0*cj5*r00);
IkReal x802=(cj1*x786);
IkReal x803=(sj1*x786);
IkReal x804=(sj1*x785);
IkReal x805=(x786*x794);
evalcond[0]=(((cj4*r22))+((sj4*x793))+(((-1.0)*x787*x796))+x799+(((-1.0)*x805)));
evalcond[1]=(((cj4*x793))+(((-1.0)*x790*x796))+(((-1.0)*r22*x787))+x804+x802);
evalcond[2]=((((0.0775)*x804))+(((0.0775)*x802))+(((0.0535)*sj1))+(((-0.076)*x793))+(((-0.2845)*cj1))+(((-0.3425)*x803))+(((0.3425)*x799))+((r21*x788))+pz);
evalcond[3]=((((-1.0)*x790*x800))+(((-1.0)*x790*x801))+((sj4*x798))+((sj4*x791))+((x792*x797))+x799+(((-1.0)*x805))+((x789*x797)));
evalcond[4]=((((-1.0)*x802))+(((-1.0)*x787*x801))+(((-1.0)*x787*x800))+(((-1.0)*x790*x791))+(((-1.0)*x790*x798))+((x792*x795))+(((-1.0)*x785*x794))+((x789*x795)));
evalcond[5]=((((0.0775)*x799))+(((0.2845)*sj1))+(((-1.0)*x788*x789))+(((-1.0)*x788*x792))+(((-0.3425)*x804))+(((-0.3425)*x802))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.0775)*x803))+(((-1.0)*cj0*px))+(((0.076)*x801))+(((0.076)*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x806=((0.076)*sj5);
IkReal x807=(rxp0_2*sj5);
IkReal x808=(cj5*rxp1_2);
IkReal x809=((0.076)*cj5);
j0eval[0]=((((13.1578947368421)*x808))+(((13.1578947368421)*x807))+r22);
j0eval[1]=IKsign(((((0.076)*r22))+x808+x807));
j0eval[2]=((IKabs(((((-1.0)*r01*x806))+(((-1.0)*px))+((r00*x809)))))+(IKabs(((((-1.0)*r11*x806))+(((-1.0)*py))+((r10*x809))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x810=((1.0)*cj5);
IkReal x811=(cj4*sj5);
IkReal x812=(((r21*sj4*sj5))+(((-1.0)*r20*sj4*x810))+(((-1.0)*cj4*r22)));
j0eval[0]=x812;
j0eval[1]=((IKabs(((((-1.0)*cj4*r00*x810))+((r01*x811))+((r02*sj4)))))+(IKabs(((((-1.0)*cj4*r10*x810))+((r11*x811))+((r12*sj4))))));
j0eval[2]=IKsign(x812);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x813=cj5*cj5;
IkReal x814=r20*r20;
IkReal x815=((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x813*(r21*r21)))+x814+(((-1.0)*x813*x814)));
j0eval[0]=x815;
j0eval[1]=IKsign(x815);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x816=((13.1578947368421)*rxp1_2);
IkReal x817=((13.1578947368421)*rxp0_2);
IkReal x818=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x818) < -0.00001)
continue;
IkReal x819=IKabs(IKsqrt(x818));
IkReal x825 = x818;
if(IKabs(x825)==0){
continue;
}
IkReal x820=pow(x825,-0.5);
CheckValue<IkReal> x826=IKPowWithIntegerCheck(x819,-1);
if(!x826.valid){
continue;
}
IkReal x821=x826.value;
IkReal x822=(r22*x821);
if((((1.0)+(((-1.0)*(x822*x822))))) < -0.00001)
continue;
IkReal x823=IKsqrt(((1.0)+(((-1.0)*(x822*x822)))));
IkReal x824=(x820*x823);
CheckValue<IkReal> x827 = IKatan2WithCheck(IkReal(x816),IkReal(x817),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
if( (x822) < -1-IKFAST_SINCOS_THRESH || (x822) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst12=((((-1.0)*(x827.value)))+(((-1.0)*(IKasin(x822)))));
IkReal gconst13=((((-1.0)*x816*x824))+(((-1.0)*x817*x820*x822)));
IkReal gconst14=(((x817*x824))+(((-1.0)*x816*x820*x822)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x828=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x828.valid){
continue;
}
if( ((r22*(x828.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x828.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal(((13.1578947368421)*rxp1_2)),IkReal(((13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin((r22*(x828.value))))+(x829.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x830=((0.076)*gconst14);
IkReal x831=((0.076)*gconst13);
CheckValue<IkReal> x832 = IKatan2WithCheck(IkReal((((r10*x830))+(((-1.0)*py))+(((-1.0)*r11*x831)))),IkReal((((r00*x830))+(((-1.0)*px))+(((-1.0)*r01*x831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833=IKPowWithIntegerCheck(IKsign((((gconst13*rxp0_2))+((gconst14*rxp1_2))+((r22*((((gconst13*x831))+((gconst14*x830)))))))),-1);
if(!x833.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x832.value)+(((1.5707963267949)*(x833.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x834=IKsin(j0);
IkReal x835=IKcos(j0);
IkReal x836=(gconst14*r00);
IkReal x837=(gconst13*r01);
IkReal x838=((1.0)*sj4);
IkReal x839=((1.0)*cj4);
IkReal x840=(r02*x834);
IkReal x841=(gconst14*x835);
IkReal x842=(sj4*x834);
IkReal x843=(gconst13*x835);
IkReal x844=(gconst13*x834);
IkReal x845=((0.076)*x834);
IkReal x846=(r12*x835);
IkReal x847=(gconst14*x834);
IkReal x848=(r11*x843);
evalcond[0]=(((r01*x841))+((r00*x843))+((r10*x844))+((r11*x847)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x844))+((r10*x843))+(((-1.0)*r01*x847))+((r11*x841)));
evalcond[2]=((((-0.076)*x848))+(((-1.0)*x836*x845))+(((0.076)*r10*x841))+((x837*x845))+(((-1.0)*py*x835))+((px*x834)));
evalcond[3]=(((sj4*x848))+(((-1.0)*r10*x838*x841))+((cj4*x840))+((x836*x842))+(((-1.0)*x839*x846))+(((-1.0)*x834*x837*x838)));
evalcond[4]=((((-1.0)*r10*x839*x841))+((sj4*x846))+((cj4*x848))+((cj4*x834*x836))+(((-1.0)*x838*x840))+(((-1.0)*x834*x837*x839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x849=((13.1578947368421)*rxp1_2);
IkReal x850=((13.1578947368421)*rxp0_2);
IkReal x851=x818;
if((x851) < -0.00001)
continue;
IkReal x852=IKabs(IKsqrt(x851));
IkReal x859 = x851;
if(IKabs(x859)==0){
continue;
}
IkReal x853=pow(x859,-0.5);
CheckValue<IkReal> x860=IKPowWithIntegerCheck(x852,-1);
if(!x860.valid){
continue;
}
IkReal x854=x860.value;
IkReal x855=(r22*x854);
if((((1.0)+(((-1.0)*(x855*x855))))) < -0.00001)
continue;
IkReal x856=IKsqrt(((1.0)+(((-1.0)*(x855*x855)))));
if( (x855) < -1-IKFAST_SINCOS_THRESH || (x855) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x861 = IKatan2WithCheck(IkReal(x849),IkReal(x850),IKFAST_ATAN2_MAGTHRESH);
if(!x861.valid){
continue;
}
IkReal x857=((((-1.0)*(IKasin(x855))))+(((-1.0)*(x861.value))));
IkReal x858=(x853*x856);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst13;
cj5=gconst14;
j5=x857;
IkReal gconst12=x857;
IkReal gconst13=((((-1.0)*x849*x858))+(((-1.0)*x850*x853*x855)));
IkReal gconst14=(((x850*x858))+(((-1.0)*x849*x853*x855)));
IkReal x862=((12.0)*pz);
IkReal x863=((4.0)*pz);
IkReal x864=(gconst13*sj4);
IkReal x865=((0.31)*cj0);
IkReal x866=(gconst13*r21);
IkReal x867=((0.93)*sj4);
IkReal x868=((0.93)*cj4);
IkReal x869=(r12*sj0);
IkReal x870=(gconst14*r20);
IkReal x871=((0.31)*sj0);
IkReal x872=(gconst14*r00);
IkReal x873=(gconst14*r10);
IkReal x874=((0.31)*cj4);
IkReal x875=(cj4*r22);
IkReal x876=((0.912)*x866);
IkReal x877=((0.912)*x870);
IkReal x878=((4.11)*x875);
IkReal x879=((0.304)*x866);
IkReal x880=((1.37)*x875);
IkReal x881=((0.304)*x870);
IkReal x882=(x868*x870);
IkReal x883=((4.11)*r21*x864);
IkReal x884=((4.11)*sj4*x870);
IkReal x885=((1.37)*r21*x864);
IkReal x886=((1.37)*sj4*x870);
IkReal x887=((0.93)*cj0*r01*x864);
IkReal x888=((0.93)*r11*sj0*x864);
IkReal x889=((-1.138)+x862+x876+x883);
IkReal x890=(x878+x877+x884);
IkReal x891=(x886+x881+x880);
IkReal x892=((1.138)+x863+x879+x885);
IkReal x893=(x887+x888);
IkReal x894=((1.138)+x862+x876+x883);
IkReal x895=(((r22*x867))+((x866*x868))+x890);
IkReal x896=(((x868*x869))+((cj0*r02*x868))+((cj0*x867*x872))+x890+((sj0*x867*x873)));
j1eval[0]=((3.424)+(IKabs(((((-1.0)*cj4*r02*x865))+((r01*x864*x865))+((r11*x864*x871))+(((-1.0)*sj4*x865*x872))+(((-1.0)*sj4*x871*x873))+(((-1.0)*x869*x874))+(((-1.0)*x891))+x892)))+(IKabs(((((-1.0)*x895))+x882+x894)))+(IKabs(((((-1.0)*x896))+x894+x893)))+(IKabs((((x870*x874))+(((-1.0)*x866*x874))+(((-1.0)*x891))+(((-0.31)*r22*sj4))+x892)))+(IKabs(((((-1.0)*x896))+x889+x893)))+(IKabs(((((-1.0)*x895))+x882+x889))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x897=((12.0)*pz);
IkReal x898=((4.0)*pz);
IkReal x899=(gconst13*r21);
IkReal x900=(gconst14*r20);
IkReal x901=((1.37)*sj4);
IkReal x902=((0.93)*cj4);
IkReal x903=(r22*sj4);
IkReal x904=((0.31)*cj4);
IkReal x905=(cj4*r22);
IkReal x906=((4.11)*sj4);
IkReal x907=((0.912)*x899);
IkReal x908=((0.304)*x899);
IkReal x909=(x900*x902);
IkReal x910=(x899*x906);
IkReal x911=(x899*x901);
IkReal x912=(x900*x904);
IkReal x913=(x897+x910+x907+x909);
IkReal x914=(x898+x912+x911+x908);
IkReal x915=(((x900*x906))+(((0.912)*x900))+((x899*x902))+(((0.93)*x903))+(((4.11)*x905)));
IkReal x916=((((1.37)*x905))+(((0.31)*x903))+((x900*x901))+((x899*x904))+(((0.304)*x900)));
op[0]=((1.138)+(((-1.0)*x916))+x914);
op[1]=0.428;
op[2]=((1.138)+(((-1.0)*x915))+x913);
op[3]=0.856;
op[4]=((-1.138)+(((-1.0)*x915))+x913);
op[5]=0.428;
op[6]=((-1.138)+(((-1.0)*x916))+x914);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x917=((4.0)*pz);
IkReal x918=((12.0)*pz);
IkReal x919=(gconst13*sj4);
IkReal x920=((0.31)*cj0);
IkReal x921=(gconst13*r21);
IkReal x922=((0.93)*cj4);
IkReal x923=(r12*sj0);
IkReal x924=(gconst14*r20);
IkReal x925=((0.31)*sj0);
IkReal x926=(gconst14*sj4);
IkReal x927=((0.93)*cj0);
IkReal x928=(cj4*r22);
IkReal x929=((0.93)*sj0);
IkReal x930=((0.304)*x921);
IkReal x931=((0.912)*x921);
IkReal x932=((1.37)*r21*x919);
IkReal x933=((4.11)*r21*x919);
IkReal x934=(r11*x919*x925);
IkReal x935=(r01*x919*x920);
IkReal x936=(r01*x919*x927);
IkReal x937=(r11*x919*x929);
IkReal x938=(x935+x934+x930+x932+x917);
IkReal x939=(x937+x936+x931+x933+x918);
IkReal x940=((((4.11)*sj4*x924))+((cj0*r02*x922))+(((4.11)*x928))+((x922*x923))+((r00*x926*x927))+(((0.912)*x924))+((r10*x926*x929)));
IkReal x941=((((0.31)*cj4*x923))+((cj4*r02*x920))+((r00*x920*x926))+((r10*x925*x926))+(((0.304)*x924))+(((1.37)*sj4*x924))+(((1.37)*x928)));
j1evalpoly[0]=((-1.138)+(((htj1*htj1*htj1*htj1)*(((1.138)+(((-1.0)*x940))+x939))))+(((-1.0)*x941))+(((0.428)*htj1))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.138)+(((-1.0)*x940))+x939))))+x938+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+(((-1.0)*x941))+x938)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x942=((1.0)*cj4);
IkReal x943=(cj1*r22);
IkReal x944=(gconst13*r21);
IkReal x945=(cj1*sj4);
IkReal x946=(r22*sj1);
IkReal x947=((1.0)*sj4);
IkReal x948=(gconst14*r20);
if( IKabs(((((-1.0)*cj1*x942*x944))+(((-1.0)*sj1*x944*x947))+((sj1*sj4*x948))+(((-1.0)*x943*x947))+((cj1*cj4*x948))+((cj4*x946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x942*x944))+(((-1.0)*x945*x948))+((cj4*sj1*x948))+(((-1.0)*x946*x947))+(((-1.0)*x942*x943))+((x944*x945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x942*x944))+(((-1.0)*sj1*x944*x947))+((sj1*sj4*x948))+(((-1.0)*x943*x947))+((cj1*cj4*x948))+((cj4*x946))))+IKsqr(((((-1.0)*sj1*x942*x944))+(((-1.0)*x945*x948))+((cj4*sj1*x948))+(((-1.0)*x946*x947))+(((-1.0)*x942*x943))+((x944*x945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x942*x944))+(((-1.0)*sj1*x944*x947))+((sj1*sj4*x948))+(((-1.0)*x943*x947))+((cj1*cj4*x948))+((cj4*x946))), ((((-1.0)*sj1*x942*x944))+(((-1.0)*x945*x948))+((cj4*sj1*x948))+(((-1.0)*x946*x947))+(((-1.0)*x942*x943))+((x944*x945))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x949=IKcos(j2);
IkReal x950=IKsin(j2);
IkReal x951=((0.076)*gconst14);
IkReal x952=(r10*sj0);
IkReal x953=((1.0)*cj4);
IkReal x954=(cj0*r02);
IkReal x955=((1.0)*sj1);
IkReal x956=((1.0)*sj4);
IkReal x957=(gconst13*r21);
IkReal x958=(cj0*r00);
IkReal x959=((0.3425)*sj1);
IkReal x960=(gconst14*r20);
IkReal x961=(r12*sj0);
IkReal x962=(cj1*x949);
IkReal x963=(gconst13*r11*sj0);
IkReal x964=(cj1*x950);
IkReal x965=(cj0*gconst13*r01);
IkReal x966=(sj1*x950);
IkReal x967=(x949*x955);
IkReal x968=((1.0)*x964);
IkReal x969=(x967+x968);
evalcond[0]=(((cj4*r22))+((sj4*x960))+(((-1.0)*x956*x957))+(((-1.0)*x950*x955))+x962);
evalcond[1]=((((-1.0)*x953*x957))+(((-1.0)*r22*x956))+(((-1.0)*x969))+((cj4*x960)));
evalcond[2]=((((0.0775)*x964))+(((0.3425)*x962))+(((-1.0)*r20*x951))+(((0.0535)*sj1))+(((0.076)*x957))+(((-0.2845)*cj1))+pz+(((-1.0)*x950*x959))+(((0.0775)*sj1*x949)));
evalcond[3]=(((sj4*x961))+(((-1.0)*x962))+((sj4*x954))+(((-1.0)*gconst14*x952*x953))+x966+(((-1.0)*gconst14*x953*x958))+((cj4*x963))+((cj4*x965)));
evalcond[4]=(((sj4*x963))+((sj4*x965))+(((-1.0)*gconst14*x952*x956))+(((-1.0)*x953*x961))+(((-1.0)*gconst14*x956*x958))+(((-1.0)*x953*x954))+(((-1.0)*x969)));
evalcond[5]=((((0.0775)*x962))+((x951*x952))+((x951*x958))+(((0.2845)*sj1))+(((-0.0775)*x966))+(((0.0535)*cj1))+(((-0.3425)*x964))+(((-1.0)*py*sj0))+(((-1.0)*x949*x959))+(((-0.076)*x963))+(((-0.076)*x965))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x970=((13.1578947368421)*rxp1_2);
IkReal x971=((13.1578947368421)*rxp0_2);
IkReal x972=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x972) < -0.00001)
continue;
IkReal x973=IKabs(IKsqrt(x972));
IkReal x979 = x972;
if(IKabs(x979)==0){
continue;
}
IkReal x974=pow(x979,-0.5);
CheckValue<IkReal> x980=IKPowWithIntegerCheck(x973,-1);
if(!x980.valid){
continue;
}
IkReal x975=x980.value;
IkReal x976=(r22*x975);
if((((1.0)+(((-1.0)*(x976*x976))))) < -0.00001)
continue;
IkReal x977=IKsqrt(((1.0)+(((-1.0)*(x976*x976)))));
IkReal x978=(x974*x977);
if( (x976) < -1-IKFAST_SINCOS_THRESH || (x976) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x981 = IKatan2WithCheck(IkReal(x970),IkReal(x971),IKFAST_ATAN2_MAGTHRESH);
if(!x981.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(IKasin(x976))+(((-1.0)*(x981.value))));
IkReal gconst16=((((-1.0)*x971*x974*x976))+((x970*x978)));
IkReal gconst17=((((-1.0)*x971*x978))+(((-1.0)*x970*x974*x976)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x982=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x982.valid){
continue;
}
if( ((r22*(x982.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x982.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x983 = IKatan2WithCheck(IkReal(((13.1578947368421)*rxp1_2)),IkReal(((13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x983.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin((r22*(x982.value))))))+(x983.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x984=((0.076)*gconst16);
IkReal x985=((0.076)*gconst17);
CheckValue<IkReal> x986=IKPowWithIntegerCheck(IKsign((((gconst17*rxp1_2))+((r22*((((gconst17*x985))+((gconst16*x984))))))+((gconst16*rxp0_2)))),-1);
if(!x986.valid){
continue;
}
CheckValue<IkReal> x987 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r10*x985))+(((-1.0)*r11*x984)))),IkReal(((((-1.0)*r01*x984))+((r00*x985))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x986.value)))+(x987.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x988=IKcos(j0);
IkReal x989=IKsin(j0);
IkReal x990=((1.0)*gconst17);
IkReal x991=(gconst17*r11);
IkReal x992=(gconst17*r00);
IkReal x993=((1.0)*gconst16);
IkReal x994=(gconst16*x988);
IkReal x995=(r01*x989);
IkReal x996=(gconst16*x989);
IkReal x997=(r10*x988);
IkReal x998=(sj4*x989);
IkReal x999=(cj4*x989);
IkReal x1000=(r12*x988);
evalcond[0]=(((x989*x991))+((gconst17*r01*x988))+((r00*x994))+((r10*x996)));
evalcond[1]=((-1.0)+((x988*x991))+(((-1.0)*r00*x989*x993))+(((-1.0)*x990*x995))+((r10*x994)));
evalcond[2]=((((0.076)*gconst16*x995))+(((-0.076)*r11*x994))+(((-1.0)*py*x988))+(((0.076)*gconst17*x997))+(((-0.076)*x989*x992))+((px*x989)));
evalcond[3]=(((r11*sj4*x994))+((x992*x998))+((r02*x999))+(((-1.0)*sj4*x993*x995))+(((-1.0)*sj4*x990*x997))+(((-1.0)*cj4*x1000)));
evalcond[4]=(((sj4*x1000))+((x992*x999))+((cj4*r11*x994))+(((-1.0)*r02*x998))+(((-1.0)*cj4*x990*x997))+(((-1.0)*cj4*x993*x995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1001=((13.1578947368421)*rxp1_2);
IkReal x1002=((13.1578947368421)*rxp0_2);
CheckValue<IkReal> x1012 = IKatan2WithCheck(IkReal(x1001),IkReal(x1002),IKFAST_ATAN2_MAGTHRESH);
if(!x1012.valid){
continue;
}
IkReal x1003=((1.0)*(x1012.value));
IkReal x1004=x972;
if((x1004) < -0.00001)
continue;
IkReal x1005=IKabs(IKsqrt(x1004));
IkReal x1013 = x1004;
if(IKabs(x1013)==0){
continue;
}
IkReal x1006=pow(x1013,-0.5);
CheckValue<IkReal> x1014=IKPowWithIntegerCheck(x1005,-1);
if(!x1014.valid){
continue;
}
IkReal x1007=x1014.value;
IkReal x1008=(r22*x1007);
if( (x1008) < -1-IKFAST_SINCOS_THRESH || (x1008) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1009=IKasin(x1008);
if((((1.0)+(((-1.0)*(x1008*x1008))))) < -0.00001)
continue;
IkReal x1010=IKsqrt(((1.0)+(((-1.0)*(x1008*x1008)))));
IkReal x1011=(x1006*x1010);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x1009+(((-1.0)*x1003)));
IkReal gconst15=((3.14159265358979)+x1009+(((-1.0)*x1003)));
IkReal gconst16=((((-1.0)*x1002*x1006*x1008))+((x1001*x1011)));
IkReal gconst17=((((-1.0)*x1001*x1006*x1008))+(((-1.0)*x1002*x1011)));
IkReal x1015=((12.0)*pz);
IkReal x1016=((4.0)*pz);
IkReal x1017=(gconst16*r21);
IkReal x1018=((0.93)*cj0);
IkReal x1019=(cj4*r02);
IkReal x1020=(gconst17*r20);
IkReal x1021=(gconst17*sj4);
IkReal x1022=((4.11)*sj4);
IkReal x1023=((0.31)*cj0);
IkReal x1024=((0.31)*sj0);
IkReal x1025=((1.37)*sj4);
IkReal x1026=((0.31)*cj4);
IkReal x1027=(cj4*r22);
IkReal x1028=(r22*sj4);
IkReal x1029=((0.93)*sj0);
IkReal x1030=((0.93)*cj4);
IkReal x1031=((0.912)*x1017);
IkReal x1032=((0.912)*x1020);
IkReal x1033=((4.11)*x1027);
IkReal x1034=((0.304)*x1017);
IkReal x1035=((1.37)*x1027);
IkReal x1036=((0.304)*x1020);
IkReal x1037=(gconst16*r01*sj4);
IkReal x1038=(cj4*r12*sj0);
IkReal x1039=(gconst16*r11*sj4);
IkReal x1040=(x1017*x1022);
IkReal x1041=(x1020*x1022);
IkReal x1042=(x1017*x1025);
IkReal x1043=(x1020*x1025);
IkReal x1044=(x1020*x1030);
IkReal x1045=(x1029*x1039);
IkReal x1046=(x1018*x1037);
IkReal x1047=(x1041+x1032+x1033);
IkReal x1048=(x1043+x1036+x1035);
IkReal x1049=((1.138)+x1042+x1016+x1034);
IkReal x1050=(x1040+x1044+x1015+x1031);
IkReal x1051=(((x1017*x1030))+x1047+(((0.93)*x1028)));
IkReal x1052=(x1040+x1046+x1045+x1015+x1031);
IkReal x1053=(x1047+((r00*x1018*x1021))+((r10*x1021*x1029))+((cj4*r12*x1029))+((x1018*x1019)));
j1eval[0]=((3.424)+(IKabs(((1.138)+(((-1.0)*x1053))+x1052)))+(IKabs((x1049+((x1020*x1026))+(((-1.0)*x1017*x1026))+(((-1.0)*x1048))+(((-0.31)*x1028)))))+(IKabs(((1.138)+(((-1.0)*x1051))+x1050)))+(IKabs(((((-1.0)*r10*x1021*x1024))+(((-1.0)*r00*x1021*x1023))+x1049+(((-1.0)*x1019*x1023))+((x1023*x1037))+(((-1.0)*cj4*r12*x1024))+((x1024*x1039))+(((-1.0)*x1048)))))+(IKabs(((-1.138)+(((-1.0)*x1053))+x1052)))+(IKabs(((-1.138)+(((-1.0)*x1051))+x1050))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1054=((12.0)*pz);
IkReal x1055=((4.0)*pz);
IkReal x1056=(gconst17*r20);
IkReal x1057=((4.11)*sj4);
IkReal x1058=(cj4*r22);
IkReal x1059=((0.31)*cj4);
IkReal x1060=(gconst16*r21);
IkReal x1061=(r22*sj4);
IkReal x1062=((0.93)*cj4);
IkReal x1063=((1.37)*sj4);
IkReal x1064=((0.912)*x1060);
IkReal x1065=((0.304)*x1060);
IkReal x1066=(x1056*x1062);
IkReal x1067=(x1057*x1060);
IkReal x1068=(x1060*x1063);
IkReal x1069=(x1056*x1059);
IkReal x1070=(x1055+x1069+x1068+x1065);
IkReal x1071=(x1054+x1064+x1067+x1066);
IkReal x1072=(((x1060*x1062))+(((4.11)*x1058))+((x1056*x1057))+(((0.93)*x1061))+(((0.912)*x1056)));
IkReal x1073=(((x1056*x1063))+(((0.31)*x1061))+(((1.37)*x1058))+(((0.304)*x1056))+((x1059*x1060)));
op[0]=((1.138)+x1070+(((-1.0)*x1073)));
op[1]=0.428;
op[2]=((1.138)+x1071+(((-1.0)*x1072)));
op[3]=0.856;
op[4]=((-1.138)+x1071+(((-1.0)*x1072)));
op[5]=0.428;
op[6]=((-1.138)+x1070+(((-1.0)*x1073)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1074=((12.0)*pz);
IkReal x1075=((4.0)*pz);
IkReal x1076=(gconst16*r21);
IkReal x1077=((0.93)*cj0);
IkReal x1078=(cj4*r02);
IkReal x1079=(gconst17*sj4);
IkReal x1080=(gconst17*r20);
IkReal x1081=((0.31)*cj0);
IkReal x1082=((0.31)*sj0);
IkReal x1083=(cj4*r22);
IkReal x1084=((0.93)*sj0);
IkReal x1085=((0.912)*x1076);
IkReal x1086=((0.304)*x1076);
IkReal x1087=(gconst16*r01*sj4);
IkReal x1088=(cj4*r12*sj0);
IkReal x1089=(gconst16*r11*sj4);
IkReal x1090=((4.11)*sj4*x1076);
IkReal x1091=((1.37)*sj4*x1076);
IkReal x1092=(x1084*x1089);
IkReal x1093=(x1077*x1087);
IkReal x1094=(x1081*x1087);
IkReal x1095=(x1082*x1089);
IkReal x1096=(x1074+x1090+x1092+x1093+x1085);
IkReal x1097=(x1075+x1094+x1095+x1091+x1086);
IkReal x1098=(((r00*x1077*x1079))+((x1077*x1078))+(((4.11)*x1083))+(((4.11)*r20*x1079))+(((0.912)*x1080))+((r10*x1079*x1084))+((cj4*r12*x1084)));
IkReal x1099=((((1.37)*r20*x1079))+((x1078*x1081))+((r10*x1079*x1082))+(((0.304)*x1080))+((cj4*r12*x1082))+(((1.37)*x1083))+((r00*x1079*x1081)));
j1evalpoly[0]=((-1.138)+x1097+(((0.428)*htj1))+(((-1.0)*x1099))+(((htj1*htj1*htj1*htj1)*(((1.138)+x1096+(((-1.0)*x1098))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.138)+x1096+(((-1.0)*x1098))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x1097+(((-1.0)*x1099)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1100=(gconst16*r21);
IkReal x1101=(cj4*sj1);
IkReal x1102=(cj1*sj4);
IkReal x1103=(gconst17*r20);
IkReal x1104=((1.0)*sj1*sj4);
IkReal x1105=(cj4*x1103);
IkReal x1106=((1.0)*cj1*cj4);
if( IKabs((((cj1*x1105))+(((-1.0)*x1100*x1106))+(((-1.0)*x1100*x1104))+((r22*x1101))+((sj1*sj4*x1103))+(((-1.0)*r22*x1102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1104))+(((-1.0)*r22*x1106))+((x1101*x1103))+(((-1.0)*x1100*x1101))+(((-1.0)*x1102*x1103))+((x1100*x1102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1105))+(((-1.0)*x1100*x1106))+(((-1.0)*x1100*x1104))+((r22*x1101))+((sj1*sj4*x1103))+(((-1.0)*r22*x1102))))+IKsqr(((((-1.0)*r22*x1104))+(((-1.0)*r22*x1106))+((x1101*x1103))+(((-1.0)*x1100*x1101))+(((-1.0)*x1102*x1103))+((x1100*x1102))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1105))+(((-1.0)*x1100*x1106))+(((-1.0)*x1100*x1104))+((r22*x1101))+((sj1*sj4*x1103))+(((-1.0)*r22*x1102))), ((((-1.0)*r22*x1104))+(((-1.0)*r22*x1106))+((x1101*x1103))+(((-1.0)*x1100*x1101))+(((-1.0)*x1102*x1103))+((x1100*x1102))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1107=IKcos(j2);
IkReal x1108=IKsin(j2);
IkReal x1109=(gconst16*sj4);
IkReal x1110=((1.0)*r21);
IkReal x1111=(gconst17*r20);
IkReal x1112=((0.076)*gconst16);
IkReal x1113=(r11*sj0);
IkReal x1114=(cj0*r01);
IkReal x1115=((1.0)*cj4);
IkReal x1116=(cj0*r02);
IkReal x1117=(r12*sj0);
IkReal x1118=((1.0)*sj1);
IkReal x1119=((0.3425)*sj1);
IkReal x1120=((1.0)*sj4);
IkReal x1121=(cj4*gconst16);
IkReal x1122=(cj1*x1107);
IkReal x1123=(cj0*gconst17*r00);
IkReal x1124=(gconst17*r10*sj0);
IkReal x1125=(cj1*x1108);
IkReal x1126=(sj1*x1108);
IkReal x1127=(x1107*x1118);
IkReal x1128=((1.0)*x1125);
IkReal x1129=(x1128+x1127);
evalcond[0]=(x1122+((cj4*r22))+(((-1.0)*x1109*x1110))+((sj4*x1111))+(((-1.0)*x1108*x1118)));
evalcond[1]=(((cj4*x1111))+(((-1.0)*x1129))+(((-1.0)*x1110*x1121))+(((-1.0)*r22*x1120)));
evalcond[2]=((((0.0775)*sj1*x1107))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*x1108*x1119))+pz+((r21*x1112))+(((0.3425)*x1122))+(((-0.076)*x1111))+(((0.0775)*x1125)));
evalcond[3]=(x1126+((x1114*x1121))+((x1113*x1121))+((sj4*x1116))+((sj4*x1117))+(((-1.0)*x1122))+(((-1.0)*x1115*x1123))+(((-1.0)*x1115*x1124)));
evalcond[4]=(((x1109*x1114))+((x1109*x1113))+(((-1.0)*x1129))+(((-1.0)*x1120*x1124))+(((-1.0)*x1120*x1123))+(((-1.0)*x1115*x1116))+(((-1.0)*x1115*x1117)));
evalcond[5]=((((0.2845)*sj1))+(((0.076)*x1123))+(((0.076)*x1124))+(((-1.0)*x1112*x1114))+(((-1.0)*x1112*x1113))+(((-1.0)*x1107*x1119))+(((0.0535)*cj1))+(((-0.0775)*x1126))+(((-1.0)*py*sj0))+(((-0.3425)*x1125))+(((0.0775)*x1122))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1130=cj5*cj5;
CheckValue<IkReal> x1131 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1131.valid){
continue;
}
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(IKsign(((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x1130*(r21*r21)))+(((r20*r20)*(((1.0)+(((-1.0)*x1130)))))))),-1);
if(!x1132.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1131.value)+(((1.5707963267949)*(x1132.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1133=IKcos(j0);
IkReal x1134=IKsin(j0);
IkReal x1135=((1.0)*r01);
IkReal x1136=((1.0)*r10);
IkReal x1137=(cj5*x1134);
IkReal x1138=(sj5*x1133);
IkReal x1139=(sj4*x1134);
IkReal x1140=(cj5*x1133);
IkReal x1141=(sj5*x1134);
IkReal x1142=(r12*x1133);
evalcond[0]=(((r00*x1138))+((r01*x1140))+((r10*x1141))+((r11*x1137)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x1141))+((r10*x1138))+((r11*x1140))+(((-1.0)*x1135*x1137)));
evalcond[2]=((((0.076)*r10*x1140))+(((-0.076)*r11*x1138))+(((-1.0)*py*x1133))+((px*x1134))+(((-0.076)*r00*x1137))+(((0.076)*r01*x1141)));
evalcond[3]=(((r00*sj4*x1137))+(((-1.0)*sj5*x1135*x1139))+(((-1.0)*cj4*x1142))+((cj4*r02*x1134))+((r11*sj4*x1138))+(((-1.0)*sj4*x1136*x1140)));
evalcond[4]=(((sj4*x1142))+(((-1.0)*r02*x1139))+((cj4*r00*x1137))+(((-1.0)*cj4*x1136*x1140))+((cj4*r11*x1138))+(((-1.0)*cj4*x1135*x1141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1143=((4.11)*pz);
IkReal x1144=((12.0)*pz);
IkReal x1145=(cj5*r20);
IkReal x1146=((4.11)*sj4);
IkReal x1147=((0.31)*cj4);
IkReal x1148=((0.07068)*sj5);
IkReal x1149=(cj0*r01);
IkReal x1150=(r21*sj5);
IkReal x1151=(r22*sj4);
IkReal x1152=((0.93)*cj4);
IkReal x1153=((1.37)*sj4);
IkReal x1154=((0.07068)*cj5);
IkReal x1155=(r10*sj0);
IkReal x1156=(cj0*r00);
IkReal x1157=((0.02356)*cj5);
IkReal x1158=(cj0*px);
IkReal x1159=((0.49325)*sj4);
IkReal x1160=(cj4*r22);
IkReal x1161=(r11*sj0);
IkReal x1162=((0.02356)*sj5);
IkReal x1163=(py*sj0);
IkReal x1164=((1.47975)*sj4);
IkReal x1165=((0.31236)*x1150);
IkReal x1166=((0.912)*x1150);
IkReal x1167=(x1154*x1155);
IkReal x1168=(x1154*x1156);
IkReal x1169=(x1150*x1164);
IkReal x1170=(x1146*x1150);
IkReal x1171=(x1145*x1152);
IkReal x1172=(x1144+x1166+x1171+x1170);
IkReal x1173=(((x1145*x1146))+(((0.912)*x1145))+((x1150*x1152))+(((0.93)*x1151))+(((4.11)*x1160)));
IkReal x1174=(x1143+x1165+x1167+x1168+x1169);
IkReal x1175=((((0.93)*x1163))+(((0.31236)*x1145))+(((1.47975)*x1160))+((x1148*x1161))+((x1145*x1164))+(((0.93)*x1158))+((x1148*x1149)));
j1eval[0]=((3.00392)+(IKabs(((0.37318)+x1174+(((-1.0)*x1175)))))+(IKabs(((0.37318)+(((1.37)*pz))+(((-0.31)*x1163))+(((-0.49325)*x1160))+(((-1.0)*x1149*x1162))+(((0.10412)*x1150))+((x1150*x1159))+(((-0.31)*x1158))+(((-1.0)*x1145*x1159))+(((-0.10412)*x1145))+((x1156*x1157))+(((-1.0)*x1161*x1162))+((x1155*x1157)))))+(IKabs(((1.138)+x1172+(((-1.0)*x1173)))))+(IKabs(((-0.37318)+x1174+(((-1.0)*x1175)))))+(IKabs(((-1.138)+x1172+(((-1.0)*x1173)))))+(IKabs(((1.138)+((x1145*x1147))+(((4.0)*pz))+(((-0.304)*x1145))+(((-1.0)*x1147*x1150))+((x1150*x1153))+(((-1.37)*x1160))+(((-0.31)*x1151))+(((-1.0)*x1145*x1153))+(((0.304)*x1150))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1176=((12.0)*pz);
IkReal x1177=((4.0)*pz);
IkReal x1178=(cj5*r20);
IkReal x1179=((4.11)*sj4);
IkReal x1180=(r21*sj5);
IkReal x1181=((0.31)*cj4);
IkReal x1182=((0.93)*cj4);
IkReal x1183=(r22*sj4);
IkReal x1184=(cj4*r22);
IkReal x1185=((1.37)*sj4);
IkReal x1186=((0.912)*x1180);
IkReal x1187=((0.304)*x1180);
IkReal x1188=(x1179*x1180);
IkReal x1189=(x1178*x1182);
IkReal x1190=(x1178*x1181);
IkReal x1191=(x1180*x1185);
IkReal x1192=(x1188+x1189+x1186+x1176);
IkReal x1193=(x1187+x1191+x1190+x1177);
IkReal x1194=(((x1180*x1182))+(((4.11)*x1184))+((x1178*x1179))+(((0.93)*x1183))+(((0.912)*x1178)));
IkReal x1195=((((0.31)*x1183))+(((0.304)*x1178))+((x1178*x1185))+((x1180*x1181))+(((1.37)*x1184)));
op[0]=((1.138)+x1193+(((-1.0)*x1195)));
op[1]=0.428;
op[2]=((1.138)+x1192+(((-1.0)*x1194)));
op[3]=0.856;
op[4]=((-1.138)+x1192+(((-1.0)*x1194)));
op[5]=0.428;
op[6]=((-1.138)+x1193+(((-1.0)*x1195)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1196=((1.37)*pz);
IkReal x1197=((4.11)*pz);
IkReal x1198=((0.07068)*sj5);
IkReal x1199=(cj0*r01);
IkReal x1200=(cj5*r20);
IkReal x1201=(r21*sj5);
IkReal x1202=((0.07068)*cj5);
IkReal x1203=(r10*sj0);
IkReal x1204=(cj0*px);
IkReal x1205=((0.49325)*sj4);
IkReal x1206=(cj4*r22);
IkReal x1207=(r11*sj0);
IkReal x1208=(cj0*r00);
IkReal x1209=((0.02356)*sj5);
IkReal x1210=((0.02356)*cj5);
IkReal x1211=(py*sj0);
IkReal x1212=((1.47975)*sj4);
IkReal x1213=((0.10412)*x1201);
IkReal x1214=((0.31236)*x1201);
IkReal x1215=(x1203*x1210);
IkReal x1216=(x1202*x1203);
IkReal x1217=(x1202*x1208);
IkReal x1218=(x1201*x1212);
IkReal x1219=(x1208*x1210);
IkReal x1220=(x1201*x1205);
IkReal x1221=(x1197+x1216+x1217+x1214+x1218);
IkReal x1222=(x1196+x1220+x1213+x1215+x1219);
IkReal x1223=((((0.31236)*x1200))+(((1.47975)*x1206))+((x1198*x1199))+(((0.93)*x1204))+((x1200*x1212))+(((0.93)*x1211))+((x1198*x1207)));
IkReal x1224=((((0.31)*x1211))+((x1199*x1209))+((x1200*x1205))+(((0.31)*x1204))+(((0.49325)*x1206))+((x1207*x1209))+(((0.10412)*x1200)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+x1222+(((-1.0)*x1224))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((0.32298)*htj1))+(((htj1*htj1)*(((-0.37318)+x1221+(((-1.0)*x1223))))))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x1221+(((-1.0)*x1223))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x1222+(((-1.0)*x1224)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1225=((1.0)*cj4);
IkReal x1226=(r22*sj1);
IkReal x1227=((1.0)*sj4);
IkReal x1228=(cj1*r22);
IkReal x1229=(cj1*r21*sj5);
IkReal x1230=(cj5*r20*sj1);
IkReal x1231=(r21*sj1*sj5);
IkReal x1232=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x1225*x1229))+(((-1.0)*x1227*x1228))+((cj4*x1226))+(((-1.0)*x1227*x1231))+((cj4*x1232))+((sj4*x1230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1225*x1231))+(((-1.0)*x1225*x1228))+(((-1.0)*x1226*x1227))+(((-1.0)*x1227*x1232))+((cj4*x1230))+((sj4*x1229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1225*x1229))+(((-1.0)*x1227*x1228))+((cj4*x1226))+(((-1.0)*x1227*x1231))+((cj4*x1232))+((sj4*x1230))))+IKsqr(((((-1.0)*x1225*x1231))+(((-1.0)*x1225*x1228))+(((-1.0)*x1226*x1227))+(((-1.0)*x1227*x1232))+((cj4*x1230))+((sj4*x1229))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1225*x1229))+(((-1.0)*x1227*x1228))+((cj4*x1226))+(((-1.0)*x1227*x1231))+((cj4*x1232))+((sj4*x1230))), ((((-1.0)*x1225*x1231))+(((-1.0)*x1225*x1228))+(((-1.0)*x1226*x1227))+(((-1.0)*x1227*x1232))+((cj4*x1230))+((sj4*x1229))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1233=IKcos(j2);
IkReal x1234=IKsin(j2);
IkReal x1235=(sj0*sj4);
IkReal x1236=(cj5*r10);
IkReal x1237=((0.076)*sj0);
IkReal x1238=((1.0)*sj4);
IkReal x1239=(r11*sj5);
IkReal x1240=((0.076)*sj5);
IkReal x1241=((1.0)*cj4);
IkReal x1242=(cj0*r02);
IkReal x1243=(cj0*r01);
IkReal x1244=((1.0)*sj1);
IkReal x1245=(r21*sj5);
IkReal x1246=(cj5*r20);
IkReal x1247=(cj1*x1233);
IkReal x1248=(cj0*cj5*r00);
IkReal x1249=(cj1*x1234);
IkReal x1250=(sj1*x1234);
IkReal x1251=(sj1*x1233);
IkReal x1252=(x1233*x1244);
IkReal x1253=((1.0)*x1249);
IkReal x1254=(x1252+x1253);
evalcond[0]=(x1247+((cj4*r22))+(((-1.0)*x1238*x1245))+(((-1.0)*x1234*x1244))+((sj4*x1246)));
evalcond[1]=((((-1.0)*x1254))+((cj4*x1246))+(((-1.0)*x1241*x1245))+(((-1.0)*r22*x1238)));
evalcond[2]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1251))+pz+((r21*x1240))+(((0.0775)*x1249))+(((0.3425)*x1247))+(((-0.076)*x1246))+(((-0.3425)*x1250)));
evalcond[3]=(x1250+((cj4*sj5*x1243))+((cj4*sj0*x1239))+(((-1.0)*x1247))+(((-1.0)*sj0*x1236*x1241))+(((-1.0)*x1241*x1248))+((sj4*x1242))+((r12*x1235)));
evalcond[4]=((((-1.0)*x1254))+((x1235*x1239))+(((-1.0)*r12*sj0*x1241))+((sj4*sj5*x1243))+(((-1.0)*x1238*x1248))+(((-1.0)*x1235*x1236))+(((-1.0)*x1241*x1242)));
evalcond[5]=((((0.2845)*sj1))+(((-0.0775)*x1250))+(((-1.0)*x1237*x1239))+(((0.076)*x1248))+(((0.0535)*cj1))+(((-0.3425)*x1249))+(((-1.0)*x1240*x1243))+(((-1.0)*py*sj0))+(((0.0775)*x1247))+((x1236*x1237))+(((-1.0)*cj0*px))+(((-0.3425)*x1251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1255=((1.0)*cj5);
IkReal x1256=(cj4*sj5);
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal((((r11*x1256))+((r12*sj4))+(((-1.0)*cj4*r10*x1255)))),IkReal(((((-1.0)*cj4*r00*x1255))+((r02*sj4))+((r01*x1256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*cj4*r22))+(((-1.0)*r20*sj4*x1255)))),-1);
if(!x1258.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1257.value)+(((1.5707963267949)*(x1258.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1259=IKcos(j0);
IkReal x1260=IKsin(j0);
IkReal x1261=((1.0)*r01);
IkReal x1262=((1.0)*r10);
IkReal x1263=(cj5*x1260);
IkReal x1264=(sj5*x1259);
IkReal x1265=(sj4*x1260);
IkReal x1266=(cj5*x1259);
IkReal x1267=(sj5*x1260);
IkReal x1268=(r12*x1259);
evalcond[0]=(((r11*x1263))+((r10*x1267))+((r00*x1264))+((r01*x1266)));
evalcond[1]=((-1.0)+((r11*x1266))+(((-1.0)*x1261*x1263))+((r10*x1264))+(((-1.0)*r00*x1267)));
evalcond[2]=((((-1.0)*py*x1259))+(((-0.076)*r00*x1263))+(((0.076)*r01*x1267))+(((-0.076)*r11*x1264))+((px*x1260))+(((0.076)*r10*x1266)));
evalcond[3]=(((cj4*r02*x1260))+(((-1.0)*cj4*x1268))+(((-1.0)*sj4*x1262*x1266))+((r00*sj4*x1263))+((r11*sj4*x1264))+(((-1.0)*sj5*x1261*x1265)));
evalcond[4]=(((sj4*x1268))+(((-1.0)*r02*x1265))+(((-1.0)*cj4*x1262*x1266))+((cj4*r11*x1264))+((cj4*r00*x1263))+(((-1.0)*cj4*x1261*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1269=((4.11)*pz);
IkReal x1270=((12.0)*pz);
IkReal x1271=(cj5*r20);
IkReal x1272=((4.11)*sj4);
IkReal x1273=((0.31)*cj4);
IkReal x1274=((0.07068)*sj5);
IkReal x1275=(cj0*r01);
IkReal x1276=(r21*sj5);
IkReal x1277=(r22*sj4);
IkReal x1278=((0.93)*cj4);
IkReal x1279=((1.37)*sj4);
IkReal x1280=((0.07068)*cj5);
IkReal x1281=(r10*sj0);
IkReal x1282=(cj0*r00);
IkReal x1283=((0.02356)*cj5);
IkReal x1284=(cj0*px);
IkReal x1285=((0.49325)*sj4);
IkReal x1286=(cj4*r22);
IkReal x1287=(r11*sj0);
IkReal x1288=((0.02356)*sj5);
IkReal x1289=(py*sj0);
IkReal x1290=((1.47975)*sj4);
IkReal x1291=((0.31236)*x1276);
IkReal x1292=((0.912)*x1276);
IkReal x1293=(x1280*x1281);
IkReal x1294=(x1280*x1282);
IkReal x1295=(x1276*x1290);
IkReal x1296=(x1272*x1276);
IkReal x1297=(x1271*x1278);
IkReal x1298=(x1270+x1292+x1296+x1297);
IkReal x1299=((((0.912)*x1271))+((x1276*x1278))+(((4.11)*x1286))+((x1271*x1272))+(((0.93)*x1277)));
IkReal x1300=(x1269+x1293+x1291+x1294+x1295);
IkReal x1301=((((0.31236)*x1271))+((x1274*x1275))+((x1271*x1290))+(((0.93)*x1289))+(((0.93)*x1284))+(((1.47975)*x1286))+((x1274*x1287)));
j1eval[0]=((3.00392)+(IKabs(((1.138)+((x1276*x1279))+(((4.0)*pz))+(((-1.0)*x1271*x1279))+(((-0.31)*x1277))+(((-1.0)*x1273*x1276))+((x1271*x1273))+(((-1.37)*x1286))+(((-0.304)*x1271))+(((0.304)*x1276)))))+(IKabs(((0.37318)+x1300+(((-1.0)*x1301)))))+(IKabs(((-0.37318)+x1300+(((-1.0)*x1301)))))+(IKabs(((0.37318)+(((0.10412)*x1276))+(((1.37)*pz))+(((-0.49325)*x1286))+(((-1.0)*x1275*x1288))+(((-1.0)*x1271*x1285))+((x1276*x1285))+(((-0.10412)*x1271))+(((-0.31)*x1284))+(((-0.31)*x1289))+(((-1.0)*x1287*x1288))+((x1282*x1283))+((x1281*x1283)))))+(IKabs(((1.138)+x1298+(((-1.0)*x1299)))))+(IKabs(((-1.138)+x1298+(((-1.0)*x1299))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1302=((12.0)*pz);
IkReal x1303=((4.0)*pz);
IkReal x1304=(cj5*r20);
IkReal x1305=((4.11)*sj4);
IkReal x1306=(r21*sj5);
IkReal x1307=((0.31)*cj4);
IkReal x1308=((0.93)*cj4);
IkReal x1309=(r22*sj4);
IkReal x1310=(cj4*r22);
IkReal x1311=((1.37)*sj4);
IkReal x1312=((0.912)*x1306);
IkReal x1313=((0.304)*x1306);
IkReal x1314=(x1305*x1306);
IkReal x1315=(x1304*x1308);
IkReal x1316=(x1304*x1307);
IkReal x1317=(x1306*x1311);
IkReal x1318=(x1302+x1315+x1314+x1312);
IkReal x1319=(x1303+x1317+x1316+x1313);
IkReal x1320=(((x1306*x1308))+(((0.93)*x1309))+(((0.912)*x1304))+((x1304*x1305))+(((4.11)*x1310)));
IkReal x1321=(((x1306*x1307))+((x1304*x1311))+(((0.31)*x1309))+(((1.37)*x1310))+(((0.304)*x1304)));
op[0]=((1.138)+x1319+(((-1.0)*x1321)));
op[1]=0.428;
op[2]=((1.138)+x1318+(((-1.0)*x1320)));
op[3]=0.856;
op[4]=((-1.138)+x1318+(((-1.0)*x1320)));
op[5]=0.428;
op[6]=((-1.138)+x1319+(((-1.0)*x1321)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1322=((1.37)*pz);
IkReal x1323=((4.11)*pz);
IkReal x1324=((0.07068)*sj5);
IkReal x1325=(cj0*r01);
IkReal x1326=(cj5*r20);
IkReal x1327=(r21*sj5);
IkReal x1328=((0.07068)*cj5);
IkReal x1329=(r10*sj0);
IkReal x1330=(cj0*px);
IkReal x1331=((0.49325)*sj4);
IkReal x1332=(cj4*r22);
IkReal x1333=(r11*sj0);
IkReal x1334=(cj0*r00);
IkReal x1335=((0.02356)*sj5);
IkReal x1336=((0.02356)*cj5);
IkReal x1337=(py*sj0);
IkReal x1338=((1.47975)*sj4);
IkReal x1339=((0.10412)*x1327);
IkReal x1340=((0.31236)*x1327);
IkReal x1341=(x1329*x1336);
IkReal x1342=(x1328*x1329);
IkReal x1343=(x1328*x1334);
IkReal x1344=(x1327*x1338);
IkReal x1345=(x1334*x1336);
IkReal x1346=(x1327*x1331);
IkReal x1347=(x1340+x1342+x1343+x1344+x1323);
IkReal x1348=(x1341+x1345+x1346+x1322+x1339);
IkReal x1349=((((0.31236)*x1326))+((x1324*x1325))+(((1.47975)*x1332))+((x1326*x1338))+(((0.93)*x1330))+(((0.93)*x1337))+((x1324*x1333)));
IkReal x1350=((((0.49325)*x1332))+(((0.31)*x1330))+(((0.31)*x1337))+((x1325*x1335))+((x1326*x1331))+(((0.10412)*x1326))+((x1333*x1335)));
j1evalpoly[0]=((-0.37318)+x1348+(((0.64596)*(htj1*htj1*htj1)))+(((-1.0)*x1350))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.37318)+x1347+(((-1.0)*x1349))))))+(((0.32298)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x1347+(((-1.0)*x1349))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x1348+(((-1.0)*x1350)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1351=((1.0)*cj4);
IkReal x1352=(r22*sj1);
IkReal x1353=((1.0)*sj4);
IkReal x1354=(cj1*r22);
IkReal x1355=(cj1*r21*sj5);
IkReal x1356=(cj5*r20*sj1);
IkReal x1357=(r21*sj1*sj5);
IkReal x1358=(cj1*cj5*r20);
if( IKabs((((sj4*x1356))+((cj4*x1352))+((cj4*x1358))+(((-1.0)*x1351*x1355))+(((-1.0)*x1353*x1357))+(((-1.0)*x1353*x1354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1352*x1353))+((sj4*x1355))+((cj4*x1356))+(((-1.0)*x1351*x1357))+(((-1.0)*x1351*x1354))+(((-1.0)*x1353*x1358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1356))+((cj4*x1352))+((cj4*x1358))+(((-1.0)*x1351*x1355))+(((-1.0)*x1353*x1357))+(((-1.0)*x1353*x1354))))+IKsqr(((((-1.0)*x1352*x1353))+((sj4*x1355))+((cj4*x1356))+(((-1.0)*x1351*x1357))+(((-1.0)*x1351*x1354))+(((-1.0)*x1353*x1358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x1356))+((cj4*x1352))+((cj4*x1358))+(((-1.0)*x1351*x1355))+(((-1.0)*x1353*x1357))+(((-1.0)*x1353*x1354))), ((((-1.0)*x1352*x1353))+((sj4*x1355))+((cj4*x1356))+(((-1.0)*x1351*x1357))+(((-1.0)*x1351*x1354))+(((-1.0)*x1353*x1358))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1359=IKcos(j2);
IkReal x1360=IKsin(j2);
IkReal x1361=(sj0*sj4);
IkReal x1362=(cj5*r10);
IkReal x1363=((0.076)*sj0);
IkReal x1364=((1.0)*sj4);
IkReal x1365=(r11*sj5);
IkReal x1366=((0.076)*sj5);
IkReal x1367=((1.0)*cj4);
IkReal x1368=(cj0*r02);
IkReal x1369=(cj0*r01);
IkReal x1370=((1.0)*sj1);
IkReal x1371=(r21*sj5);
IkReal x1372=(cj5*r20);
IkReal x1373=(cj1*x1359);
IkReal x1374=(cj0*cj5*r00);
IkReal x1375=(cj1*x1360);
IkReal x1376=(sj1*x1360);
IkReal x1377=(sj1*x1359);
IkReal x1378=(x1359*x1370);
IkReal x1379=((1.0)*x1375);
IkReal x1380=(x1379+x1378);
evalcond[0]=(x1373+((cj4*r22))+(((-1.0)*x1364*x1371))+((sj4*x1372))+(((-1.0)*x1360*x1370)));
evalcond[1]=((((-1.0)*x1380))+((cj4*x1372))+(((-1.0)*r22*x1364))+(((-1.0)*x1367*x1371)));
evalcond[2]=((((0.0535)*sj1))+(((-0.076)*x1372))+(((-0.2845)*cj1))+(((-0.3425)*x1376))+(((0.3425)*x1373))+pz+(((0.0775)*x1375))+(((0.0775)*x1377))+((r21*x1366)));
evalcond[3]=(x1376+(((-1.0)*x1373))+((cj4*sj5*x1369))+((sj4*x1368))+((cj4*sj0*x1365))+((r12*x1361))+(((-1.0)*x1367*x1374))+(((-1.0)*sj0*x1362*x1367)));
evalcond[4]=((((-1.0)*x1380))+((sj4*sj5*x1369))+(((-1.0)*r12*sj0*x1367))+((x1361*x1365))+(((-1.0)*x1364*x1374))+(((-1.0)*x1361*x1362))+(((-1.0)*x1367*x1368)));
evalcond[5]=((((-1.0)*x1366*x1369))+(((-0.0775)*x1376))+(((0.2845)*sj1))+(((-0.3425)*x1375))+(((-0.3425)*x1377))+(((0.076)*x1374))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.0775)*x1373))+(((-1.0)*x1363*x1365))+(((-1.0)*cj0*px))+((x1362*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1381=((0.076)*sj5);
IkReal x1382=((0.076)*cj5);
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal((((r10*x1382))+(((-1.0)*r11*x1381))+(((-1.0)*py)))),IkReal(((((-1.0)*px))+(((-1.0)*r01*x1381))+((r00*x1382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
CheckValue<IkReal> x1384=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+((rxp0_2*sj5))+(((0.076)*r22)))),-1);
if(!x1384.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1383.value)+(((1.5707963267949)*(x1384.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1385=IKcos(j0);
IkReal x1386=IKsin(j0);
IkReal x1387=((1.0)*r01);
IkReal x1388=((1.0)*r10);
IkReal x1389=(cj5*x1386);
IkReal x1390=(sj5*x1385);
IkReal x1391=(sj4*x1386);
IkReal x1392=(cj5*x1385);
IkReal x1393=(sj5*x1386);
IkReal x1394=(r12*x1385);
evalcond[0]=(((r10*x1393))+((r01*x1392))+((r11*x1389))+((r00*x1390)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x1393))+((r10*x1390))+((r11*x1392))+(((-1.0)*x1387*x1389)));
evalcond[2]=((((-0.076)*r11*x1390))+(((0.076)*r10*x1392))+(((-1.0)*py*x1385))+(((0.076)*r01*x1393))+(((-0.076)*r00*x1389))+((px*x1386)));
evalcond[3]=(((r11*sj4*x1390))+(((-1.0)*sj5*x1387*x1391))+(((-1.0)*sj4*x1388*x1392))+((cj4*r02*x1386))+(((-1.0)*cj4*x1394))+((r00*sj4*x1389)));
evalcond[4]=(((sj4*x1394))+(((-1.0)*r02*x1391))+((cj4*r11*x1390))+(((-1.0)*cj4*x1388*x1392))+((cj4*r00*x1389))+(((-1.0)*cj4*x1387*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1395=((4.11)*pz);
IkReal x1396=((12.0)*pz);
IkReal x1397=(cj5*r20);
IkReal x1398=((4.11)*sj4);
IkReal x1399=((0.31)*cj4);
IkReal x1400=((0.07068)*sj5);
IkReal x1401=(cj0*r01);
IkReal x1402=(r21*sj5);
IkReal x1403=(r22*sj4);
IkReal x1404=((0.93)*cj4);
IkReal x1405=((1.37)*sj4);
IkReal x1406=((0.07068)*cj5);
IkReal x1407=(r10*sj0);
IkReal x1408=(cj0*r00);
IkReal x1409=((0.02356)*cj5);
IkReal x1410=(cj0*px);
IkReal x1411=((0.49325)*sj4);
IkReal x1412=(cj4*r22);
IkReal x1413=(r11*sj0);
IkReal x1414=((0.02356)*sj5);
IkReal x1415=(py*sj0);
IkReal x1416=((1.47975)*sj4);
IkReal x1417=((0.31236)*x1402);
IkReal x1418=((0.912)*x1402);
IkReal x1419=(x1406*x1407);
IkReal x1420=(x1406*x1408);
IkReal x1421=(x1402*x1416);
IkReal x1422=(x1398*x1402);
IkReal x1423=(x1397*x1404);
IkReal x1424=(x1396+x1423+x1422+x1418);
IkReal x1425=((((0.93)*x1403))+(((0.912)*x1397))+(((4.11)*x1412))+((x1397*x1398))+((x1402*x1404)));
IkReal x1426=(x1395+x1421+x1420+x1419+x1417);
IkReal x1427=(((x1400*x1413))+(((0.31236)*x1397))+((x1397*x1416))+(((1.47975)*x1412))+((x1400*x1401))+(((0.93)*x1415))+(((0.93)*x1410)));
j1eval[0]=((3.00392)+(IKabs(((-1.138)+x1424+(((-1.0)*x1425)))))+(IKabs(((0.37318)+(((1.37)*pz))+(((-1.0)*x1413*x1414))+((x1402*x1411))+(((-1.0)*x1401*x1414))+(((-0.10412)*x1397))+((x1408*x1409))+(((-0.49325)*x1412))+(((0.10412)*x1402))+(((-1.0)*x1397*x1411))+(((-0.31)*x1410))+(((-0.31)*x1415))+((x1407*x1409)))))+(IKabs(((1.138)+(((0.304)*x1402))+(((4.0)*pz))+(((-1.0)*x1399*x1402))+((x1397*x1399))+(((-0.31)*x1403))+((x1402*x1405))+(((-1.0)*x1397*x1405))+(((-0.304)*x1397))+(((-1.37)*x1412)))))+(IKabs(((0.37318)+x1426+(((-1.0)*x1427)))))+(IKabs(((-0.37318)+x1426+(((-1.0)*x1427)))))+(IKabs(((1.138)+x1424+(((-1.0)*x1425))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1428=((12.0)*pz);
IkReal x1429=((4.0)*pz);
IkReal x1430=(cj5*r20);
IkReal x1431=((4.11)*sj4);
IkReal x1432=(r21*sj5);
IkReal x1433=((0.31)*cj4);
IkReal x1434=((0.93)*cj4);
IkReal x1435=(r22*sj4);
IkReal x1436=(cj4*r22);
IkReal x1437=((1.37)*sj4);
IkReal x1438=((0.912)*x1432);
IkReal x1439=((0.304)*x1432);
IkReal x1440=(x1431*x1432);
IkReal x1441=(x1430*x1434);
IkReal x1442=(x1430*x1433);
IkReal x1443=(x1432*x1437);
IkReal x1444=(x1428+x1438+x1441+x1440);
IkReal x1445=(x1429+x1439+x1443+x1442);
IkReal x1446=((((0.93)*x1435))+((x1432*x1434))+((x1430*x1431))+(((4.11)*x1436))+(((0.912)*x1430)));
IkReal x1447=((((0.31)*x1435))+((x1432*x1433))+((x1430*x1437))+(((1.37)*x1436))+(((0.304)*x1430)));
op[0]=((1.138)+x1445+(((-1.0)*x1447)));
op[1]=0.428;
op[2]=((1.138)+x1444+(((-1.0)*x1446)));
op[3]=0.856;
op[4]=((-1.138)+x1444+(((-1.0)*x1446)));
op[5]=0.428;
op[6]=((-1.138)+x1445+(((-1.0)*x1447)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1448=((1.37)*pz);
IkReal x1449=((4.11)*pz);
IkReal x1450=((0.07068)*sj5);
IkReal x1451=(cj0*r01);
IkReal x1452=(cj5*r20);
IkReal x1453=(r21*sj5);
IkReal x1454=((0.07068)*cj5);
IkReal x1455=(r10*sj0);
IkReal x1456=(cj0*px);
IkReal x1457=((0.49325)*sj4);
IkReal x1458=(cj4*r22);
IkReal x1459=(r11*sj0);
IkReal x1460=(cj0*r00);
IkReal x1461=((0.02356)*sj5);
IkReal x1462=((0.02356)*cj5);
IkReal x1463=(py*sj0);
IkReal x1464=((1.47975)*sj4);
IkReal x1465=((0.10412)*x1453);
IkReal x1466=((0.31236)*x1453);
IkReal x1467=(x1455*x1462);
IkReal x1468=(x1454*x1455);
IkReal x1469=(x1454*x1460);
IkReal x1470=(x1453*x1464);
IkReal x1471=(x1460*x1462);
IkReal x1472=(x1453*x1457);
IkReal x1473=(x1469+x1468+x1466+x1449+x1470);
IkReal x1474=(x1465+x1467+x1448+x1472+x1471);
IkReal x1475=(((x1452*x1464))+(((0.93)*x1456))+((x1450*x1459))+((x1450*x1451))+(((0.31236)*x1452))+(((0.93)*x1463))+(((1.47975)*x1458)));
IkReal x1476=(((x1451*x1461))+(((0.31)*x1456))+(((0.49325)*x1458))+((x1459*x1461))+(((0.10412)*x1452))+(((0.31)*x1463))+((x1452*x1457)));
j1evalpoly[0]=((-0.37318)+(((htj1*htj1*htj1*htj1)*(((0.37318)+x1473+(((-1.0)*x1475))))))+(((0.64596)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x1474+(((-1.0)*x1476))))))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((0.32298)*htj1))+x1474+(((htj1*htj1)*(((-0.37318)+x1473+(((-1.0)*x1475))))))+(((-1.0)*x1476)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1477=((1.0)*cj4);
IkReal x1478=(r22*sj1);
IkReal x1479=((1.0)*sj4);
IkReal x1480=(cj1*r22);
IkReal x1481=(cj1*r21*sj5);
IkReal x1482=(cj5*r20*sj1);
IkReal x1483=(r21*sj1*sj5);
IkReal x1484=(cj1*cj5*r20);
if( IKabs((((cj4*x1478))+(((-1.0)*x1479*x1480))+(((-1.0)*x1479*x1483))+((cj4*x1484))+((sj4*x1482))+(((-1.0)*x1477*x1481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1478*x1479))+(((-1.0)*x1479*x1484))+((cj4*x1482))+((sj4*x1481))+(((-1.0)*x1477*x1483))+(((-1.0)*x1477*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x1478))+(((-1.0)*x1479*x1480))+(((-1.0)*x1479*x1483))+((cj4*x1484))+((sj4*x1482))+(((-1.0)*x1477*x1481))))+IKsqr(((((-1.0)*x1478*x1479))+(((-1.0)*x1479*x1484))+((cj4*x1482))+((sj4*x1481))+(((-1.0)*x1477*x1483))+(((-1.0)*x1477*x1480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x1478))+(((-1.0)*x1479*x1480))+(((-1.0)*x1479*x1483))+((cj4*x1484))+((sj4*x1482))+(((-1.0)*x1477*x1481))), ((((-1.0)*x1478*x1479))+(((-1.0)*x1479*x1484))+((cj4*x1482))+((sj4*x1481))+(((-1.0)*x1477*x1483))+(((-1.0)*x1477*x1480))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1485=IKcos(j2);
IkReal x1486=IKsin(j2);
IkReal x1487=(sj0*sj4);
IkReal x1488=(cj5*r10);
IkReal x1489=((0.076)*sj0);
IkReal x1490=((1.0)*sj4);
IkReal x1491=(r11*sj5);
IkReal x1492=((0.076)*sj5);
IkReal x1493=((1.0)*cj4);
IkReal x1494=(cj0*r02);
IkReal x1495=(cj0*r01);
IkReal x1496=((1.0)*sj1);
IkReal x1497=(r21*sj5);
IkReal x1498=(cj5*r20);
IkReal x1499=(cj1*x1485);
IkReal x1500=(cj0*cj5*r00);
IkReal x1501=(cj1*x1486);
IkReal x1502=(sj1*x1486);
IkReal x1503=(sj1*x1485);
IkReal x1504=(x1485*x1496);
IkReal x1505=((1.0)*x1501);
IkReal x1506=(x1504+x1505);
evalcond[0]=(((cj4*r22))+(((-1.0)*x1486*x1496))+((sj4*x1498))+x1499+(((-1.0)*x1490*x1497)));
evalcond[1]=((((-1.0)*x1506))+(((-1.0)*x1493*x1497))+((cj4*x1498))+(((-1.0)*r22*x1490)));
evalcond[2]=((((-0.076)*x1498))+(((0.3425)*x1499))+(((0.0535)*sj1))+(((-0.2845)*cj1))+((r21*x1492))+(((0.0775)*x1503))+(((0.0775)*x1501))+pz+(((-0.3425)*x1502)));
evalcond[3]=(((cj4*sj0*x1491))+((r12*x1487))+(((-1.0)*x1499))+x1502+((sj4*x1494))+((cj4*sj5*x1495))+(((-1.0)*x1493*x1500))+(((-1.0)*sj0*x1488*x1493)));
evalcond[4]=((((-1.0)*x1506))+(((-1.0)*x1490*x1500))+(((-1.0)*x1487*x1488))+((x1487*x1491))+(((-1.0)*x1493*x1494))+((sj4*sj5*x1495))+(((-1.0)*r12*sj0*x1493)));
evalcond[5]=((((0.2845)*sj1))+(((-1.0)*x1492*x1495))+(((0.0535)*cj1))+(((0.0775)*x1499))+(((-0.3425)*x1503))+(((-0.3425)*x1501))+(((0.076)*x1500))+(((-1.0)*py*sj0))+(((-0.0775)*x1502))+((x1488*x1489))+(((-1.0)*cj0*px))+(((-1.0)*x1489*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1507=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)));
j0eval[0]=x1507;
j0eval[1]=IKsign(x1507);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1508=(sj4*sj5);
IkReal x1509=((1.0)*cj4);
IkReal x1510=((1.0)*cj5*sj4);
IkReal x1511=(((cj5*r21))+((r20*sj5)));
j0eval[0]=x1511;
j0eval[1]=((IKabs((((r11*x1508))+(((-1.0)*r10*x1510))+(((-1.0)*r12*x1509)))))+(IKabs(((((-1.0)*r00*x1510))+((r01*x1508))+(((-1.0)*r02*x1509))))));
j0eval[2]=IKsign(x1511);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1512=(rxp2_2*sj4);
IkReal x1513=((13.1578947368421)*cj4);
IkReal x1514=(rxp1_2*sj5);
IkReal x1515=((1.0)*sj4);
IkReal x1516=(cj5*r21);
IkReal x1517=((0.076)*sj5);
IkReal x1518=(cj5*rxp0_2);
IkReal x1519=((0.076)*cj5);
j0eval[0]=(((x1513*x1514))+(((-1.0)*x1515*x1516))+(((-1.0)*x1513*x1518))+(((-1.0)*r20*sj5*x1515))+(((13.1578947368421)*x1512)));
j0eval[1]=IKsign((((cj4*x1514))+x1512+(((-0.076)*sj4*x1516))+(((-1.0)*cj4*x1518))+(((-1.0)*r20*sj4*x1517))));
j0eval[2]=((IKabs(((((-1.0)*r01*x1517))+((r00*x1519))+(((-1.0)*px)))))+(IKabs((((r10*x1519))+(((-1.0)*py))+(((-1.0)*r11*x1517))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1521 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1521)==0){
continue;
}
IkReal x1520=pow(x1521,-0.5);
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
IkReal gconst18=((-1.0)*(x1522.value));
IkReal gconst19=((-1.0)*r21*x1520);
IkReal gconst20=(r20*x1520);
CheckValue<IkReal> x1523 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1523.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1523.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x1526 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1526.valid){
continue;
}
IkReal x1524=((-1.0)*(x1526.value));
IkReal x1525=x1520;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1524;
IkReal gconst18=x1524;
IkReal gconst19=((-1.0)*r21*x1525);
IkReal gconst20=(r20*x1525);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
IkReal x1527=((-1.0)*(x1529.value));
IkReal x1528=x1520;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1527;
IkReal gconst18=x1527;
IkReal gconst19=((-1.0)*r21*x1528);
IkReal gconst20=(r20*x1528);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
IkReal x1530=((-1.0)*(x1532.value));
IkReal x1531=x1520;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1530;
IkReal gconst18=x1530;
IkReal gconst19=((-1.0)*r21*x1531);
IkReal gconst20=(r20*x1531);
IkReal x1533=(rxp2_2*sj4);
IkReal x1534=(r21*rxp1_2);
IkReal x1535=(r20*rxp0_2);
IkReal x1536=x1520;
IkReal x1537=(cj4*x1536);
j0eval[0]=((((-13.1578947368421)*x1535*x1537))+(((-13.1578947368421)*x1534*x1537))+(((13.1578947368421)*x1533)));
j0eval[1]=IKsign(((((-1.0)*x1535*x1537))+x1533+(((-1.0)*x1534*x1537))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1538=((0.076)*gconst20);
IkReal x1539=((0.076)*gconst19);
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1539))+((r10*x1538))+(((-1.0)*py)))),IkReal(((((-1.0)*r01*x1539))+((r00*x1538))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
CheckValue<IkReal> x1541=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*gconst20*rxp0_2))+(((-1.0)*r20*sj4*x1539))+(((-1.0)*r21*sj4*x1538))+((cj4*gconst19*rxp1_2))+((rxp2_2*sj4)))),-1);
if(!x1541.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1540.value)+(((1.5707963267949)*(x1541.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1542=IKcos(j0);
IkReal x1543=IKsin(j0);
IkReal x1544=((0.076)*gconst19);
IkReal x1545=((1.0)*sj4);
IkReal x1546=((0.076)*gconst20);
IkReal x1547=(cj4*gconst19);
IkReal x1548=((1.0)*gconst20);
IkReal x1549=((1.0)*gconst19);
IkReal x1550=(r10*x1548);
IkReal x1551=(cj4*x1543);
IkReal x1552=(r11*x1542);
IkReal x1553=(sj4*x1542);
IkReal x1554=(r01*x1543);
IkReal x1555=(r00*x1543);
IkReal x1556=(r10*x1542);
IkReal x1557=(cj4*x1542);
evalcond[0]=(((gconst19*x1556))+((gconst20*x1552))+(((-1.0)*x1549*x1555))+(((-1.0)*x1548*x1554)));
evalcond[1]=(((x1544*x1554))+(((-1.0)*x1546*x1555))+(((-1.0)*py*x1542))+(((-1.0)*x1544*x1552))+((px*x1543))+((x1546*x1556)));
evalcond[2]=(((r11*x1543*x1547))+((r12*sj4*x1543))+((r01*x1542*x1547))+((r02*x1553))+(((-1.0)*x1550*x1551))+(((-1.0)*r00*x1548*x1557)));
evalcond[3]=(((gconst20*sj4*x1555))+(((-1.0)*gconst20*x1545*x1556))+((r02*x1551))+((gconst19*sj4*x1552))+(((-1.0)*gconst19*x1545*x1554))+(((-1.0)*r12*x1557)));
evalcond[4]=((-1.0)+((x1547*x1552))+(((-1.0)*x1547*x1554))+((gconst20*r00*x1551))+((r12*x1553))+(((-1.0)*x1550*x1557))+(((-1.0)*r02*x1543*x1545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
IkReal x1558=((-1.0)*(x1560.value));
IkReal x1559=x1520;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1558;
IkReal gconst18=x1558;
IkReal gconst19=((-1.0)*r21*x1559);
IkReal gconst20=(r20*x1559);
IkReal x1561=((6000.0)*pz);
CheckValue<IkReal> x1592=IKPowWithIntegerCheck(cj4,-1);
if(!x1592.valid){
continue;
}
IkReal x1562=x1592.value;
IkReal x1563=((2000.0)*pz);
IkReal x1564=((465.0)*sj0);
IkReal x1565=(cj4*r12);
IkReal x1566=(gconst19*sj4);
IkReal x1567=(gconst20*sj4);
IkReal x1568=(gconst20*r21);
IkReal x1569=(cj4*r22);
IkReal x1570=(cj0*r01);
IkReal x1571=((155.0)*sj0);
IkReal x1572=(cj0*r00);
IkReal x1573=(gconst19*r20);
IkReal x1574=((2055.0)*x1569);
IkReal x1575=((685.0)*x1569);
IkReal x1576=(r22*sj4*x1562);
IkReal x1577=(cj0*cj4*r02);
IkReal x1578=((2055.0)*r20*x1567);
IkReal x1579=((456.0)*x1576);
IkReal x1580=((2055.0)*r21*x1566);
IkReal x1581=((685.0)*r21*x1566);
IkReal x1582=((152.0)*x1576);
IkReal x1583=((685.0)*r20*x1567);
IkReal x1584=((465.0)*x1566*x1570);
IkReal x1585=(r11*x1564*x1566);
IkReal x1586=(x1563+x1581);
IkReal x1587=(x1575+x1582+x1583);
IkReal x1588=(x1579+x1578+x1574);
IkReal x1589=(x1561+x1580+(((465.0)*x1573))+(((465.0)*x1568)));
IkReal x1590=(x1561+x1580+x1584+x1585);
IkReal x1591=((((465.0)*x1567*x1572))+x1588+((r10*x1564*x1567))+(((465.0)*x1577))+((x1564*x1565)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x1587))+(((-155.0)*x1577))+(((-1.0)*x1565*x1571))+(((-1.0)*r10*x1567*x1571))+((r11*x1566*x1571))+x1586+(((155.0)*x1566*x1570))+(((-155.0)*x1567*x1572)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x1586))+(((-155.0)*x1573))+x1587+(((-155.0)*x1568)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x1589))+x1588)))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x1591))+x1590)))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x1589))+x1588)))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x1591))+x1590))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1622=IKPowWithIntegerCheck(cj4,-1);
if(!x1622.valid){
continue;
}
IkReal x1593=x1622.value;
IkReal x1594=cj4*cj4;
IkReal x1595=((569.0)*cj4);
IkReal x1596=(cj4*pz);
IkReal x1597=((0.002)*x1593);
IkReal x1598=(r22*sj4);
IkReal x1599=(cj4*r20);
IkReal x1600=((2055.0)*sj4);
IkReal x1601=(cj4*r21);
IkReal x1602=((685.0)*sj4);
IkReal x1603=((456.0)*x1598);
IkReal x1604=((6000.0)*x1596);
IkReal x1605=((152.0)*x1598);
IkReal x1606=((2000.0)*x1596);
IkReal x1607=(r22*x1594);
IkReal x1608=((2055.0)*x1607);
IkReal x1609=((465.0)*gconst20*x1601);
IkReal x1610=((465.0)*gconst19*x1599);
IkReal x1611=((685.0)*x1607);
IkReal x1612=((155.0)*gconst19*x1599);
IkReal x1613=((155.0)*gconst20*x1601);
IkReal x1614=(gconst20*x1599*x1600);
IkReal x1615=(gconst19*x1600*x1601);
IkReal x1616=(gconst20*x1599*x1602);
IkReal x1617=(gconst19*x1601*x1602);
IkReal x1618=(x1614+x1608+x1603);
IkReal x1619=(x1616+x1611+x1605);
IkReal x1620=(x1615+x1610+x1609+x1604);
IkReal x1621=(x1617+x1612+x1613+x1606);
op[0]=(x1597*(((((-1.0)*x1595))+x1619+(((-1.0)*x1621)))));
op[1]=-0.428;
op[2]=(x1597*(((((-1.0)*x1595))+x1618+(((-1.0)*x1620)))));
op[3]=-0.856;
op[4]=(x1597*((x1618+(((-1.0)*x1620))+x1595)));
op[5]=-0.428;
op[6]=(x1597*((x1619+(((-1.0)*x1621))+x1595)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1623=cj4*cj4;
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(cj4,-1);
if(!x1664.valid){
continue;
}
IkReal x1624=x1664.value;
IkReal x1625=((569.0)*cj4);
IkReal x1626=((155.0)*sj0);
IkReal x1627=((465.0)*cj0);
IkReal x1628=((0.002)*x1624);
IkReal x1629=((465.0)*sj0);
IkReal x1630=((155.0)*cj0);
IkReal x1631=(r22*sj4);
IkReal x1632=(cj4*pz);
IkReal x1633=((2000.0)*x1632);
IkReal x1634=((152.0)*x1631);
IkReal x1635=((6000.0)*x1632);
IkReal x1636=((456.0)*x1631);
IkReal x1637=(cj4*gconst20*sj4);
IkReal x1638=(cj4*gconst19*sj4);
IkReal x1639=(r22*x1623);
IkReal x1640=(r02*x1623);
IkReal x1641=(r12*x1623);
IkReal x1642=((685.0)*x1639);
IkReal x1643=((2055.0)*x1639);
IkReal x1644=((685.0)*r21*x1638);
IkReal x1645=(x1630*x1640);
IkReal x1646=(x1626*x1641);
IkReal x1647=((685.0)*r20*x1637);
IkReal x1648=((2055.0)*r21*x1638);
IkReal x1649=(x1629*x1641);
IkReal x1650=(x1627*x1640);
IkReal x1651=((2055.0)*r20*x1637);
IkReal x1652=(r01*x1630*x1638);
IkReal x1653=(r11*x1626*x1638);
IkReal x1654=(r00*x1630*x1637);
IkReal x1655=(r10*x1626*x1637);
IkReal x1656=(r01*x1627*x1638);
IkReal x1657=(r11*x1629*x1638);
IkReal x1658=(r10*x1629*x1637);
IkReal x1659=(r00*x1627*x1637);
IkReal x1660=(x1652+x1653+x1644+x1633);
IkReal x1661=(x1656+x1657+x1648+x1635);
IkReal x1662=(x1654+x1655+x1645+x1647+x1646+x1642+x1634);
IkReal x1663=(x1658+x1659+x1650+x1651+x1643+x1649+x1636);
j1evalpoly[0]=((((0.428)*htj1))+((x1628*(htj1*htj1*htj1*htj1)*((x1625+x1661+(((-1.0)*x1663))))))+((x1628*(htj1*htj1*htj1*htj1*htj1*htj1)*((x1625+x1660+(((-1.0)*x1662))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x1628*((x1660+(((-1.0)*x1625))+(((-1.0)*x1662))))))+((x1628*(htj1*htj1)*((x1661+(((-1.0)*x1625))+(((-1.0)*x1663)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1665=((1.0)*cj1);
IkReal x1666=(cj4*r22);
IkReal x1667=(r21*sj1);
IkReal x1668=(gconst19*sj4);
IkReal x1669=(gconst19*r20);
IkReal x1670=(cj1*r21);
IkReal x1671=(gconst20*r20*sj4);
if( IKabs((((sj1*x1666))+((sj1*x1671))+((gconst20*x1670))+((cj1*x1669))+(((-1.0)*x1667*x1668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1669))+((gconst20*x1667))+((x1668*x1670))+(((-1.0)*x1665*x1671))+(((-1.0)*x1665*x1666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1666))+((sj1*x1671))+((gconst20*x1670))+((cj1*x1669))+(((-1.0)*x1667*x1668))))+IKsqr((((sj1*x1669))+((gconst20*x1667))+((x1668*x1670))+(((-1.0)*x1665*x1671))+(((-1.0)*x1665*x1666))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1666))+((sj1*x1671))+((gconst20*x1670))+((cj1*x1669))+(((-1.0)*x1667*x1668))), (((sj1*x1669))+((gconst20*x1667))+((x1668*x1670))+(((-1.0)*x1665*x1671))+(((-1.0)*x1665*x1666))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1672=IKcos(j2);
IkReal x1673=IKsin(j2);
IkReal x1674=((1.0)*cj0);
IkReal x1675=(gconst20*sj4);
IkReal x1676=(cj0*gconst19);
IkReal x1677=((1.0)*sj1);
IkReal x1678=((1.0)*gconst19);
IkReal x1679=((0.3425)*sj1);
IkReal x1680=(r10*sj0);
IkReal x1681=((0.076)*gconst20);
IkReal x1682=((1.0)*sj0);
IkReal x1683=(cj1*x1672);
IkReal x1684=(gconst19*r11*sj0);
IkReal x1685=(cj1*x1673);
IkReal x1686=(sj1*x1672);
IkReal x1687=(x1673*x1677);
evalcond[0]=((((-1.0)*gconst20*r21))+x1685+x1686+(((-1.0)*r20*x1678)));
evalcond[1]=((((-1.0)*x1687))+((cj4*r22))+x1683+((r20*x1675))+(((-1.0)*r21*sj4*x1678)));
evalcond[2]=(((r00*x1676))+(((-1.0)*x1687))+x1683+((gconst20*r11*sj0))+((cj0*gconst20*r01))+((gconst19*x1680)));
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(cj4,-1);
if(!x1688.valid){
continue;
}
evalcond[3]=((((-1.0)*x1673*x1679))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1685))+(((0.0775)*x1686))+(((0.3425)*x1683))+pz+(((-0.076)*r22*sj4*(x1688.value))));
evalcond[4]=((((-1.0)*cj4*r12*x1682))+(((-1.0)*x1672*x1677))+((r01*sj4*x1676))+(((-1.0)*x1685))+((sj4*x1684))+(((-1.0)*x1675*x1680))+(((-1.0)*cj4*r02*x1674))+(((-1.0)*r00*x1674*x1675)));
evalcond[5]=((((-1.0)*x1672*x1679))+(((-1.0)*py*x1682))+((x1680*x1681))+((cj0*r00*x1681))+(((-0.076)*r01*x1676))+(((-1.0)*px*x1674))+(((0.2845)*sj1))+(((0.0775)*x1683))+(((-0.3425)*x1685))+(((0.0535)*cj1))+(((-0.0775)*sj1*x1673))+(((-0.076)*x1684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal((((gconst19*r10))+((gconst20*r11)))),IkReal((((gconst20*r01))+((gconst19*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(IKsign((((gconst20*r20*sj4))+(((-1.0)*gconst19*r21*sj4))+((r22*((((cj4*(gconst20*gconst20)))+((cj4*(gconst19*gconst19))))))))),-1);
if(!x1690.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1689.value)+(((1.5707963267949)*(x1690.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1691=IKcos(j0);
IkReal x1692=IKsin(j0);
IkReal x1693=((0.076)*gconst19);
IkReal x1694=((1.0)*sj4);
IkReal x1695=((0.076)*gconst20);
IkReal x1696=(cj4*gconst19);
IkReal x1697=((1.0)*gconst20);
IkReal x1698=((1.0)*gconst19);
IkReal x1699=(r10*x1697);
IkReal x1700=(cj4*x1692);
IkReal x1701=(r11*x1691);
IkReal x1702=(sj4*x1691);
IkReal x1703=(r01*x1692);
IkReal x1704=(r00*x1692);
IkReal x1705=(r10*x1691);
IkReal x1706=(cj4*x1691);
evalcond[0]=(((gconst19*x1705))+(((-1.0)*x1698*x1704))+((gconst20*x1701))+(((-1.0)*x1697*x1703)));
evalcond[1]=(((x1693*x1703))+((px*x1692))+(((-1.0)*x1695*x1704))+((x1695*x1705))+(((-1.0)*x1693*x1701))+(((-1.0)*py*x1691)));
evalcond[2]=(((r02*x1702))+(((-1.0)*x1699*x1700))+((r12*sj4*x1692))+((r01*x1691*x1696))+((r11*x1692*x1696))+(((-1.0)*r00*x1697*x1706)));
evalcond[3]=(((gconst20*sj4*x1704))+((r02*x1700))+(((-1.0)*r12*x1706))+((gconst19*sj4*x1701))+(((-1.0)*gconst19*x1694*x1703))+(((-1.0)*gconst20*x1694*x1705)));
evalcond[4]=((-1.0)+((r12*x1702))+((x1696*x1701))+(((-1.0)*x1699*x1706))+(((-1.0)*x1696*x1703))+((gconst20*r00*x1700))+(((-1.0)*r02*x1692*x1694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1709 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1709.valid){
continue;
}
IkReal x1707=((-1.0)*(x1709.value));
IkReal x1708=x1520;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1707;
IkReal gconst18=x1707;
IkReal gconst19=((-1.0)*r21*x1708);
IkReal gconst20=(r20*x1708);
IkReal x1710=((6000.0)*pz);
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(cj4,-1);
if(!x1741.valid){
continue;
}
IkReal x1711=x1741.value;
IkReal x1712=((2000.0)*pz);
IkReal x1713=((465.0)*sj0);
IkReal x1714=(cj4*r12);
IkReal x1715=(gconst19*sj4);
IkReal x1716=(gconst20*sj4);
IkReal x1717=(gconst20*r21);
IkReal x1718=(cj4*r22);
IkReal x1719=(cj0*r01);
IkReal x1720=((155.0)*sj0);
IkReal x1721=(cj0*r00);
IkReal x1722=(gconst19*r20);
IkReal x1723=((2055.0)*x1718);
IkReal x1724=((685.0)*x1718);
IkReal x1725=(r22*sj4*x1711);
IkReal x1726=(cj0*cj4*r02);
IkReal x1727=((2055.0)*r20*x1716);
IkReal x1728=((456.0)*x1725);
IkReal x1729=((2055.0)*r21*x1715);
IkReal x1730=((685.0)*r21*x1715);
IkReal x1731=((152.0)*x1725);
IkReal x1732=((685.0)*r20*x1716);
IkReal x1733=((465.0)*x1715*x1719);
IkReal x1734=(r11*x1713*x1715);
IkReal x1735=(x1730+x1712);
IkReal x1736=(x1724+x1731+x1732);
IkReal x1737=(x1728+x1727+x1723);
IkReal x1738=(x1729+x1710+(((465.0)*x1717))+(((465.0)*x1722)));
IkReal x1739=(x1729+x1733+x1734+x1710);
IkReal x1740=(x1737+((r10*x1713*x1716))+((x1713*x1714))+(((465.0)*x1726))+(((465.0)*x1716*x1721)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((569.0)+x1737+(((-1.0)*x1738)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x1739+(((-1.0)*x1740)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x1737+(((-1.0)*x1738)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x1739+(((-1.0)*x1740)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-155.0)*x1722))+x1736+(((-155.0)*x1717))+(((-1.0)*x1735)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((155.0)*x1715*x1719))+(((-155.0)*x1726))+x1735+((r11*x1715*x1720))+(((-1.0)*r10*x1716*x1720))+(((-1.0)*x1714*x1720))+(((-155.0)*x1716*x1721))+(((-1.0)*x1736))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1771=IKPowWithIntegerCheck(cj4,-1);
if(!x1771.valid){
continue;
}
IkReal x1742=x1771.value;
IkReal x1743=cj4*cj4;
IkReal x1744=((569.0)*cj4);
IkReal x1745=(cj4*pz);
IkReal x1746=((0.002)*x1742);
IkReal x1747=(r22*sj4);
IkReal x1748=(cj4*r20);
IkReal x1749=((2055.0)*sj4);
IkReal x1750=(cj4*r21);
IkReal x1751=((685.0)*sj4);
IkReal x1752=((456.0)*x1747);
IkReal x1753=((6000.0)*x1745);
IkReal x1754=((152.0)*x1747);
IkReal x1755=((2000.0)*x1745);
IkReal x1756=(r22*x1743);
IkReal x1757=((2055.0)*x1756);
IkReal x1758=((465.0)*gconst20*x1750);
IkReal x1759=((465.0)*gconst19*x1748);
IkReal x1760=((685.0)*x1756);
IkReal x1761=((155.0)*gconst19*x1748);
IkReal x1762=((155.0)*gconst20*x1750);
IkReal x1763=(gconst20*x1748*x1749);
IkReal x1764=(gconst19*x1749*x1750);
IkReal x1765=(gconst20*x1748*x1751);
IkReal x1766=(gconst19*x1750*x1751);
IkReal x1767=(x1763+x1757+x1752);
IkReal x1768=(x1760+x1765+x1754);
IkReal x1769=(x1764+x1759+x1758+x1753);
IkReal x1770=(x1762+x1761+x1766+x1755);
op[0]=(x1746*((x1768+(((-1.0)*x1770))+(((-1.0)*x1744)))));
op[1]=-0.428;
op[2]=(x1746*(((((-1.0)*x1769))+x1767+(((-1.0)*x1744)))));
op[3]=-0.856;
op[4]=(x1746*(((((-1.0)*x1769))+x1767+x1744)));
op[5]=-0.428;
op[6]=(x1746*((x1768+x1744+(((-1.0)*x1770)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1772=cj4*cj4;
CheckValue<IkReal> x1813=IKPowWithIntegerCheck(cj4,-1);
if(!x1813.valid){
continue;
}
IkReal x1773=x1813.value;
IkReal x1774=((569.0)*cj4);
IkReal x1775=((155.0)*sj0);
IkReal x1776=((465.0)*cj0);
IkReal x1777=((0.002)*x1773);
IkReal x1778=((465.0)*sj0);
IkReal x1779=((155.0)*cj0);
IkReal x1780=(r22*sj4);
IkReal x1781=(cj4*pz);
IkReal x1782=((2000.0)*x1781);
IkReal x1783=((152.0)*x1780);
IkReal x1784=((6000.0)*x1781);
IkReal x1785=((456.0)*x1780);
IkReal x1786=(cj4*gconst20*sj4);
IkReal x1787=(cj4*gconst19*sj4);
IkReal x1788=(r22*x1772);
IkReal x1789=(r02*x1772);
IkReal x1790=(r12*x1772);
IkReal x1791=((685.0)*x1788);
IkReal x1792=((2055.0)*x1788);
IkReal x1793=((685.0)*r21*x1787);
IkReal x1794=(x1779*x1789);
IkReal x1795=(x1775*x1790);
IkReal x1796=((685.0)*r20*x1786);
IkReal x1797=((2055.0)*r21*x1787);
IkReal x1798=(x1778*x1790);
IkReal x1799=(x1776*x1789);
IkReal x1800=((2055.0)*r20*x1786);
IkReal x1801=(r01*x1779*x1787);
IkReal x1802=(r11*x1775*x1787);
IkReal x1803=(r00*x1779*x1786);
IkReal x1804=(r10*x1775*x1786);
IkReal x1805=(r01*x1776*x1787);
IkReal x1806=(r11*x1778*x1787);
IkReal x1807=(r10*x1778*x1786);
IkReal x1808=(r00*x1776*x1786);
IkReal x1809=(x1782+x1793+x1802+x1801);
IkReal x1810=(x1784+x1797+x1806+x1805);
IkReal x1811=(x1783+x1791+x1796+x1795+x1794+x1804+x1803);
IkReal x1812=(x1785+x1799+x1798+x1792+x1807+x1800+x1808);
j1evalpoly[0]=(((x1777*(((((-1.0)*x1811))+(((-1.0)*x1774))+x1809))))+(((0.428)*htj1))+((x1777*(htj1*htj1*htj1*htj1)*(((((-1.0)*x1812))+x1774+x1810))))+((x1777*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1811))+x1774+x1809))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x1777*(htj1*htj1)*(((((-1.0)*x1812))+(((-1.0)*x1774))+x1810)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1814=((1.0)*cj1);
IkReal x1815=(cj4*r22);
IkReal x1816=(r21*sj1);
IkReal x1817=(gconst19*sj4);
IkReal x1818=(gconst19*r20);
IkReal x1819=(cj1*r21);
IkReal x1820=(gconst20*r20*sj4);
if( IKabs(((((-1.0)*x1816*x1817))+((sj1*x1820))+((sj1*x1815))+((gconst20*x1819))+((cj1*x1818)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1817*x1819))+((sj1*x1818))+(((-1.0)*x1814*x1815))+((gconst20*x1816))+(((-1.0)*x1814*x1820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1816*x1817))+((sj1*x1820))+((sj1*x1815))+((gconst20*x1819))+((cj1*x1818))))+IKsqr((((x1817*x1819))+((sj1*x1818))+(((-1.0)*x1814*x1815))+((gconst20*x1816))+(((-1.0)*x1814*x1820))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1816*x1817))+((sj1*x1820))+((sj1*x1815))+((gconst20*x1819))+((cj1*x1818))), (((x1817*x1819))+((sj1*x1818))+(((-1.0)*x1814*x1815))+((gconst20*x1816))+(((-1.0)*x1814*x1820))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1821=IKcos(j2);
IkReal x1822=IKsin(j2);
IkReal x1823=((1.0)*cj0);
IkReal x1824=(gconst20*sj4);
IkReal x1825=(cj0*gconst19);
IkReal x1826=((1.0)*sj1);
IkReal x1827=((1.0)*gconst19);
IkReal x1828=((0.3425)*sj1);
IkReal x1829=(r10*sj0);
IkReal x1830=((0.076)*gconst20);
IkReal x1831=((1.0)*sj0);
IkReal x1832=(cj1*x1821);
IkReal x1833=(gconst19*r11*sj0);
IkReal x1834=(cj1*x1822);
IkReal x1835=(sj1*x1821);
IkReal x1836=(x1822*x1826);
evalcond[0]=((((-1.0)*gconst20*r21))+x1834+x1835+(((-1.0)*r20*x1827)));
evalcond[1]=((((-1.0)*r21*sj4*x1827))+((cj4*r22))+(((-1.0)*x1836))+x1832+((r20*x1824)));
evalcond[2]=(((r00*x1825))+(((-1.0)*x1836))+((gconst20*r11*sj0))+x1832+((cj0*gconst20*r01))+((gconst19*x1829)));
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(cj4,-1);
if(!x1837.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1834))+(((0.0775)*x1835))+(((0.3425)*x1832))+pz+(((-1.0)*x1822*x1828))+(((-0.076)*r22*sj4*(x1837.value))));
evalcond[4]=((((-1.0)*x1821*x1826))+(((-1.0)*x1834))+(((-1.0)*cj4*r12*x1831))+((r01*sj4*x1825))+(((-1.0)*cj4*r02*x1823))+(((-1.0)*x1824*x1829))+(((-1.0)*r00*x1823*x1824))+((sj4*x1833)));
evalcond[5]=((((-1.0)*x1821*x1828))+(((0.2845)*sj1))+(((-1.0)*py*x1831))+((x1829*x1830))+(((-0.3425)*x1834))+(((-0.0775)*sj1*x1822))+(((-0.076)*x1833))+(((0.0775)*x1832))+(((0.0535)*cj1))+((cj0*r00*x1830))+(((-1.0)*px*x1823))+(((-0.076)*r01*x1825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1838=(gconst19*sj4);
IkReal x1839=((1.0)*cj4);
IkReal x1840=((1.0)*gconst20*sj4);
CheckValue<IkReal> x1841 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1840))+((r11*x1838))+(((-1.0)*r12*x1839)))),IkReal((((r01*x1838))+(((-1.0)*r00*x1840))+(((-1.0)*r02*x1839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1841.valid){
continue;
}
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x1842.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1841.value)+(((1.5707963267949)*(x1842.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1843=IKcos(j0);
IkReal x1844=IKsin(j0);
IkReal x1845=((0.076)*gconst19);
IkReal x1846=((1.0)*sj4);
IkReal x1847=((0.076)*gconst20);
IkReal x1848=(cj4*gconst19);
IkReal x1849=((1.0)*gconst20);
IkReal x1850=((1.0)*gconst19);
IkReal x1851=(r10*x1849);
IkReal x1852=(cj4*x1844);
IkReal x1853=(r11*x1843);
IkReal x1854=(sj4*x1843);
IkReal x1855=(r01*x1844);
IkReal x1856=(r00*x1844);
IkReal x1857=(r10*x1843);
IkReal x1858=(cj4*x1843);
evalcond[0]=((((-1.0)*x1849*x1855))+(((-1.0)*x1850*x1856))+((gconst20*x1853))+((gconst19*x1857)));
evalcond[1]=((((-1.0)*x1845*x1853))+((px*x1844))+((x1847*x1857))+(((-1.0)*py*x1843))+((x1845*x1855))+(((-1.0)*x1847*x1856)));
evalcond[2]=(((r11*x1844*x1848))+(((-1.0)*x1851*x1852))+(((-1.0)*r00*x1849*x1858))+((r02*x1854))+((r01*x1843*x1848))+((r12*sj4*x1844)));
evalcond[3]=((((-1.0)*r12*x1858))+((gconst19*sj4*x1853))+((gconst20*sj4*x1856))+((r02*x1852))+(((-1.0)*gconst19*x1846*x1855))+(((-1.0)*gconst20*x1846*x1857)));
evalcond[4]=((-1.0)+(((-1.0)*x1848*x1855))+((x1848*x1853))+((gconst20*r00*x1852))+(((-1.0)*x1851*x1858))+((r12*x1854))+(((-1.0)*r02*x1844*x1846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1861 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1861.valid){
continue;
}
IkReal x1859=((-1.0)*(x1861.value));
IkReal x1860=x1520;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1859;
IkReal gconst18=x1859;
IkReal gconst19=((-1.0)*r21*x1860);
IkReal gconst20=(r20*x1860);
IkReal x1862=((6000.0)*pz);
CheckValue<IkReal> x1893=IKPowWithIntegerCheck(cj4,-1);
if(!x1893.valid){
continue;
}
IkReal x1863=x1893.value;
IkReal x1864=((2000.0)*pz);
IkReal x1865=((465.0)*sj0);
IkReal x1866=(cj4*r12);
IkReal x1867=(gconst19*sj4);
IkReal x1868=(gconst20*sj4);
IkReal x1869=(gconst20*r21);
IkReal x1870=(cj4*r22);
IkReal x1871=(cj0*r01);
IkReal x1872=((155.0)*sj0);
IkReal x1873=(cj0*r00);
IkReal x1874=(gconst19*r20);
IkReal x1875=((2055.0)*x1870);
IkReal x1876=((685.0)*x1870);
IkReal x1877=(r22*sj4*x1863);
IkReal x1878=(cj0*cj4*r02);
IkReal x1879=((2055.0)*r20*x1868);
IkReal x1880=((456.0)*x1877);
IkReal x1881=((2055.0)*r21*x1867);
IkReal x1882=((685.0)*r21*x1867);
IkReal x1883=((152.0)*x1877);
IkReal x1884=((685.0)*r20*x1868);
IkReal x1885=((465.0)*x1867*x1871);
IkReal x1886=(r11*x1865*x1867);
IkReal x1887=(x1864+x1882);
IkReal x1888=(x1876+x1884+x1883);
IkReal x1889=(x1875+x1879+x1880);
IkReal x1890=((((465.0)*x1869))+(((465.0)*x1874))+x1862+x1881);
IkReal x1891=(x1862+x1886+x1885+x1881);
IkReal x1892=(((x1865*x1866))+(((465.0)*x1878))+x1889+((r10*x1865*x1868))+(((465.0)*x1868*x1873)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((569.0)+(((155.0)*x1867*x1871))+(((-155.0)*x1878))+(((-1.0)*r10*x1868*x1872))+(((-1.0)*x1866*x1872))+((r11*x1867*x1872))+(((-155.0)*x1868*x1873))+x1887+(((-1.0)*x1888)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x1891+(((-1.0)*x1892)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x1889+(((-1.0)*x1890)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-155.0)*x1874))+x1888+(((-155.0)*x1869))+(((-1.0)*x1887)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x1889+(((-1.0)*x1890)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x1891+(((-1.0)*x1892))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(cj4,-1);
if(!x1923.valid){
continue;
}
IkReal x1894=x1923.value;
IkReal x1895=cj4*cj4;
IkReal x1896=((569.0)*cj4);
IkReal x1897=(cj4*pz);
IkReal x1898=((0.002)*x1894);
IkReal x1899=(r22*sj4);
IkReal x1900=(cj4*r20);
IkReal x1901=((2055.0)*sj4);
IkReal x1902=(cj4*r21);
IkReal x1903=((685.0)*sj4);
IkReal x1904=((456.0)*x1899);
IkReal x1905=((6000.0)*x1897);
IkReal x1906=((152.0)*x1899);
IkReal x1907=((2000.0)*x1897);
IkReal x1908=(r22*x1895);
IkReal x1909=((2055.0)*x1908);
IkReal x1910=((465.0)*gconst20*x1902);
IkReal x1911=((465.0)*gconst19*x1900);
IkReal x1912=((685.0)*x1908);
IkReal x1913=((155.0)*gconst19*x1900);
IkReal x1914=((155.0)*gconst20*x1902);
IkReal x1915=(gconst20*x1900*x1901);
IkReal x1916=(gconst19*x1901*x1902);
IkReal x1917=(gconst20*x1900*x1903);
IkReal x1918=(gconst19*x1902*x1903);
IkReal x1919=(x1909+x1904+x1915);
IkReal x1920=(x1906+x1912+x1917);
IkReal x1921=(x1905+x1911+x1910+x1916);
IkReal x1922=(x1907+x1918+x1913+x1914);
op[0]=(x1898*(((((-1.0)*x1922))+x1920+(((-1.0)*x1896)))));
op[1]=-0.428;
op[2]=(x1898*(((((-1.0)*x1921))+x1919+(((-1.0)*x1896)))));
op[3]=-0.856;
op[4]=(x1898*(((((-1.0)*x1921))+x1919+x1896)));
op[5]=-0.428;
op[6]=(x1898*(((((-1.0)*x1922))+x1920+x1896)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1924=cj4*cj4;
CheckValue<IkReal> x1965=IKPowWithIntegerCheck(cj4,-1);
if(!x1965.valid){
continue;
}
IkReal x1925=x1965.value;
IkReal x1926=((569.0)*cj4);
IkReal x1927=((155.0)*sj0);
IkReal x1928=((465.0)*cj0);
IkReal x1929=((0.002)*x1925);
IkReal x1930=((465.0)*sj0);
IkReal x1931=((155.0)*cj0);
IkReal x1932=(r22*sj4);
IkReal x1933=(cj4*pz);
IkReal x1934=((2000.0)*x1933);
IkReal x1935=((152.0)*x1932);
IkReal x1936=((6000.0)*x1933);
IkReal x1937=((456.0)*x1932);
IkReal x1938=(cj4*gconst20*sj4);
IkReal x1939=(cj4*gconst19*sj4);
IkReal x1940=(r22*x1924);
IkReal x1941=(r02*x1924);
IkReal x1942=(r12*x1924);
IkReal x1943=((685.0)*x1940);
IkReal x1944=((2055.0)*x1940);
IkReal x1945=((685.0)*r21*x1939);
IkReal x1946=(x1931*x1941);
IkReal x1947=(x1927*x1942);
IkReal x1948=((685.0)*r20*x1938);
IkReal x1949=((2055.0)*r21*x1939);
IkReal x1950=(x1930*x1942);
IkReal x1951=(x1928*x1941);
IkReal x1952=((2055.0)*r20*x1938);
IkReal x1953=(r01*x1931*x1939);
IkReal x1954=(r11*x1927*x1939);
IkReal x1955=(r00*x1931*x1938);
IkReal x1956=(r10*x1927*x1938);
IkReal x1957=(r01*x1928*x1939);
IkReal x1958=(r11*x1930*x1939);
IkReal x1959=(r10*x1930*x1938);
IkReal x1960=(r00*x1928*x1938);
IkReal x1961=(x1934+x1945+x1954+x1953);
IkReal x1962=(x1936+x1949+x1957+x1958);
IkReal x1963=(x1935+x1948+x1943+x1946+x1947+x1955+x1956);
IkReal x1964=(x1937+x1960+x1944+x1951+x1950+x1952+x1959);
j1evalpoly[0]=(((x1929*(htj1*htj1)*(((((-1.0)*x1964))+(((-1.0)*x1926))+x1962))))+((x1929*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1963))+x1926+x1961))))+(((0.428)*htj1))+((x1929*(((((-1.0)*x1963))+(((-1.0)*x1926))+x1961))))+((x1929*(htj1*htj1*htj1*htj1)*(((((-1.0)*x1964))+x1926+x1962))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1966=((1.0)*cj1);
IkReal x1967=(cj4*r22);
IkReal x1968=(r21*sj1);
IkReal x1969=(gconst19*sj4);
IkReal x1970=(gconst19*r20);
IkReal x1971=(cj1*r21);
IkReal x1972=(gconst20*r20*sj4);
if( IKabs((((cj1*x1970))+((gconst20*x1971))+((sj1*x1967))+((sj1*x1972))+(((-1.0)*x1968*x1969)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1969*x1971))+((gconst20*x1968))+(((-1.0)*x1966*x1967))+((sj1*x1970))+(((-1.0)*x1966*x1972)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1970))+((gconst20*x1971))+((sj1*x1967))+((sj1*x1972))+(((-1.0)*x1968*x1969))))+IKsqr((((x1969*x1971))+((gconst20*x1968))+(((-1.0)*x1966*x1967))+((sj1*x1970))+(((-1.0)*x1966*x1972))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1970))+((gconst20*x1971))+((sj1*x1967))+((sj1*x1972))+(((-1.0)*x1968*x1969))), (((x1969*x1971))+((gconst20*x1968))+(((-1.0)*x1966*x1967))+((sj1*x1970))+(((-1.0)*x1966*x1972))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1973=IKcos(j2);
IkReal x1974=IKsin(j2);
IkReal x1975=((1.0)*cj0);
IkReal x1976=(gconst20*sj4);
IkReal x1977=(cj0*gconst19);
IkReal x1978=((1.0)*sj1);
IkReal x1979=((1.0)*gconst19);
IkReal x1980=((0.3425)*sj1);
IkReal x1981=(r10*sj0);
IkReal x1982=((0.076)*gconst20);
IkReal x1983=((1.0)*sj0);
IkReal x1984=(cj1*x1973);
IkReal x1985=(gconst19*r11*sj0);
IkReal x1986=(cj1*x1974);
IkReal x1987=(sj1*x1973);
IkReal x1988=(x1974*x1978);
evalcond[0]=((((-1.0)*gconst20*r21))+x1986+x1987+(((-1.0)*r20*x1979)));
evalcond[1]=((((-1.0)*x1988))+((cj4*r22))+(((-1.0)*r21*sj4*x1979))+((r20*x1976))+x1984);
evalcond[2]=((((-1.0)*x1988))+((gconst20*r11*sj0))+((gconst19*x1981))+((r00*x1977))+x1984+((cj0*gconst20*r01)));
CheckValue<IkReal> x1989=IKPowWithIntegerCheck(cj4,-1);
if(!x1989.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((0.0775)*x1986))+(((0.0775)*x1987))+(((-0.2845)*cj1))+(((-1.0)*x1974*x1980))+pz+(((0.3425)*x1984))+(((-0.076)*r22*sj4*(x1989.value))));
evalcond[4]=((((-1.0)*cj4*r02*x1975))+((r01*sj4*x1977))+(((-1.0)*x1973*x1978))+((sj4*x1985))+(((-1.0)*x1976*x1981))+(((-1.0)*cj4*r12*x1983))+(((-1.0)*x1986))+(((-1.0)*r00*x1975*x1976)));
evalcond[5]=((((-0.0775)*sj1*x1974))+(((-0.3425)*x1986))+(((0.0775)*x1984))+(((0.2845)*sj1))+((cj0*r00*x1982))+((x1981*x1982))+(((-1.0)*x1973*x1980))+(((-0.076)*r01*x1977))+(((-1.0)*px*x1975))+(((0.0535)*cj1))+(((-1.0)*py*x1983))+(((-0.076)*x1985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1991 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1991)==0){
continue;
}
IkReal x1990=pow(x1991,-0.5);
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x1992.value))));
IkReal gconst22=((1.0)*r21*x1990);
IkReal gconst23=((-1.0)*r20*x1990);
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1993.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
IkReal x1994=((1.0)*(x1996.value));
IkReal x1995=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x1994)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1994)));
IkReal gconst22=((1.0)*r21*x1995);
IkReal gconst23=((-1.0)*r20*x1995);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1999 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1999.valid){
continue;
}
IkReal x1997=((1.0)*(x1999.value));
IkReal x1998=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x1997)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1997)));
IkReal gconst22=((1.0)*r21*x1998);
IkReal gconst23=((-1.0)*r20*x1998);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
IkReal x2000=((1.0)*(x2002.value));
IkReal x2001=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2000)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2000)));
IkReal gconst22=((1.0)*r21*x2001);
IkReal gconst23=((-1.0)*r20*x2001);
IkReal x2003=(rxp2_2*sj4);
IkReal x2004=(r21*rxp1_2);
IkReal x2005=(r20*rxp0_2);
IkReal x2006=x1990;
IkReal x2007=(cj4*x2006);
j0eval[0]=((((13.1578947368421)*x2005*x2007))+(((13.1578947368421)*x2004*x2007))+(((13.1578947368421)*x2003)));
j0eval[1]=IKsign((x2003+(((1.0)*x2005*x2007))+(((1.0)*x2004*x2007))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2008=((0.076)*gconst23);
IkReal x2009=((0.076)*gconst22);
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(IKsign((((cj4*gconst22*rxp1_2))+(((-1.0)*r21*sj4*x2008))+(((-1.0)*cj4*gconst23*rxp0_2))+(((-1.0)*r20*sj4*x2009))+((rxp2_2*sj4)))),-1);
if(!x2010.valid){
continue;
}
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal((((r10*x2008))+(((-1.0)*r11*x2009))+(((-1.0)*py)))),IkReal((((r00*x2008))+(((-1.0)*r01*x2009))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2010.value)))+(x2011.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2012=IKcos(j0);
IkReal x2013=IKsin(j0);
IkReal x2014=(gconst22*r01);
IkReal x2015=(cj4*gconst23);
IkReal x2016=(r02*sj4);
IkReal x2017=((1.0)*r10);
IkReal x2018=(r12*sj4);
IkReal x2019=(gconst22*r11);
IkReal x2020=((1.0)*x2013);
IkReal x2021=(r00*x2013);
IkReal x2022=(gconst23*x2012);
IkReal x2023=(cj4*x2012);
IkReal x2024=(cj4*x2013);
IkReal x2025=((1.0)*x2012);
IkReal x2026=(x2012*x2019);
evalcond[0]=((((-1.0)*gconst22*r00*x2020))+((r11*x2022))+(((-1.0)*gconst23*r01*x2020))+((gconst22*r10*x2012)));
evalcond[1]=((((-0.076)*x2026))+((px*x2013))+(((-0.076)*gconst23*x2021))+(((-1.0)*py*x2025))+(((0.076)*x2013*x2014))+(((0.076)*r10*x2022)));
evalcond[2]=((((-1.0)*r00*x2015*x2025))+((x2019*x2024))+((x2012*x2016))+(((-1.0)*x2013*x2015*x2017))+((x2014*x2023))+((x2013*x2018)));
evalcond[3]=(((gconst23*sj4*x2021))+(((-1.0)*sj4*x2014*x2020))+((r02*x2024))+(((-1.0)*r12*x2023))+((sj4*x2026))+(((-1.0)*sj4*x2017*x2022)));
evalcond[4]=((-1.0)+((x2019*x2023))+(((-1.0)*x2016*x2020))+(((-1.0)*x2012*x2015*x2017))+((x2012*x2018))+(((-1.0)*cj4*x2014*x2020))+((x2015*x2021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
IkReal x2027=((1.0)*(x2029.value));
IkReal x2028=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2027)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2027)));
IkReal gconst22=((1.0)*r21*x2028);
IkReal gconst23=((-1.0)*r20*x2028);
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(cj4,-1);
if(!x2065.valid){
continue;
}
IkReal x2030=x2065.value;
IkReal x2031=((2000.0)*pz);
IkReal x2032=((6000.0)*pz);
IkReal x2033=((465.0)*cj4);
IkReal x2034=(r12*sj0);
IkReal x2035=((155.0)*gconst23);
IkReal x2036=(cj0*r02);
IkReal x2037=(cj0*sj4);
IkReal x2038=(gconst22*r01);
IkReal x2039=(cj4*r22);
IkReal x2040=(gconst22*r20);
IkReal x2041=(gconst22*sj4);
IkReal x2042=((155.0)*cj4);
IkReal x2043=((465.0)*gconst23);
IkReal x2044=(r11*sj0);
IkReal x2045=((685.0)*x2039);
IkReal x2046=((2055.0)*x2039);
IkReal x2047=(r10*sj0*sj4);
IkReal x2048=(r22*sj4*x2030);
IkReal x2049=(gconst23*r20*sj4);
IkReal x2050=((685.0)*x2049);
IkReal x2051=((152.0)*x2048);
IkReal x2052=((685.0)*r21*x2041);
IkReal x2053=((2055.0)*x2049);
IkReal x2054=((456.0)*x2048);
IkReal x2055=((2055.0)*r21*x2041);
IkReal x2056=((465.0)*x2041*x2044);
IkReal x2057=((465.0)*x2037*x2038);
IkReal x2058=(x2052+x2031);
IkReal x2059=(x2055+x2032);
IkReal x2060=(x2057+x2056);
IkReal x2061=(x2046+x2053+x2054);
IkReal x2062=(x2045+x2051+x2050);
IkReal x2063=((((465.0)*x2040))+((r21*x2043))+x2059);
IkReal x2064=(((x2043*x2047))+((x2033*x2036))+((x2033*x2034))+x2061+((r00*x2037*x2043)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((-569.0)+x2060+x2059+(((-1.0)*x2064)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((155.0)*x2041*x2044))+x2058+(((-1.0)*x2062))+(((-1.0)*r00*x2035*x2037))+(((-1.0)*x2034*x2042))+(((-1.0)*x2036*x2042))+(((-1.0)*x2035*x2047))+(((155.0)*x2037*x2038)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2060+x2059+(((-1.0)*x2064)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2062+(((-1.0)*x2058))+(((-155.0)*x2040))+(((-1.0)*r21*x2035)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2061+(((-1.0)*x2063)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2061+(((-1.0)*x2063))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2095=IKPowWithIntegerCheck(cj4,-1);
if(!x2095.valid){
continue;
}
IkReal x2066=x2095.value;
IkReal x2067=cj4*cj4;
IkReal x2068=((569.0)*cj4);
IkReal x2069=(cj4*pz);
IkReal x2070=(cj4*r20);
IkReal x2071=(gconst23*sj4);
IkReal x2072=(r22*sj4);
IkReal x2073=(cj4*r21);
IkReal x2074=(gconst22*sj4);
IkReal x2075=((0.002)*x2066);
IkReal x2076=((456.0)*x2072);
IkReal x2077=((6000.0)*x2069);
IkReal x2078=((152.0)*x2072);
IkReal x2079=((2000.0)*x2069);
IkReal x2080=(r22*x2067);
IkReal x2081=((2055.0)*x2080);
IkReal x2082=((465.0)*gconst22*x2070);
IkReal x2083=((465.0)*gconst23*x2073);
IkReal x2084=((685.0)*x2080);
IkReal x2085=((155.0)*gconst22*x2070);
IkReal x2086=((155.0)*gconst23*x2073);
IkReal x2087=((2055.0)*x2070*x2071);
IkReal x2088=((2055.0)*x2073*x2074);
IkReal x2089=((685.0)*x2070*x2071);
IkReal x2090=((685.0)*x2073*x2074);
IkReal x2091=(x2078+x2089+x2084);
IkReal x2092=(x2076+x2081+x2087);
IkReal x2093=(x2079+x2090+x2086+x2085);
IkReal x2094=(x2077+x2088+x2082+x2083);
op[0]=(x2075*(((((-1.0)*x2093))+x2091+(((-1.0)*x2068)))));
op[1]=-0.428;
op[2]=(x2075*(((((-1.0)*x2094))+x2092+(((-1.0)*x2068)))));
op[3]=-0.856;
op[4]=(x2075*(((((-1.0)*x2094))+x2068+x2092)));
op[5]=-0.428;
op[6]=(x2075*(((((-1.0)*x2093))+x2068+x2091)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2096=cj4*cj4;
CheckValue<IkReal> x2139=IKPowWithIntegerCheck(cj4,-1);
if(!x2139.valid){
continue;
}
IkReal x2097=x2139.value;
IkReal x2098=((569.0)*cj4);
IkReal x2099=((0.002)*x2097);
IkReal x2100=(r22*sj4);
IkReal x2101=(cj4*pz);
IkReal x2102=((6000.0)*x2101);
IkReal x2103=((456.0)*x2100);
IkReal x2104=((2000.0)*x2101);
IkReal x2105=((152.0)*x2100);
IkReal x2106=((155.0)*cj4*sj4);
IkReal x2107=(cj0*gconst23*r00);
IkReal x2108=(gconst22*r11*sj0);
IkReal x2109=(gconst23*r10*sj0);
IkReal x2110=((465.0)*cj4*sj4);
IkReal x2111=(r22*x2096);
IkReal x2112=(cj0*gconst22*r01);
IkReal x2113=((2055.0)*x2111);
IkReal x2114=((685.0)*x2111);
IkReal x2115=(cj0*r02*x2096);
IkReal x2116=(cj4*gconst22*r21*sj4);
IkReal x2117=(r12*sj0*x2096);
IkReal x2118=(cj4*gconst23*r20*sj4);
IkReal x2119=((2055.0)*x2116);
IkReal x2120=((2055.0)*x2118);
IkReal x2121=((465.0)*x2117);
IkReal x2122=((465.0)*x2115);
IkReal x2123=((685.0)*x2116);
IkReal x2124=((155.0)*x2115);
IkReal x2125=((155.0)*x2117);
IkReal x2126=((685.0)*x2118);
IkReal x2127=(x2108*x2110);
IkReal x2128=(x2110*x2112);
IkReal x2129=(x2107*x2110);
IkReal x2130=(x2109*x2110);
IkReal x2131=(x2106*x2112);
IkReal x2132=(x2106*x2108);
IkReal x2133=(x2106*x2109);
IkReal x2134=(x2106*x2107);
IkReal x2135=(x2123+x2104+x2132+x2131);
IkReal x2136=(x2127+x2128+x2119+x2102);
IkReal x2137=(x2121+x2120+x2122+x2129+x2113+x2103+x2130);
IkReal x2138=(x2125+x2124+x2126+x2114+x2105+x2134+x2133);
j1evalpoly[0]=(((x2099*(htj1*htj1)*(((((-1.0)*x2098))+(((-1.0)*x2137))+x2136))))+(((0.428)*htj1))+((x2099*(((((-1.0)*x2098))+(((-1.0)*x2138))+x2135))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x2099*(htj1*htj1*htj1*htj1)*(((((-1.0)*x2137))+x2098+x2136))))+((x2099*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2138))+x2098+x2135)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2140=(gconst22*r20);
IkReal x2141=(cj1*gconst23);
IkReal x2142=((1.0)*sj4);
IkReal x2143=(cj4*r22);
IkReal x2144=(gconst22*r21);
IkReal x2145=(gconst23*sj1);
if( IKabs((((cj1*x2140))+(((-1.0)*sj1*x2142*x2144))+((r20*sj4*x2145))+((sj1*x2143))+((r21*x2141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2143))+((cj1*sj4*x2144))+(((-1.0)*r20*x2141*x2142))+((sj1*x2140))+((r21*x2145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2140))+(((-1.0)*sj1*x2142*x2144))+((r20*sj4*x2145))+((sj1*x2143))+((r21*x2141))))+IKsqr(((((-1.0)*cj1*x2143))+((cj1*sj4*x2144))+(((-1.0)*r20*x2141*x2142))+((sj1*x2140))+((r21*x2145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2140))+(((-1.0)*sj1*x2142*x2144))+((r20*sj4*x2145))+((sj1*x2143))+((r21*x2141))), ((((-1.0)*cj1*x2143))+((cj1*sj4*x2144))+(((-1.0)*r20*x2141*x2142))+((sj1*x2140))+((r21*x2145))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2146=IKcos(j2);
IkReal x2147=IKsin(j2);
IkReal x2148=((1.0)*gconst22);
IkReal x2149=((1.0)*cj0);
IkReal x2150=((0.076)*gconst22);
IkReal x2151=(r11*sj0);
IkReal x2152=(cj0*r01);
IkReal x2153=(gconst22*sj4);
IkReal x2154=(gconst23*sj4);
IkReal x2155=(cj0*r00);
IkReal x2156=((1.0)*sj1);
IkReal x2157=(r10*sj0);
IkReal x2158=((0.3425)*sj1);
IkReal x2159=((0.076)*gconst23);
IkReal x2160=((1.0)*sj0);
IkReal x2161=(cj1*x2146);
IkReal x2162=(cj1*x2147);
IkReal x2163=(sj1*x2146);
IkReal x2164=(x2147*x2156);
evalcond[0]=((((-1.0)*gconst23*r21))+x2163+x2162+(((-1.0)*r20*x2148)));
evalcond[1]=(((cj4*r22))+((r20*x2154))+x2161+(((-1.0)*r21*sj4*x2148))+(((-1.0)*x2164)));
evalcond[2]=(x2161+((gconst22*x2157))+((gconst22*x2155))+((gconst23*x2152))+((gconst23*x2151))+(((-1.0)*x2164)));
CheckValue<IkReal> x2165=IKPowWithIntegerCheck(cj4,-1);
if(!x2165.valid){
continue;
}
evalcond[3]=((((0.3425)*x2161))+(((0.0535)*sj1))+(((0.0775)*x2163))+(((0.0775)*x2162))+(((-0.2845)*cj1))+pz+(((-1.0)*x2147*x2158))+(((-0.076)*r22*sj4*(x2165.value))));
evalcond[4]=((((-1.0)*cj4*r02*x2149))+((x2152*x2153))+(((-1.0)*x2154*x2157))+((x2151*x2153))+(((-1.0)*cj4*r12*x2160))+(((-1.0)*x2162))+(((-1.0)*x2146*x2156))+(((-1.0)*r00*x2149*x2154)));
evalcond[5]=((((0.2845)*sj1))+((x2155*x2159))+(((0.0775)*x2161))+(((-0.3425)*x2162))+(((-0.0775)*sj1*x2147))+(((-1.0)*py*x2160))+(((0.0535)*cj1))+(((-1.0)*x2150*x2152))+(((-1.0)*x2150*x2151))+(((-1.0)*x2146*x2158))+((x2157*x2159))+(((-1.0)*px*x2149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal((((gconst22*r10))+((gconst23*r11)))),IkReal((((gconst22*r00))+((gconst23*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(IKsign((((r22*((((cj4*(gconst23*gconst23)))+((cj4*(gconst22*gconst22)))))))+((gconst23*r20*sj4))+(((-1.0)*gconst22*r21*sj4)))),-1);
if(!x2167.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2166.value)+(((1.5707963267949)*(x2167.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2168=IKcos(j0);
IkReal x2169=IKsin(j0);
IkReal x2170=(gconst22*r01);
IkReal x2171=(cj4*gconst23);
IkReal x2172=(r02*sj4);
IkReal x2173=((1.0)*r10);
IkReal x2174=(r12*sj4);
IkReal x2175=(gconst22*r11);
IkReal x2176=((1.0)*x2169);
IkReal x2177=(r00*x2169);
IkReal x2178=(gconst23*x2168);
IkReal x2179=(cj4*x2168);
IkReal x2180=(cj4*x2169);
IkReal x2181=((1.0)*x2168);
IkReal x2182=(x2168*x2175);
evalcond[0]=(((r11*x2178))+(((-1.0)*gconst23*r01*x2176))+((gconst22*r10*x2168))+(((-1.0)*gconst22*r00*x2176)));
evalcond[1]=((((0.076)*r10*x2178))+((px*x2169))+(((-1.0)*py*x2181))+(((-0.076)*gconst23*x2177))+(((0.076)*x2169*x2170))+(((-0.076)*x2182)));
evalcond[2]=((((-1.0)*r00*x2171*x2181))+((x2170*x2179))+(((-1.0)*x2169*x2171*x2173))+((x2175*x2180))+((x2168*x2172))+((x2169*x2174)));
evalcond[3]=((((-1.0)*sj4*x2170*x2176))+(((-1.0)*r12*x2179))+(((-1.0)*sj4*x2173*x2178))+((gconst23*sj4*x2177))+((r02*x2180))+((sj4*x2182)));
evalcond[4]=((-1.0)+((x2171*x2177))+((x2175*x2179))+(((-1.0)*cj4*x2170*x2176))+(((-1.0)*x2172*x2176))+((x2168*x2174))+(((-1.0)*x2168*x2171*x2173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
IkReal x2183=((1.0)*(x2185.value));
IkReal x2184=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2183)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2183)));
IkReal gconst22=((1.0)*r21*x2184);
IkReal gconst23=((-1.0)*r20*x2184);
CheckValue<IkReal> x2221=IKPowWithIntegerCheck(cj4,-1);
if(!x2221.valid){
continue;
}
IkReal x2186=x2221.value;
IkReal x2187=((2000.0)*pz);
IkReal x2188=((6000.0)*pz);
IkReal x2189=((465.0)*cj4);
IkReal x2190=(r12*sj0);
IkReal x2191=((155.0)*gconst23);
IkReal x2192=(cj0*r02);
IkReal x2193=(cj0*sj4);
IkReal x2194=(gconst22*r01);
IkReal x2195=(cj4*r22);
IkReal x2196=(gconst22*r20);
IkReal x2197=(gconst22*sj4);
IkReal x2198=((155.0)*cj4);
IkReal x2199=((465.0)*gconst23);
IkReal x2200=(r11*sj0);
IkReal x2201=((685.0)*x2195);
IkReal x2202=((2055.0)*x2195);
IkReal x2203=(r10*sj0*sj4);
IkReal x2204=(r22*sj4*x2186);
IkReal x2205=(gconst23*r20*sj4);
IkReal x2206=((685.0)*x2205);
IkReal x2207=((152.0)*x2204);
IkReal x2208=((685.0)*r21*x2197);
IkReal x2209=((2055.0)*x2205);
IkReal x2210=((456.0)*x2204);
IkReal x2211=((2055.0)*r21*x2197);
IkReal x2212=((465.0)*x2197*x2200);
IkReal x2213=((465.0)*x2193*x2194);
IkReal x2214=(x2208+x2187);
IkReal x2215=(x2211+x2188);
IkReal x2216=(x2213+x2212);
IkReal x2217=(x2202+x2209+x2210);
IkReal x2218=(x2201+x2206+x2207);
IkReal x2219=(x2215+((r21*x2199))+(((465.0)*x2196)));
IkReal x2220=(x2217+((r00*x2193*x2199))+((x2189*x2192))+((x2189*x2190))+((x2199*x2203)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((569.0)+x2217+(((-1.0)*x2219)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2216+x2215+(((-1.0)*x2220)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2218+(((-1.0)*x2214))+(((-1.0)*r21*x2191))+(((-155.0)*x2196)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2216+x2215+(((-1.0)*x2220)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2214+(((-1.0)*x2218))+(((155.0)*x2193*x2194))+(((-1.0)*x2192*x2198))+(((155.0)*x2197*x2200))+(((-1.0)*r00*x2191*x2193))+(((-1.0)*x2191*x2203))+(((-1.0)*x2190*x2198)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2217+(((-1.0)*x2219))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2251=IKPowWithIntegerCheck(cj4,-1);
if(!x2251.valid){
continue;
}
IkReal x2222=x2251.value;
IkReal x2223=cj4*cj4;
IkReal x2224=((569.0)*cj4);
IkReal x2225=(cj4*pz);
IkReal x2226=(cj4*r20);
IkReal x2227=(gconst23*sj4);
IkReal x2228=(r22*sj4);
IkReal x2229=(cj4*r21);
IkReal x2230=(gconst22*sj4);
IkReal x2231=((0.002)*x2222);
IkReal x2232=((456.0)*x2228);
IkReal x2233=((6000.0)*x2225);
IkReal x2234=((152.0)*x2228);
IkReal x2235=((2000.0)*x2225);
IkReal x2236=(r22*x2223);
IkReal x2237=((2055.0)*x2236);
IkReal x2238=((465.0)*gconst22*x2226);
IkReal x2239=((465.0)*gconst23*x2229);
IkReal x2240=((685.0)*x2236);
IkReal x2241=((155.0)*gconst22*x2226);
IkReal x2242=((155.0)*gconst23*x2229);
IkReal x2243=((2055.0)*x2226*x2227);
IkReal x2244=((2055.0)*x2229*x2230);
IkReal x2245=((685.0)*x2226*x2227);
IkReal x2246=((685.0)*x2229*x2230);
IkReal x2247=(x2234+x2245+x2240);
IkReal x2248=(x2232+x2237+x2243);
IkReal x2249=(x2235+x2246+x2241+x2242);
IkReal x2250=(x2239+x2238+x2233+x2244);
op[0]=(x2231*((x2247+(((-1.0)*x2249))+(((-1.0)*x2224)))));
op[1]=-0.428;
op[2]=(x2231*((x2248+(((-1.0)*x2250))+(((-1.0)*x2224)))));
op[3]=-0.856;
op[4]=(x2231*((x2224+x2248+(((-1.0)*x2250)))));
op[5]=-0.428;
op[6]=(x2231*((x2224+x2247+(((-1.0)*x2249)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2252=cj4*cj4;
CheckValue<IkReal> x2295=IKPowWithIntegerCheck(cj4,-1);
if(!x2295.valid){
continue;
}
IkReal x2253=x2295.value;
IkReal x2254=((569.0)*cj4);
IkReal x2255=((0.002)*x2253);
IkReal x2256=(r22*sj4);
IkReal x2257=(cj4*pz);
IkReal x2258=((6000.0)*x2257);
IkReal x2259=((456.0)*x2256);
IkReal x2260=((2000.0)*x2257);
IkReal x2261=((152.0)*x2256);
IkReal x2262=((155.0)*cj4*sj4);
IkReal x2263=(cj0*gconst23*r00);
IkReal x2264=(gconst22*r11*sj0);
IkReal x2265=(gconst23*r10*sj0);
IkReal x2266=((465.0)*cj4*sj4);
IkReal x2267=(r22*x2252);
IkReal x2268=(cj0*gconst22*r01);
IkReal x2269=((2055.0)*x2267);
IkReal x2270=((685.0)*x2267);
IkReal x2271=(cj0*r02*x2252);
IkReal x2272=(cj4*gconst22*r21*sj4);
IkReal x2273=(r12*sj0*x2252);
IkReal x2274=(cj4*gconst23*r20*sj4);
IkReal x2275=((2055.0)*x2272);
IkReal x2276=((2055.0)*x2274);
IkReal x2277=((465.0)*x2273);
IkReal x2278=((465.0)*x2271);
IkReal x2279=((685.0)*x2272);
IkReal x2280=((155.0)*x2271);
IkReal x2281=((155.0)*x2273);
IkReal x2282=((685.0)*x2274);
IkReal x2283=(x2264*x2266);
IkReal x2284=(x2266*x2268);
IkReal x2285=(x2263*x2266);
IkReal x2286=(x2265*x2266);
IkReal x2287=(x2262*x2268);
IkReal x2288=(x2262*x2264);
IkReal x2289=(x2262*x2265);
IkReal x2290=(x2262*x2263);
IkReal x2291=(x2288+x2287+x2260+x2279);
IkReal x2292=(x2283+x2284+x2275+x2258);
IkReal x2293=(x2285+x2286+x2269+x2277+x2276+x2278+x2259);
IkReal x2294=(x2289+x2280+x2281+x2282+x2290+x2261+x2270);
j1evalpoly[0]=(((x2255*(htj1*htj1)*((x2292+(((-1.0)*x2254))+(((-1.0)*x2293))))))+(((0.428)*htj1))+((x2255*((x2291+(((-1.0)*x2254))+(((-1.0)*x2294))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x2255*(htj1*htj1*htj1*htj1*htj1*htj1)*((x2291+x2254+(((-1.0)*x2294))))))+((x2255*(htj1*htj1*htj1*htj1)*((x2292+x2254+(((-1.0)*x2293)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2296=(gconst22*r20);
IkReal x2297=(cj1*gconst23);
IkReal x2298=((1.0)*sj4);
IkReal x2299=(cj4*r22);
IkReal x2300=(gconst22*r21);
IkReal x2301=(gconst23*sj1);
if( IKabs((((sj1*x2299))+((r20*sj4*x2301))+((r21*x2297))+((cj1*x2296))+(((-1.0)*sj1*x2298*x2300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2299))+((sj1*x2296))+((cj1*sj4*x2300))+((r21*x2301))+(((-1.0)*r20*x2297*x2298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2299))+((r20*sj4*x2301))+((r21*x2297))+((cj1*x2296))+(((-1.0)*sj1*x2298*x2300))))+IKsqr(((((-1.0)*cj1*x2299))+((sj1*x2296))+((cj1*sj4*x2300))+((r21*x2301))+(((-1.0)*r20*x2297*x2298))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2299))+((r20*sj4*x2301))+((r21*x2297))+((cj1*x2296))+(((-1.0)*sj1*x2298*x2300))), ((((-1.0)*cj1*x2299))+((sj1*x2296))+((cj1*sj4*x2300))+((r21*x2301))+(((-1.0)*r20*x2297*x2298))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2302=IKcos(j2);
IkReal x2303=IKsin(j2);
IkReal x2304=((1.0)*gconst22);
IkReal x2305=((1.0)*cj0);
IkReal x2306=((0.076)*gconst22);
IkReal x2307=(r11*sj0);
IkReal x2308=(cj0*r01);
IkReal x2309=(gconst22*sj4);
IkReal x2310=(gconst23*sj4);
IkReal x2311=(cj0*r00);
IkReal x2312=((1.0)*sj1);
IkReal x2313=(r10*sj0);
IkReal x2314=((0.3425)*sj1);
IkReal x2315=((0.076)*gconst23);
IkReal x2316=((1.0)*sj0);
IkReal x2317=(cj1*x2302);
IkReal x2318=(cj1*x2303);
IkReal x2319=(sj1*x2302);
IkReal x2320=(x2303*x2312);
evalcond[0]=((((-1.0)*r20*x2304))+(((-1.0)*gconst23*r21))+x2318+x2319);
evalcond[1]=(((cj4*r22))+x2317+(((-1.0)*r21*sj4*x2304))+((r20*x2310))+(((-1.0)*x2320)));
evalcond[2]=(((gconst22*x2311))+((gconst22*x2313))+x2317+((gconst23*x2307))+((gconst23*x2308))+(((-1.0)*x2320)));
CheckValue<IkReal> x2321=IKPowWithIntegerCheck(cj4,-1);
if(!x2321.valid){
continue;
}
evalcond[3]=((((0.3425)*x2317))+(((0.0775)*x2318))+(((0.0775)*x2319))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-1.0)*x2303*x2314))+(((-0.076)*r22*sj4*(x2321.value))));
evalcond[4]=((((-1.0)*x2302*x2312))+(((-1.0)*x2318))+((x2308*x2309))+(((-1.0)*cj4*r02*x2305))+(((-1.0)*cj4*r12*x2316))+(((-1.0)*x2310*x2313))+((x2307*x2309))+(((-1.0)*r00*x2305*x2310)));
evalcond[5]=((((-1.0)*x2306*x2308))+(((-1.0)*x2306*x2307))+(((-1.0)*x2302*x2314))+(((-1.0)*py*x2316))+((x2311*x2315))+(((-0.0775)*sj1*x2303))+(((0.0775)*x2317))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-1.0)*px*x2305))+((x2313*x2315))+(((-0.3425)*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2322=(gconst22*sj4);
IkReal x2323=((1.0)*cj4);
IkReal x2324=((1.0)*gconst23*sj4);
CheckValue<IkReal> x2325=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326 = IKatan2WithCheck(IkReal((((r11*x2322))+(((-1.0)*r10*x2324))+(((-1.0)*r12*x2323)))),IkReal(((((-1.0)*r00*x2324))+((r01*x2322))+(((-1.0)*r02*x2323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2326.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2325.value)))+(x2326.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2327=IKcos(j0);
IkReal x2328=IKsin(j0);
IkReal x2329=(gconst22*r01);
IkReal x2330=(cj4*gconst23);
IkReal x2331=(r02*sj4);
IkReal x2332=((1.0)*r10);
IkReal x2333=(r12*sj4);
IkReal x2334=(gconst22*r11);
IkReal x2335=((1.0)*x2328);
IkReal x2336=(r00*x2328);
IkReal x2337=(gconst23*x2327);
IkReal x2338=(cj4*x2327);
IkReal x2339=(cj4*x2328);
IkReal x2340=((1.0)*x2327);
IkReal x2341=(x2327*x2334);
evalcond[0]=((((-1.0)*gconst22*r00*x2335))+((gconst22*r10*x2327))+((r11*x2337))+(((-1.0)*gconst23*r01*x2335)));
evalcond[1]=((((-1.0)*py*x2340))+(((0.076)*x2328*x2329))+(((-0.076)*x2341))+(((-0.076)*gconst23*x2336))+((px*x2328))+(((0.076)*r10*x2337)));
evalcond[2]=(((x2329*x2338))+((x2334*x2339))+((x2327*x2331))+(((-1.0)*r00*x2330*x2340))+(((-1.0)*x2328*x2330*x2332))+((x2328*x2333)));
evalcond[3]=(((r02*x2339))+(((-1.0)*sj4*x2332*x2337))+(((-1.0)*r12*x2338))+((sj4*x2341))+(((-1.0)*sj4*x2329*x2335))+((gconst23*sj4*x2336)));
evalcond[4]=((-1.0)+(((-1.0)*cj4*x2329*x2335))+(((-1.0)*x2331*x2335))+((x2334*x2338))+((x2327*x2333))+(((-1.0)*x2327*x2330*x2332))+((x2330*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2344 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2344.valid){
continue;
}
IkReal x2342=((1.0)*(x2344.value));
IkReal x2343=x1990;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2342)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2342)));
IkReal gconst22=((1.0)*r21*x2343);
IkReal gconst23=((-1.0)*r20*x2343);
CheckValue<IkReal> x2380=IKPowWithIntegerCheck(cj4,-1);
if(!x2380.valid){
continue;
}
IkReal x2345=x2380.value;
IkReal x2346=((2000.0)*pz);
IkReal x2347=((6000.0)*pz);
IkReal x2348=((465.0)*cj4);
IkReal x2349=(r12*sj0);
IkReal x2350=((155.0)*gconst23);
IkReal x2351=(cj0*r02);
IkReal x2352=(cj0*sj4);
IkReal x2353=(gconst22*r01);
IkReal x2354=(cj4*r22);
IkReal x2355=(gconst22*r20);
IkReal x2356=(gconst22*sj4);
IkReal x2357=((155.0)*cj4);
IkReal x2358=((465.0)*gconst23);
IkReal x2359=(r11*sj0);
IkReal x2360=((685.0)*x2354);
IkReal x2361=((2055.0)*x2354);
IkReal x2362=(r10*sj0*sj4);
IkReal x2363=(r22*sj4*x2345);
IkReal x2364=(gconst23*r20*sj4);
IkReal x2365=((685.0)*x2364);
IkReal x2366=((152.0)*x2363);
IkReal x2367=((685.0)*r21*x2356);
IkReal x2368=((2055.0)*x2364);
IkReal x2369=((456.0)*x2363);
IkReal x2370=((2055.0)*r21*x2356);
IkReal x2371=((465.0)*x2356*x2359);
IkReal x2372=((465.0)*x2352*x2353);
IkReal x2373=(x2367+x2346);
IkReal x2374=(x2370+x2347);
IkReal x2375=(x2371+x2372);
IkReal x2376=(x2369+x2368+x2361);
IkReal x2377=(x2366+x2365+x2360);
IkReal x2378=(x2374+(((465.0)*x2355))+((r21*x2358)));
IkReal x2379=(x2376+((x2348*x2351))+((x2348*x2349))+((x2358*x2362))+((r00*x2352*x2358)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((-569.0)+x2376+(((-1.0)*x2378)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2377+(((-1.0)*r21*x2350))+(((-1.0)*x2373))+(((-155.0)*x2355)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2373+(((-1.0)*x2377))+(((155.0)*x2356*x2359))+(((155.0)*x2352*x2353))+(((-1.0)*x2350*x2362))+(((-1.0)*x2351*x2357))+(((-1.0)*r00*x2350*x2352))+(((-1.0)*x2349*x2357)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2374+x2375+(((-1.0)*x2379)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2374+x2375+(((-1.0)*x2379)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2376+(((-1.0)*x2378))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(cj4,-1);
if(!x2410.valid){
continue;
}
IkReal x2381=x2410.value;
IkReal x2382=cj4*cj4;
IkReal x2383=((569.0)*cj4);
IkReal x2384=(cj4*pz);
IkReal x2385=(cj4*r20);
IkReal x2386=(gconst23*sj4);
IkReal x2387=(r22*sj4);
IkReal x2388=(cj4*r21);
IkReal x2389=(gconst22*sj4);
IkReal x2390=((0.002)*x2381);
IkReal x2391=((456.0)*x2387);
IkReal x2392=((6000.0)*x2384);
IkReal x2393=((152.0)*x2387);
IkReal x2394=((2000.0)*x2384);
IkReal x2395=(r22*x2382);
IkReal x2396=((2055.0)*x2395);
IkReal x2397=((465.0)*gconst22*x2385);
IkReal x2398=((465.0)*gconst23*x2388);
IkReal x2399=((685.0)*x2395);
IkReal x2400=((155.0)*gconst22*x2385);
IkReal x2401=((155.0)*gconst23*x2388);
IkReal x2402=((2055.0)*x2385*x2386);
IkReal x2403=((2055.0)*x2388*x2389);
IkReal x2404=((685.0)*x2385*x2386);
IkReal x2405=((685.0)*x2388*x2389);
IkReal x2406=(x2404+x2393+x2399);
IkReal x2407=(x2402+x2396+x2391);
IkReal x2408=(x2405+x2400+x2401+x2394);
IkReal x2409=(x2403+x2397+x2392+x2398);
op[0]=(x2390*((x2406+(((-1.0)*x2408))+(((-1.0)*x2383)))));
op[1]=-0.428;
op[2]=(x2390*((x2407+(((-1.0)*x2409))+(((-1.0)*x2383)))));
op[3]=-0.856;
op[4]=(x2390*((x2407+(((-1.0)*x2409))+x2383)));
op[5]=-0.428;
op[6]=(x2390*((x2406+(((-1.0)*x2408))+x2383)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2411=cj4*cj4;
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(cj4,-1);
if(!x2454.valid){
continue;
}
IkReal x2412=x2454.value;
IkReal x2413=((569.0)*cj4);
IkReal x2414=((0.002)*x2412);
IkReal x2415=(r22*sj4);
IkReal x2416=(cj4*pz);
IkReal x2417=((6000.0)*x2416);
IkReal x2418=((456.0)*x2415);
IkReal x2419=((2000.0)*x2416);
IkReal x2420=((152.0)*x2415);
IkReal x2421=((155.0)*cj4*sj4);
IkReal x2422=(cj0*gconst23*r00);
IkReal x2423=(gconst22*r11*sj0);
IkReal x2424=(gconst23*r10*sj0);
IkReal x2425=((465.0)*cj4*sj4);
IkReal x2426=(r22*x2411);
IkReal x2427=(cj0*gconst22*r01);
IkReal x2428=((2055.0)*x2426);
IkReal x2429=((685.0)*x2426);
IkReal x2430=(cj0*r02*x2411);
IkReal x2431=(cj4*gconst22*r21*sj4);
IkReal x2432=(r12*sj0*x2411);
IkReal x2433=(cj4*gconst23*r20*sj4);
IkReal x2434=((2055.0)*x2431);
IkReal x2435=((2055.0)*x2433);
IkReal x2436=((465.0)*x2432);
IkReal x2437=((465.0)*x2430);
IkReal x2438=((685.0)*x2431);
IkReal x2439=((155.0)*x2430);
IkReal x2440=((155.0)*x2432);
IkReal x2441=((685.0)*x2433);
IkReal x2442=(x2423*x2425);
IkReal x2443=(x2425*x2427);
IkReal x2444=(x2422*x2425);
IkReal x2445=(x2424*x2425);
IkReal x2446=(x2421*x2427);
IkReal x2447=(x2421*x2423);
IkReal x2448=(x2421*x2424);
IkReal x2449=(x2421*x2422);
IkReal x2450=(x2438+x2419+x2446+x2447);
IkReal x2451=(x2434+x2417+x2442+x2443);
IkReal x2452=(x2437+x2436+x2435+x2418+x2444+x2445+x2428);
IkReal x2453=(x2439+x2440+x2441+x2448+x2449+x2429+x2420);
j1evalpoly[0]=((((0.428)*htj1))+((x2414*(htj1*htj1*htj1*htj1*htj1*htj1)*((x2413+x2450+(((-1.0)*x2453))))))+((x2414*((x2450+(((-1.0)*x2413))+(((-1.0)*x2453))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x2414*(htj1*htj1*htj1*htj1)*((x2413+x2451+(((-1.0)*x2452))))))+((x2414*(htj1*htj1)*((x2451+(((-1.0)*x2413))+(((-1.0)*x2452)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2455=(gconst22*r20);
IkReal x2456=(cj1*gconst23);
IkReal x2457=((1.0)*sj4);
IkReal x2458=(cj4*r22);
IkReal x2459=(gconst22*r21);
IkReal x2460=(gconst23*sj1);
if( IKabs((((cj1*x2455))+((sj1*x2458))+((r20*sj4*x2460))+(((-1.0)*sj1*x2457*x2459))+((r21*x2456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*sj4*x2459))+((sj1*x2455))+(((-1.0)*r20*x2456*x2457))+((r21*x2460))+(((-1.0)*cj1*x2458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2455))+((sj1*x2458))+((r20*sj4*x2460))+(((-1.0)*sj1*x2457*x2459))+((r21*x2456))))+IKsqr((((cj1*sj4*x2459))+((sj1*x2455))+(((-1.0)*r20*x2456*x2457))+((r21*x2460))+(((-1.0)*cj1*x2458))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2455))+((sj1*x2458))+((r20*sj4*x2460))+(((-1.0)*sj1*x2457*x2459))+((r21*x2456))), (((cj1*sj4*x2459))+((sj1*x2455))+(((-1.0)*r20*x2456*x2457))+((r21*x2460))+(((-1.0)*cj1*x2458))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2461=IKcos(j2);
IkReal x2462=IKsin(j2);
IkReal x2463=((1.0)*gconst22);
IkReal x2464=((1.0)*cj0);
IkReal x2465=((0.076)*gconst22);
IkReal x2466=(r11*sj0);
IkReal x2467=(cj0*r01);
IkReal x2468=(gconst22*sj4);
IkReal x2469=(gconst23*sj4);
IkReal x2470=(cj0*r00);
IkReal x2471=((1.0)*sj1);
IkReal x2472=(r10*sj0);
IkReal x2473=((0.3425)*sj1);
IkReal x2474=((0.076)*gconst23);
IkReal x2475=((1.0)*sj0);
IkReal x2476=(cj1*x2461);
IkReal x2477=(cj1*x2462);
IkReal x2478=(sj1*x2461);
IkReal x2479=(x2462*x2471);
evalcond[0]=(x2477+x2478+(((-1.0)*gconst23*r21))+(((-1.0)*r20*x2463)));
evalcond[1]=(x2476+((cj4*r22))+((r20*x2469))+(((-1.0)*r21*sj4*x2463))+(((-1.0)*x2479)));
evalcond[2]=(((gconst23*x2467))+((gconst23*x2466))+x2476+((gconst22*x2470))+((gconst22*x2472))+(((-1.0)*x2479)));
CheckValue<IkReal> x2480=IKPowWithIntegerCheck(cj4,-1);
if(!x2480.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.3425)*x2476))+(((0.0775)*x2477))+(((0.0775)*x2478))+(((-1.0)*x2462*x2473))+(((-0.076)*r22*sj4*(x2480.value))));
evalcond[4]=(((x2467*x2468))+(((-1.0)*x2477))+(((-1.0)*cj4*r12*x2475))+((x2466*x2468))+(((-1.0)*x2469*x2472))+(((-1.0)*r00*x2464*x2469))+(((-1.0)*cj4*r02*x2464))+(((-1.0)*x2461*x2471)));
evalcond[5]=((((-1.0)*x2465*x2467))+(((-1.0)*x2465*x2466))+(((-0.0775)*sj1*x2462))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-0.3425)*x2477))+(((0.0775)*x2476))+((x2472*x2474))+(((-1.0)*x2461*x2473))+((x2470*x2474))+(((-1.0)*px*x2464))+(((-1.0)*py*x2475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2481=((0.076)*sj5);
IkReal x2482=((0.076)*cj5);
CheckValue<IkReal> x2483=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x2481))+(((-1.0)*cj4*cj5*rxp0_2))+((cj4*rxp1_2*sj5))+(((-1.0)*r21*sj4*x2482))+((rxp2_2*sj4)))),-1);
if(!x2483.valid){
continue;
}
CheckValue<IkReal> x2484 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x2481))+((r10*x2482)))),IkReal(((((-1.0)*r01*x2481))+(((-1.0)*px))+((r00*x2482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2484.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2483.value)))+(x2484.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2485=IKcos(j0);
IkReal x2486=IKsin(j0);
IkReal x2487=((1.0)*r01);
IkReal x2488=(r11*sj5);
IkReal x2489=(cj4*r00);
IkReal x2490=((1.0)*r10);
IkReal x2491=(r01*sj5);
IkReal x2492=(cj5*x2486);
IkReal x2493=(sj4*x2485);
IkReal x2494=(sj4*x2486);
IkReal x2495=(cj5*x2485);
IkReal x2496=(cj4*x2486);
IkReal x2497=(cj4*x2485);
evalcond[0]=(((r11*x2495))+(((-1.0)*r00*sj5*x2486))+(((-1.0)*x2487*x2492))+((r10*sj5*x2485)));
evalcond[1]=((((-0.076)*x2485*x2488))+((px*x2486))+(((-1.0)*py*x2485))+(((-0.076)*r00*x2492))+(((0.076)*x2486*x2491))+(((0.076)*r10*x2495)));
evalcond[2]=(((x2488*x2496))+((r02*x2493))+((r12*x2494))+(((-1.0)*x2489*x2495))+((x2491*x2497))+(((-1.0)*cj4*x2490*x2492)));
evalcond[3]=((((-1.0)*r12*x2497))+((x2488*x2493))+((r02*x2496))+((r00*sj4*x2492))+(((-1.0)*cj5*x2490*x2493))+(((-1.0)*sj5*x2487*x2494)));
evalcond[4]=((-1.0)+((x2488*x2497))+(((-1.0)*r02*x2494))+((r12*x2493))+(((-1.0)*cj4*x2490*x2495))+(((-1.0)*sj5*x2487*x2496))+((x2489*x2492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(cj4,-1);
if(!x2530.valid){
continue;
}
IkReal x2498=x2530.value;
IkReal x2499=(cj5*r21);
IkReal x2500=((0.304)*sj0);
IkReal x2501=(cj5*r10);
IkReal x2502=(r11*sj5);
IkReal x2503=(cj0*px);
IkReal x2504=(r20*sj5);
IkReal x2505=(py*sj0);
IkReal x2506=(cj4*r22);
IkReal x2507=((0.912)*sj0);
IkReal x2508=((0.912)*cj0);
IkReal x2509=(r01*sj5);
IkReal x2510=(cj5*r00);
IkReal x2511=((0.304)*cj0);
IkReal x2512=((0.93)*x2506);
IkReal x2513=((4.11)*x2504);
IkReal x2514=((4.11)*x2499);
IkReal x2515=((12.0)*x2503);
IkReal x2516=((12.0)*x2505);
IkReal x2517=((2055.0)*x2506);
IkReal x2518=(r21*sj4*sj5);
IkReal x2519=(cj5*r20*sj4);
IkReal x2520=(r22*sj4*x2498);
IkReal x2521=((0.93)*x2519);
IkReal x2522=(x2508*x2509);
IkReal x2523=(x2502*x2507);
IkReal x2524=((2055.0)*x2519);
IkReal x2525=((456.0)*x2520);
IkReal x2526=(x2525+x2524+x2517);
IkReal x2527=(((x2501*x2507))+(((0.93)*x2518))+((x2508*x2510)));
IkReal x2528=((((465.0)*x2499))+(((2055.0)*x2518))+(((465.0)*x2504))+(((6000.0)*pz)));
IkReal x2529=(x2521+x2523+x2522+x2514+x2515+x2516+x2512+x2513);
j1eval[0]=((10.816)+(IKabs(((0.214)+x2529+(((-1.0)*x2527)))))+(IKabs(((-0.214)+x2529+(((-1.0)*x2527)))))+(((0.002)*(IKabs(((569.0)+x2526+(((-1.0)*x2528)))))))+(((0.002)*(IKabs(((-569.0)+x2526+(((-1.0)*x2528)))))))+(((0.002)*(IKabs(((-569.0)+(((-685.0)*x2518))+(((-155.0)*x2499))+(((685.0)*x2519))+(((-155.0)*x2504))+(((152.0)*x2520))+(((-2000.0)*pz))+(((685.0)*x2506)))))))+(IKabs(((0.214)+(((1.37)*x2504))+(((0.31)*x2506))+((x2500*x2502))+(((-1.0)*x2510*x2511))+(((-1.0)*x2500*x2501))+(((-0.31)*x2518))+(((1.37)*x2499))+((x2509*x2511))+(((0.31)*x2519))+(((4.0)*x2503))+(((4.0)*x2505))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2561=IKPowWithIntegerCheck(cj4,-1);
if(!x2561.valid){
continue;
}
IkReal x2531=x2561.value;
IkReal x2532=cj4*cj4;
IkReal x2533=((569.0)*cj4);
IkReal x2534=(cj4*cj5);
IkReal x2535=((0.002)*x2531);
IkReal x2536=(cj4*pz);
IkReal x2537=((685.0)*sj4);
IkReal x2538=(r22*sj4);
IkReal x2539=((2055.0)*sj4);
IkReal x2540=((456.0)*x2538);
IkReal x2541=((6000.0)*x2536);
IkReal x2542=((152.0)*x2538);
IkReal x2543=((2000.0)*x2536);
IkReal x2544=(cj4*r21*sj5);
IkReal x2545=(r22*x2532);
IkReal x2546=(cj4*r20*sj5);
IkReal x2547=((2055.0)*x2545);
IkReal x2548=((465.0)*x2546);
IkReal x2549=((465.0)*r21*x2534);
IkReal x2550=((685.0)*x2545);
IkReal x2551=((155.0)*x2546);
IkReal x2552=((155.0)*r21*x2534);
IkReal x2553=(r20*x2534*x2539);
IkReal x2554=(x2539*x2544);
IkReal x2555=(r20*x2534*x2537);
IkReal x2556=(x2537*x2544);
IkReal x2557=(x2550+x2555+x2542);
IkReal x2558=(x2553+x2540+x2547);
IkReal x2559=(x2554+x2541+x2549+x2548);
IkReal x2560=(x2551+x2552+x2556+x2543);
op[0]=(x2535*((x2557+(((-1.0)*x2533))+(((-1.0)*x2560)))));
op[1]=-0.428;
op[2]=(x2535*((x2558+(((-1.0)*x2533))+(((-1.0)*x2559)))));
op[3]=-0.856;
op[4]=(x2535*((x2558+x2533+(((-1.0)*x2559)))));
op[5]=-0.428;
op[6]=(x2535*((x2557+x2533+(((-1.0)*x2560)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2562=((0.304)*sj0);
IkReal x2563=(cj5*r10);
IkReal x2564=(r11*sj5);
IkReal x2565=(cj0*px);
IkReal x2566=(cj5*r21);
IkReal x2567=(py*sj0);
IkReal x2568=(r20*sj5);
IkReal x2569=(cj4*r22);
IkReal x2570=((0.912)*sj0);
IkReal x2571=((0.912)*cj0);
IkReal x2572=(r01*sj5);
IkReal x2573=(cj5*r00);
IkReal x2574=((0.304)*cj0);
IkReal x2575=((4.0)*x2565);
IkReal x2576=((1.37)*x2566);
IkReal x2577=((1.37)*x2568);
IkReal x2578=((4.0)*x2567);
IkReal x2579=((0.31)*x2569);
IkReal x2580=((0.93)*x2569);
IkReal x2581=((4.11)*x2568);
IkReal x2582=((4.11)*x2566);
IkReal x2583=((12.0)*x2565);
IkReal x2584=((12.0)*x2567);
IkReal x2585=(r21*sj4*sj5);
IkReal x2586=(cj5*r20*sj4);
IkReal x2587=(x2572*x2574);
IkReal x2588=((0.31)*x2586);
IkReal x2589=((0.93)*x2586);
IkReal x2590=(x2571*x2572);
IkReal x2591=(x2564*x2570);
IkReal x2592=(x2562*x2564);
IkReal x2593=(x2562*x2563);
IkReal x2594=(x2573*x2574);
IkReal x2595=((0.31)*x2585);
IkReal x2596=(((x2571*x2573))+((x2563*x2570))+(((0.93)*x2585)));
IkReal x2597=(x2594+x2595+x2593);
IkReal x2598=(x2592+x2587+x2588+x2578+x2579+x2576+x2577+x2575);
IkReal x2599=(x2590+x2591+x2584+x2583+x2582+x2581+x2580+x2589);
j1evalpoly[0]=((-0.214)+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+x2598+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+x2598+(((-1.0)*x2597))))))+(((htj1*htj1*htj1*htj1)*(((0.214)+x2599+(((-1.0)*x2596))))))+(((-1.0)*x2597))+(((htj1*htj1)*(((-0.214)+x2599+(((-1.0)*x2596))))))+(((-2.276)*htj1))+(((-4.552)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2600=(cj4*r22);
IkReal x2601=((1.0)*cj1);
IkReal x2602=(r20*sj1);
IkReal x2603=(cj5*sj4);
IkReal x2604=(cj5*r21);
IkReal x2605=(r21*sj4*sj5);
if( IKabs((((cj1*r20*sj5))+(((-1.0)*sj1*x2605))+((x2602*x2603))+((cj1*x2604))+((sj1*x2600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2600*x2601))+((cj1*x2605))+((sj1*x2604))+(((-1.0)*r20*x2601*x2603))+((sj5*x2602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+(((-1.0)*sj1*x2605))+((x2602*x2603))+((cj1*x2604))+((sj1*x2600))))+IKsqr(((((-1.0)*x2600*x2601))+((cj1*x2605))+((sj1*x2604))+(((-1.0)*r20*x2601*x2603))+((sj5*x2602))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+(((-1.0)*sj1*x2605))+((x2602*x2603))+((cj1*x2604))+((sj1*x2600))), ((((-1.0)*x2600*x2601))+((cj1*x2605))+((sj1*x2604))+(((-1.0)*r20*x2601*x2603))+((sj5*x2602))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2606=IKcos(j2);
IkReal x2607=IKsin(j2);
IkReal x2608=(r10*sj0);
IkReal x2609=((0.076)*cj5);
IkReal x2610=(cj0*r00);
IkReal x2611=((0.076)*sj5);
IkReal x2612=(r11*sj0);
IkReal x2613=((1.0)*sj5);
IkReal x2614=((1.0)*cj0);
IkReal x2615=(cj0*r01);
IkReal x2616=((1.0)*sj1);
IkReal x2617=((0.3425)*sj1);
IkReal x2618=(sj4*sj5);
IkReal x2619=((1.0)*sj0);
IkReal x2620=(cj1*x2606);
IkReal x2621=((1.0)*cj5*sj4);
IkReal x2622=(cj1*x2607);
IkReal x2623=(sj1*x2606);
IkReal x2624=(x2607*x2616);
evalcond[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2613))+x2622+x2623);
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x2613))+(((-1.0)*x2624))+x2620);
evalcond[2]=(((cj5*x2615))+((cj5*x2612))+((sj5*x2610))+(((-1.0)*x2624))+((sj5*x2608))+x2620);
CheckValue<IkReal> x2625=IKPowWithIntegerCheck(cj4,-1);
if(!x2625.valid){
continue;
}
evalcond[3]=((((-1.0)*x2607*x2617))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x2623))+(((0.0775)*x2622))+(((0.3425)*x2620))+(((-0.076)*r22*sj4*(x2625.value))));
evalcond[4]=((((-1.0)*x2606*x2616))+(((-1.0)*x2610*x2621))+(((-1.0)*x2608*x2621))+(((-1.0)*x2622))+(((-1.0)*cj4*r02*x2614))+((x2615*x2618))+(((-1.0)*cj4*r12*x2619))+((x2612*x2618)));
evalcond[5]=((((-1.0)*x2606*x2617))+(((-1.0)*x2611*x2615))+(((-1.0)*x2611*x2612))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((0.0775)*x2620))+(((-1.0)*py*x2619))+(((-0.3425)*x2622))+((x2609*x2610))+((x2608*x2609))+(((-1.0)*px*x2614))+(((-0.0775)*sj1*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2626=(sj4*sj5);
IkReal x2627=((1.0)*cj4);
IkReal x2628=((1.0)*cj5*sj4);
CheckValue<IkReal> x2629=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2629.valid){
continue;
}
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2627))+(((-1.0)*r10*x2628))+((r11*x2626)))),IkReal((((r01*x2626))+(((-1.0)*r00*x2628))+(((-1.0)*r02*x2627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2629.value)))+(x2630.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2631=IKcos(j0);
IkReal x2632=IKsin(j0);
IkReal x2633=((1.0)*r01);
IkReal x2634=(r11*sj5);
IkReal x2635=(cj4*r00);
IkReal x2636=((1.0)*r10);
IkReal x2637=(r01*sj5);
IkReal x2638=(cj5*x2632);
IkReal x2639=(sj4*x2631);
IkReal x2640=(sj4*x2632);
IkReal x2641=(cj5*x2631);
IkReal x2642=(cj4*x2632);
IkReal x2643=(cj4*x2631);
evalcond[0]=(((r11*x2641))+(((-1.0)*r00*sj5*x2632))+(((-1.0)*x2633*x2638))+((r10*sj5*x2631)));
evalcond[1]=((((0.076)*r10*x2641))+(((-0.076)*x2631*x2634))+(((-0.076)*r00*x2638))+((px*x2632))+(((-1.0)*py*x2631))+(((0.076)*x2632*x2637)));
evalcond[2]=(((r12*x2640))+(((-1.0)*x2635*x2641))+(((-1.0)*cj4*x2636*x2638))+((x2634*x2642))+((x2637*x2643))+((r02*x2639)));
evalcond[3]=((((-1.0)*cj5*x2636*x2639))+((r02*x2642))+((x2634*x2639))+((r00*sj4*x2638))+(((-1.0)*sj5*x2633*x2640))+(((-1.0)*r12*x2643)));
evalcond[4]=((-1.0)+((r12*x2639))+(((-1.0)*cj4*x2636*x2641))+((x2635*x2638))+((x2634*x2643))+(((-1.0)*r02*x2640))+(((-1.0)*sj5*x2633*x2642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(cj4,-1);
if(!x2676.valid){
continue;
}
IkReal x2644=x2676.value;
IkReal x2645=(cj5*r21);
IkReal x2646=((0.304)*sj0);
IkReal x2647=(cj5*r10);
IkReal x2648=(r11*sj5);
IkReal x2649=(cj0*px);
IkReal x2650=(r20*sj5);
IkReal x2651=(py*sj0);
IkReal x2652=(cj4*r22);
IkReal x2653=((0.912)*sj0);
IkReal x2654=((0.912)*cj0);
IkReal x2655=(r01*sj5);
IkReal x2656=(cj5*r00);
IkReal x2657=((0.304)*cj0);
IkReal x2658=((0.93)*x2652);
IkReal x2659=((4.11)*x2650);
IkReal x2660=((4.11)*x2645);
IkReal x2661=((12.0)*x2649);
IkReal x2662=((12.0)*x2651);
IkReal x2663=((2055.0)*x2652);
IkReal x2664=(r21*sj4*sj5);
IkReal x2665=(cj5*r20*sj4);
IkReal x2666=(r22*sj4*x2644);
IkReal x2667=((0.93)*x2665);
IkReal x2668=(x2654*x2655);
IkReal x2669=(x2648*x2653);
IkReal x2670=((2055.0)*x2665);
IkReal x2671=((456.0)*x2666);
IkReal x2672=(x2663+x2671+x2670);
IkReal x2673=((((0.93)*x2664))+((x2654*x2656))+((x2647*x2653)));
IkReal x2674=((((2055.0)*x2664))+(((465.0)*x2650))+(((465.0)*x2645))+(((6000.0)*pz)));
IkReal x2675=(x2659+x2658+x2667+x2662+x2660+x2661+x2668+x2669);
j1eval[0]=((10.816)+(((0.002)*(IKabs(((-569.0)+(((685.0)*x2652))+(((-155.0)*x2645))+(((-155.0)*x2650))+(((152.0)*x2666))+(((685.0)*x2665))+(((-2000.0)*pz))+(((-685.0)*x2664)))))))+(((0.002)*(IKabs(((569.0)+(((-1.0)*x2674))+x2672)))))+(IKabs(((-0.214)+(((-1.0)*x2673))+x2675)))+(IKabs(((0.214)+(((-1.0)*x2673))+x2675)))+(IKabs(((0.214)+(((0.31)*x2665))+(((1.37)*x2650))+(((1.37)*x2645))+(((-1.0)*x2646*x2647))+(((-0.31)*x2664))+((x2655*x2657))+((x2646*x2648))+(((4.0)*x2651))+(((4.0)*x2649))+(((-1.0)*x2656*x2657))+(((0.31)*x2652)))))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x2674))+x2672))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(cj4,-1);
if(!x2707.valid){
continue;
}
IkReal x2677=x2707.value;
IkReal x2678=cj4*cj4;
IkReal x2679=((569.0)*cj4);
IkReal x2680=(cj4*cj5);
IkReal x2681=((0.002)*x2677);
IkReal x2682=(cj4*pz);
IkReal x2683=((685.0)*sj4);
IkReal x2684=(r22*sj4);
IkReal x2685=((2055.0)*sj4);
IkReal x2686=((456.0)*x2684);
IkReal x2687=((6000.0)*x2682);
IkReal x2688=((152.0)*x2684);
IkReal x2689=((2000.0)*x2682);
IkReal x2690=(cj4*r21*sj5);
IkReal x2691=(r22*x2678);
IkReal x2692=(cj4*r20*sj5);
IkReal x2693=((2055.0)*x2691);
IkReal x2694=((465.0)*x2692);
IkReal x2695=((465.0)*r21*x2680);
IkReal x2696=((685.0)*x2691);
IkReal x2697=((155.0)*x2692);
IkReal x2698=((155.0)*r21*x2680);
IkReal x2699=(r20*x2680*x2685);
IkReal x2700=(x2685*x2690);
IkReal x2701=(r20*x2680*x2683);
IkReal x2702=(x2683*x2690);
IkReal x2703=(x2701+x2688+x2696);
IkReal x2704=(x2686+x2699+x2693);
IkReal x2705=(x2700+x2687+x2695+x2694);
IkReal x2706=(x2702+x2689+x2698+x2697);
op[0]=(x2681*((x2703+(((-1.0)*x2706))+(((-1.0)*x2679)))));
op[1]=-0.428;
op[2]=(x2681*((x2704+(((-1.0)*x2705))+(((-1.0)*x2679)))));
op[3]=-0.856;
op[4]=(x2681*((x2704+(((-1.0)*x2705))+x2679)));
op[5]=-0.428;
op[6]=(x2681*((x2703+(((-1.0)*x2706))+x2679)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2708=((0.304)*sj0);
IkReal x2709=(cj5*r10);
IkReal x2710=(r11*sj5);
IkReal x2711=(cj0*px);
IkReal x2712=(cj5*r21);
IkReal x2713=(py*sj0);
IkReal x2714=(r20*sj5);
IkReal x2715=(cj4*r22);
IkReal x2716=((0.912)*sj0);
IkReal x2717=((0.912)*cj0);
IkReal x2718=(r01*sj5);
IkReal x2719=(cj5*r00);
IkReal x2720=((0.304)*cj0);
IkReal x2721=((4.0)*x2711);
IkReal x2722=((1.37)*x2712);
IkReal x2723=((1.37)*x2714);
IkReal x2724=((4.0)*x2713);
IkReal x2725=((0.31)*x2715);
IkReal x2726=((0.93)*x2715);
IkReal x2727=((4.11)*x2714);
IkReal x2728=((4.11)*x2712);
IkReal x2729=((12.0)*x2711);
IkReal x2730=((12.0)*x2713);
IkReal x2731=(r21*sj4*sj5);
IkReal x2732=(cj5*r20*sj4);
IkReal x2733=(x2718*x2720);
IkReal x2734=((0.31)*x2732);
IkReal x2735=((0.93)*x2732);
IkReal x2736=(x2717*x2718);
IkReal x2737=(x2710*x2716);
IkReal x2738=(x2708*x2710);
IkReal x2739=(x2708*x2709);
IkReal x2740=(x2719*x2720);
IkReal x2741=((0.31)*x2731);
IkReal x2742=(((x2709*x2716))+(((0.93)*x2731))+((x2717*x2719)));
IkReal x2743=(x2741+x2740+x2739);
IkReal x2744=(x2734+x2733+x2738+x2725+x2724+x2723+x2722+x2721);
IkReal x2745=(x2735+x2736+x2737+x2730+x2727+x2726+x2729+x2728);
j1evalpoly[0]=((-0.214)+x2744+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.214)+x2745+(((-1.0)*x2742))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+x2744+(((-1.0)*x2743))))))+(((htj1*htj1)*(((-0.214)+x2745+(((-1.0)*x2742))))))+(((-2.276)*htj1))+(((-1.0)*x2743))+(((-4.552)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2746=(cj4*r22);
IkReal x2747=((1.0)*cj1);
IkReal x2748=(r20*sj1);
IkReal x2749=(cj5*sj4);
IkReal x2750=(cj5*r21);
IkReal x2751=(r21*sj4*sj5);
if( IKabs((((cj1*r20*sj5))+(((-1.0)*sj1*x2751))+((x2748*x2749))+((sj1*x2746))+((cj1*x2750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x2748))+((sj1*x2750))+((cj1*x2751))+(((-1.0)*x2746*x2747))+(((-1.0)*r20*x2747*x2749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+(((-1.0)*sj1*x2751))+((x2748*x2749))+((sj1*x2746))+((cj1*x2750))))+IKsqr((((sj5*x2748))+((sj1*x2750))+((cj1*x2751))+(((-1.0)*x2746*x2747))+(((-1.0)*r20*x2747*x2749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+(((-1.0)*sj1*x2751))+((x2748*x2749))+((sj1*x2746))+((cj1*x2750))), (((sj5*x2748))+((sj1*x2750))+((cj1*x2751))+(((-1.0)*x2746*x2747))+(((-1.0)*r20*x2747*x2749))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2752=IKcos(j2);
IkReal x2753=IKsin(j2);
IkReal x2754=(r10*sj0);
IkReal x2755=((0.076)*cj5);
IkReal x2756=(cj0*r00);
IkReal x2757=((0.076)*sj5);
IkReal x2758=(r11*sj0);
IkReal x2759=((1.0)*sj5);
IkReal x2760=((1.0)*cj0);
IkReal x2761=(cj0*r01);
IkReal x2762=((1.0)*sj1);
IkReal x2763=((0.3425)*sj1);
IkReal x2764=(sj4*sj5);
IkReal x2765=((1.0)*sj0);
IkReal x2766=(cj1*x2752);
IkReal x2767=((1.0)*cj5*sj4);
IkReal x2768=(cj1*x2753);
IkReal x2769=(sj1*x2752);
IkReal x2770=(x2753*x2762);
evalcond[0]=(x2769+x2768+(((-1.0)*cj5*r21))+(((-1.0)*r20*x2759)));
evalcond[1]=(x2766+(((-1.0)*r21*sj4*x2759))+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*x2770)));
evalcond[2]=(x2766+((cj5*x2761))+((sj5*x2756))+((sj5*x2754))+(((-1.0)*x2770))+((cj5*x2758)));
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(cj4,-1);
if(!x2771.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((0.3425)*x2766))+(((-0.2845)*cj1))+(((0.0775)*x2768))+(((0.0775)*x2769))+pz+(((-1.0)*x2753*x2763))+(((-0.076)*r22*sj4*(x2771.value))));
evalcond[4]=(((x2758*x2764))+(((-1.0)*x2768))+(((-1.0)*x2752*x2762))+(((-1.0)*cj4*r02*x2760))+((x2761*x2764))+(((-1.0)*cj4*r12*x2765))+(((-1.0)*x2756*x2767))+(((-1.0)*x2754*x2767)));
evalcond[5]=((((-1.0)*x2752*x2763))+(((-1.0)*py*x2765))+((x2754*x2755))+(((0.2845)*sj1))+(((-1.0)*x2757*x2758))+(((0.0775)*x2766))+(((-1.0)*x2757*x2761))+(((0.0535)*cj1))+(((-1.0)*px*x2760))+((x2755*x2756))+(((-0.3425)*x2768))+(((-0.0775)*sj1*x2753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2772 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2772.valid){
continue;
}
CheckValue<IkReal> x2773=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)))),-1);
if(!x2773.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2772.value)+(((1.5707963267949)*(x2773.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2774=IKcos(j0);
IkReal x2775=IKsin(j0);
IkReal x2776=((1.0)*r01);
IkReal x2777=(r11*sj5);
IkReal x2778=(cj4*r00);
IkReal x2779=((1.0)*r10);
IkReal x2780=(r01*sj5);
IkReal x2781=(cj5*x2775);
IkReal x2782=(sj4*x2774);
IkReal x2783=(sj4*x2775);
IkReal x2784=(cj5*x2774);
IkReal x2785=(cj4*x2775);
IkReal x2786=(cj4*x2774);
evalcond[0]=(((r10*sj5*x2774))+(((-1.0)*r00*sj5*x2775))+((r11*x2784))+(((-1.0)*x2776*x2781)));
evalcond[1]=((((0.076)*r10*x2784))+(((-0.076)*r00*x2781))+(((-0.076)*x2774*x2777))+((px*x2775))+(((0.076)*x2775*x2780))+(((-1.0)*py*x2774)));
evalcond[2]=(((x2780*x2786))+((x2777*x2785))+((r02*x2782))+((r12*x2783))+(((-1.0)*cj4*x2779*x2781))+(((-1.0)*x2778*x2784)));
evalcond[3]=((((-1.0)*sj5*x2776*x2783))+(((-1.0)*cj5*x2779*x2782))+((x2777*x2782))+((r02*x2785))+((r00*sj4*x2781))+(((-1.0)*r12*x2786)));
evalcond[4]=((-1.0)+((x2778*x2781))+(((-1.0)*sj5*x2776*x2785))+((x2777*x2786))+((r12*x2782))+(((-1.0)*r02*x2783))+(((-1.0)*cj4*x2779*x2784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2819=IKPowWithIntegerCheck(cj4,-1);
if(!x2819.valid){
continue;
}
IkReal x2787=x2819.value;
IkReal x2788=(cj5*r21);
IkReal x2789=((0.304)*sj0);
IkReal x2790=(cj5*r10);
IkReal x2791=(r11*sj5);
IkReal x2792=(cj0*px);
IkReal x2793=(r20*sj5);
IkReal x2794=(py*sj0);
IkReal x2795=(cj4*r22);
IkReal x2796=((0.912)*sj0);
IkReal x2797=((0.912)*cj0);
IkReal x2798=(r01*sj5);
IkReal x2799=(cj5*r00);
IkReal x2800=((0.304)*cj0);
IkReal x2801=((0.93)*x2795);
IkReal x2802=((4.11)*x2793);
IkReal x2803=((4.11)*x2788);
IkReal x2804=((12.0)*x2792);
IkReal x2805=((12.0)*x2794);
IkReal x2806=((2055.0)*x2795);
IkReal x2807=(r21*sj4*sj5);
IkReal x2808=(cj5*r20*sj4);
IkReal x2809=(r22*sj4*x2787);
IkReal x2810=((0.93)*x2808);
IkReal x2811=(x2797*x2798);
IkReal x2812=(x2791*x2796);
IkReal x2813=((2055.0)*x2808);
IkReal x2814=((456.0)*x2809);
IkReal x2815=(x2806+x2814+x2813);
IkReal x2816=(((x2797*x2799))+((x2790*x2796))+(((0.93)*x2807)));
IkReal x2817=((((465.0)*x2788))+(((465.0)*x2793))+(((6000.0)*pz))+(((2055.0)*x2807)));
IkReal x2818=(x2802+x2803+x2801+x2804+x2805+x2811+x2810+x2812);
j1eval[0]=((10.816)+(IKabs(((0.214)+(((0.31)*x2808))+((x2798*x2800))+(((-1.0)*x2789*x2790))+(((4.0)*x2794))+(((4.0)*x2792))+((x2789*x2791))+(((0.31)*x2795))+(((-1.0)*x2799*x2800))+(((-0.31)*x2807))+(((1.37)*x2793))+(((1.37)*x2788)))))+(((0.002)*(IKabs(((-569.0)+(((685.0)*x2795))+(((-155.0)*x2793))+(((-155.0)*x2788))+(((685.0)*x2808))+(((152.0)*x2809))+(((-685.0)*x2807))+(((-2000.0)*pz)))))))+(IKabs(((-0.214)+(((-1.0)*x2816))+x2818)))+(IKabs(((0.214)+(((-1.0)*x2816))+x2818)))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x2817))+x2815)))))+(((0.002)*(IKabs(((569.0)+(((-1.0)*x2817))+x2815))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2850=IKPowWithIntegerCheck(cj4,-1);
if(!x2850.valid){
continue;
}
IkReal x2820=x2850.value;
IkReal x2821=cj4*cj4;
IkReal x2822=((569.0)*cj4);
IkReal x2823=(cj4*cj5);
IkReal x2824=((0.002)*x2820);
IkReal x2825=(cj4*pz);
IkReal x2826=((685.0)*sj4);
IkReal x2827=(r22*sj4);
IkReal x2828=((2055.0)*sj4);
IkReal x2829=((456.0)*x2827);
IkReal x2830=((6000.0)*x2825);
IkReal x2831=((152.0)*x2827);
IkReal x2832=((2000.0)*x2825);
IkReal x2833=(cj4*r21*sj5);
IkReal x2834=(r22*x2821);
IkReal x2835=(cj4*r20*sj5);
IkReal x2836=((2055.0)*x2834);
IkReal x2837=((465.0)*x2835);
IkReal x2838=((465.0)*r21*x2823);
IkReal x2839=((685.0)*x2834);
IkReal x2840=((155.0)*x2835);
IkReal x2841=((155.0)*r21*x2823);
IkReal x2842=(r20*x2823*x2828);
IkReal x2843=(x2828*x2833);
IkReal x2844=(r20*x2823*x2826);
IkReal x2845=(x2826*x2833);
IkReal x2846=(x2844+x2839+x2831);
IkReal x2847=(x2842+x2836+x2829);
IkReal x2848=(x2843+x2838+x2837+x2830);
IkReal x2849=(x2845+x2840+x2841+x2832);
op[0]=(x2824*(((((-1.0)*x2822))+x2846+(((-1.0)*x2849)))));
op[1]=-0.428;
op[2]=(x2824*(((((-1.0)*x2822))+x2847+(((-1.0)*x2848)))));
op[3]=-0.856;
op[4]=(x2824*((x2847+x2822+(((-1.0)*x2848)))));
op[5]=-0.428;
op[6]=(x2824*((x2846+x2822+(((-1.0)*x2849)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2851=((0.304)*sj0);
IkReal x2852=(cj5*r10);
IkReal x2853=(r11*sj5);
IkReal x2854=(cj0*px);
IkReal x2855=(cj5*r21);
IkReal x2856=(py*sj0);
IkReal x2857=(r20*sj5);
IkReal x2858=(cj4*r22);
IkReal x2859=((0.912)*sj0);
IkReal x2860=((0.912)*cj0);
IkReal x2861=(r01*sj5);
IkReal x2862=(cj5*r00);
IkReal x2863=((0.304)*cj0);
IkReal x2864=((4.0)*x2854);
IkReal x2865=((1.37)*x2855);
IkReal x2866=((1.37)*x2857);
IkReal x2867=((4.0)*x2856);
IkReal x2868=((0.31)*x2858);
IkReal x2869=((0.93)*x2858);
IkReal x2870=((4.11)*x2857);
IkReal x2871=((4.11)*x2855);
IkReal x2872=((12.0)*x2854);
IkReal x2873=((12.0)*x2856);
IkReal x2874=(r21*sj4*sj5);
IkReal x2875=(cj5*r20*sj4);
IkReal x2876=(x2861*x2863);
IkReal x2877=((0.31)*x2875);
IkReal x2878=((0.93)*x2875);
IkReal x2879=(x2860*x2861);
IkReal x2880=(x2853*x2859);
IkReal x2881=(x2851*x2853);
IkReal x2882=(x2851*x2852);
IkReal x2883=(x2862*x2863);
IkReal x2884=((0.31)*x2874);
IkReal x2885=((((0.93)*x2874))+((x2852*x2859))+((x2860*x2862)));
IkReal x2886=(x2882+x2883+x2884);
IkReal x2887=(x2881+x2864+x2865+x2866+x2867+x2868+x2877+x2876);
IkReal x2888=(x2880+x2869+x2873+x2872+x2871+x2870+x2879+x2878);
j1evalpoly[0]=((-0.214)+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.214)+(((-1.0)*x2885))+x2888))))+(((-1.0)*x2886))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+(((-1.0)*x2886))+x2887))))+(((-2.276)*htj1))+x2887+(((-4.552)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.214)+(((-1.0)*x2885))+x2888)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2889=(cj4*r22);
IkReal x2890=((1.0)*cj1);
IkReal x2891=(r20*sj1);
IkReal x2892=(cj5*sj4);
IkReal x2893=(cj5*r21);
IkReal x2894=(r21*sj4*sj5);
if( IKabs((((x2891*x2892))+((cj1*r20*sj5))+(((-1.0)*sj1*x2894))+((sj1*x2889))+((cj1*x2893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x2891))+(((-1.0)*x2889*x2890))+((sj1*x2893))+(((-1.0)*r20*x2890*x2892))+((cj1*x2894)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2891*x2892))+((cj1*r20*sj5))+(((-1.0)*sj1*x2894))+((sj1*x2889))+((cj1*x2893))))+IKsqr((((sj5*x2891))+(((-1.0)*x2889*x2890))+((sj1*x2893))+(((-1.0)*r20*x2890*x2892))+((cj1*x2894))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2891*x2892))+((cj1*r20*sj5))+(((-1.0)*sj1*x2894))+((sj1*x2889))+((cj1*x2893))), (((sj5*x2891))+(((-1.0)*x2889*x2890))+((sj1*x2893))+(((-1.0)*r20*x2890*x2892))+((cj1*x2894))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2895=IKcos(j2);
IkReal x2896=IKsin(j2);
IkReal x2897=(r10*sj0);
IkReal x2898=((0.076)*cj5);
IkReal x2899=(cj0*r00);
IkReal x2900=((0.076)*sj5);
IkReal x2901=(r11*sj0);
IkReal x2902=((1.0)*sj5);
IkReal x2903=((1.0)*cj0);
IkReal x2904=(cj0*r01);
IkReal x2905=((1.0)*sj1);
IkReal x2906=((0.3425)*sj1);
IkReal x2907=(sj4*sj5);
IkReal x2908=((1.0)*sj0);
IkReal x2909=(cj1*x2895);
IkReal x2910=((1.0)*cj5*sj4);
IkReal x2911=(cj1*x2896);
IkReal x2912=(sj1*x2895);
IkReal x2913=(x2896*x2905);
evalcond[0]=((((-1.0)*cj5*r21))+x2911+x2912+(((-1.0)*r20*x2902)));
evalcond[1]=((((-1.0)*r21*sj4*x2902))+((cj4*r22))+((cj5*r20*sj4))+x2909+(((-1.0)*x2913)));
evalcond[2]=(((sj5*x2899))+((sj5*x2897))+((cj5*x2901))+((cj5*x2904))+x2909+(((-1.0)*x2913)));
CheckValue<IkReal> x2914=IKPowWithIntegerCheck(cj4,-1);
if(!x2914.valid){
continue;
}
evalcond[3]=((((0.3425)*x2909))+(((0.0535)*sj1))+(((0.0775)*x2911))+(((0.0775)*x2912))+(((-0.2845)*cj1))+(((-1.0)*x2896*x2906))+pz+(((-0.076)*r22*sj4*(x2914.value))));
evalcond[4]=((((-1.0)*x2899*x2910))+((x2901*x2907))+((x2904*x2907))+(((-1.0)*cj4*r02*x2903))+(((-1.0)*cj4*r12*x2908))+(((-1.0)*x2911))+(((-1.0)*x2897*x2910))+(((-1.0)*x2895*x2905)));
evalcond[5]=((((-1.0)*x2900*x2901))+(((-1.0)*x2900*x2904))+(((0.2845)*sj1))+((x2898*x2899))+(((-1.0)*px*x2903))+(((0.0535)*cj1))+(((0.0775)*x2909))+(((-0.0775)*sj1*x2896))+(((-0.3425)*x2911))+((x2897*x2898))+(((-1.0)*x2895*x2906))+(((-1.0)*py*x2908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2915=(((r21*sj4*sj5))+(((-1.0)*cj5*r20*sj4))+(((-1.0)*cj4*r22)));
j0eval[0]=x2915;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x2915);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2916=(sj4*sj5);
IkReal x2917=((1.0)*cj4);
IkReal x2918=((1.0)*cj5*sj4);
IkReal x2919=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x2919;
j0eval[1]=((IKabs((((r01*x2916))+(((-1.0)*r02*x2917))+(((-1.0)*r00*x2918)))))+(IKabs((((r11*x2916))+(((-1.0)*r10*x2918))+(((-1.0)*r12*x2917))))));
j0eval[2]=IKsign(x2919);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2920=(rxp2_2*sj4);
IkReal x2921=((0.076)*sj5);
IkReal x2922=((0.076)*cj5);
IkReal x2923=(r20*sj4);
IkReal x2924=(r21*sj4);
IkReal x2925=(cj4*rxp1_2*sj5);
IkReal x2926=(cj4*cj5*rxp0_2);
j0eval[0]=((((13.1578947368421)*x2926))+(((-13.1578947368421)*x2925))+(((-13.1578947368421)*x2920))+((cj5*x2924))+((sj5*x2923)));
j0eval[1]=((IKabs((((r10*x2922))+(((-1.0)*py))+(((-1.0)*r11*x2921)))))+(IKabs((((r00*x2922))+(((-1.0)*px))+(((-1.0)*r01*x2921))))));
j0eval[2]=IKsign((((x2921*x2923))+((x2922*x2924))+x2926+(((-1.0)*x2925))+(((-1.0)*x2920))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2927=((-1.0)*r20);
IkReal x2929 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2929)==0){
continue;
}
IkReal x2928=pow(x2929,-0.5);
CheckValue<IkReal> x2930 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2927),IKFAST_ATAN2_MAGTHRESH);
if(!x2930.valid){
continue;
}
IkReal gconst24=((-1.0)*(x2930.value));
IkReal gconst25=(r21*x2928);
IkReal gconst26=(x2927*x2928);
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2931.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x2932=((-1.0)*r20);
IkReal x2933=x2928;
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2932),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
IkReal x2934=((-1.0)*(x2935.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2934;
IkReal gconst24=x2934;
IkReal gconst25=(r21*x2933);
IkReal gconst26=(x2932*x2933);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2936=((-1.0)*r20);
IkReal x2937=x2928;
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2936),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
IkReal x2938=((-1.0)*(x2939.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2938;
IkReal gconst24=x2938;
IkReal gconst25=(r21*x2937);
IkReal gconst26=(x2936*x2937);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x2940=((-1.0)*r20);
IkReal x2941=x2928;
CheckValue<IkReal> x2943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2940),IKFAST_ATAN2_MAGTHRESH);
if(!x2943.valid){
continue;
}
IkReal x2942=((-1.0)*(x2943.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2942;
IkReal gconst24=x2942;
IkReal gconst25=(r21*x2941);
IkReal gconst26=(x2940*x2941);
IkReal x2944=(rxp2_2*sj4);
IkReal x2945=(r21*rxp1_2);
IkReal x2946=(r20*rxp0_2);
IkReal x2947=x2928;
IkReal x2948=(cj4*x2947);
j0eval[0]=((((-13.1578947368421)*x2946*x2948))+(((-13.1578947368421)*x2945*x2948))+(((-13.1578947368421)*x2944)));
j0eval[1]=IKsign(((((-1.0)*x2946*x2948))+(((-1.0)*x2944))+(((-1.0)*x2945*x2948))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2949=((0.076)*gconst25);
IkReal x2950=((0.076)*gconst26);
CheckValue<IkReal> x2951=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*gconst25*rxp1_2))+((cj4*gconst26*rxp0_2))+(((-1.0)*rxp2_2*sj4))+((r20*sj4*x2949))+((r21*sj4*x2950)))),-1);
if(!x2951.valid){
continue;
}
CheckValue<IkReal> x2952 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2949))+((r10*x2950))+(((-1.0)*py)))),IkReal(((((-1.0)*r01*x2949))+((r00*x2950))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2952.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2951.value)))+(x2952.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2953=IKcos(j0);
IkReal x2954=IKsin(j0);
IkReal x2955=(r02*sj4);
IkReal x2956=(r12*sj4);
IkReal x2957=((1.0)*cj4);
IkReal x2958=(cj4*r01);
IkReal x2959=(gconst25*r01);
IkReal x2960=(cj4*gconst25*r11);
IkReal x2961=((1.0)*x2954);
IkReal x2962=(gconst25*x2953);
IkReal x2963=(gconst26*x2953);
IkReal x2964=(r10*x2963);
IkReal x2965=(gconst26*r00*x2954);
IkReal x2966=(r11*x2962);
evalcond[0]=(((r11*x2963))+((r10*x2962))+(((-1.0)*gconst25*r00*x2961))+(((-1.0)*gconst26*r01*x2961)));
evalcond[1]=((((0.076)*x2954*x2959))+(((-1.0)*py*x2953))+(((0.076)*x2964))+((px*x2954))+(((-0.076)*x2966))+(((-0.076)*x2965)));
evalcond[2]=(((x2954*x2956))+((x2954*x2960))+(((-1.0)*r00*x2957*x2963))+((x2953*x2955))+((x2958*x2962))+(((-1.0)*gconst26*r10*x2954*x2957)));
evalcond[3]=(((cj4*r02*x2954))+(((-1.0)*sj4*x2964))+(((-1.0)*sj4*x2959*x2961))+((sj4*x2966))+((sj4*x2965))+(((-1.0)*r12*x2953*x2957)));
evalcond[4]=((1.0)+(((-1.0)*x2957*x2964))+(((-1.0)*x2955*x2961))+((cj4*x2965))+((x2953*x2956))+(((-1.0)*x2954*x2957*x2959))+((x2953*x2960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2967=((-1.0)*r20);
IkReal x2968=x2928;
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2967),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
IkReal x2969=((-1.0)*(x2970.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2969;
IkReal gconst24=x2969;
IkReal gconst25=(r21*x2968);
IkReal gconst26=(x2967*x2968);
CheckValue<IkReal> x3006=IKPowWithIntegerCheck(cj4,-1);
if(!x3006.valid){
continue;
}
IkReal x2971=x3006.value;
IkReal x2972=((6000.0)*pz);
IkReal x2973=((2000.0)*pz);
IkReal x2974=(gconst25*sj4);
IkReal x2975=((465.0)*cj4);
IkReal x2976=(r12*sj0);
IkReal x2977=(gconst26*sj4);
IkReal x2978=(r10*sj0);
IkReal x2979=(cj0*r02);
IkReal x2980=(cj0*r00);
IkReal x2981=(cj4*r22);
IkReal x2982=(cj0*r01);
IkReal x2983=((155.0)*cj4);
IkReal x2984=(gconst26*r21);
IkReal x2985=(r11*sj0);
IkReal x2986=(gconst25*r20);
IkReal x2987=((2055.0)*x2981);
IkReal x2988=((685.0)*x2981);
IkReal x2989=(r22*sj4*x2971);
IkReal x2990=((2055.0)*r21*x2974);
IkReal x2991=((2055.0)*r20*x2977);
IkReal x2992=((456.0)*x2989);
IkReal x2993=((685.0)*r21*x2974);
IkReal x2994=((152.0)*x2989);
IkReal x2995=((685.0)*r20*x2977);
IkReal x2996=((465.0)*x2974*x2985);
IkReal x2997=((465.0)*x2974*x2982);
IkReal x2998=((569.0)+x2993+x2973);
IkReal x2999=((-569.0)+x2990+x2972);
IkReal x3000=((569.0)+x2990+x2972);
IkReal x3001=(x2996+x2997);
IkReal x3002=(x2987+x2991+x2992);
IkReal x3003=(x2988+x2994+x2995);
IkReal x3004=(x3002+(((465.0)*x2984))+(((465.0)*x2986)));
IkReal x3005=(x3002+((x2975*x2979))+((x2975*x2976))+(((465.0)*x2977*x2980))+(((465.0)*x2977*x2978)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((((-155.0)*x2977*x2980))+(((-1.0)*x2979*x2983))+(((-1.0)*x2976*x2983))+(((-1.0)*x3003))+(((155.0)*x2974*x2985))+(((155.0)*x2974*x2982))+(((-155.0)*x2977*x2978))+x2998)))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x2984))+(((-155.0)*x2986))+(((-1.0)*x3003))+x2998)))))+(((0.00058411214953271)*(IKabs((x3001+(((-1.0)*x3005))+x2999)))))+(((0.00058411214953271)*(IKabs((x3001+x3000+(((-1.0)*x3005)))))))+(((0.00058411214953271)*(IKabs((x3000+(((-1.0)*x3004)))))))+(((0.00058411214953271)*(IKabs(((((-1.0)*x3004))+x2999))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3037=IKPowWithIntegerCheck(cj4,-1);
if(!x3037.valid){
continue;
}
IkReal x3007=x3037.value;
IkReal x3008=((569.0)*cj4);
IkReal x3009=cj4*cj4;
IkReal x3010=(cj4*r20);
IkReal x3011=((2055.0)*sj4);
IkReal x3012=(cj4*pz);
IkReal x3013=((685.0)*sj4);
IkReal x3014=((0.002)*x3007);
IkReal x3015=(r22*sj4);
IkReal x3016=((6000.0)*x3012);
IkReal x3017=((456.0)*x3015);
IkReal x3018=((2000.0)*x3012);
IkReal x3019=((152.0)*x3015);
IkReal x3020=(cj4*gconst25*r21);
IkReal x3021=(r22*x3009);
IkReal x3022=(cj4*gconst26*r21);
IkReal x3023=((2055.0)*x3021);
IkReal x3024=((465.0)*gconst25*x3010);
IkReal x3025=((465.0)*x3022);
IkReal x3026=((155.0)*gconst25*x3010);
IkReal x3027=((155.0)*x3022);
IkReal x3028=((685.0)*x3021);
IkReal x3029=(x3011*x3020);
IkReal x3030=(gconst26*x3010*x3011);
IkReal x3031=(x3013*x3020);
IkReal x3032=(gconst26*x3010*x3013);
IkReal x3033=(x3016+x3029);
IkReal x3034=(x3018+x3031);
IkReal x3035=(x3019+x3032+x3028+x3027+x3026);
IkReal x3036=(x3017+x3030+x3025+x3024+x3023);
op[0]=(x3014*((x3008+x3034+(((-1.0)*x3035)))));
op[1]=0.428;
op[2]=(x3014*((x3008+x3033+(((-1.0)*x3036)))));
op[3]=0.856;
op[4]=(x3014*((x3033+(((-1.0)*x3008))+(((-1.0)*x3036)))));
op[5]=0.428;
op[6]=(x3014*((x3034+(((-1.0)*x3008))+(((-1.0)*x3035)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3038=cj4*cj4;
CheckValue<IkReal> x3082=IKPowWithIntegerCheck(cj4,-1);
if(!x3082.valid){
continue;
}
IkReal x3039=x3082.value;
IkReal x3040=((569.0)*cj4);
IkReal x3041=((0.002)*x3039);
IkReal x3042=(r22*sj4);
IkReal x3043=(gconst25*r01);
IkReal x3044=(gconst26*r00);
IkReal x3045=(cj4*pz);
IkReal x3046=(cj4*sj4);
IkReal x3047=(gconst25*r21);
IkReal x3048=(gconst26*r20);
IkReal x3049=((6000.0)*x3045);
IkReal x3050=((456.0)*x3042);
IkReal x3051=((2000.0)*x3045);
IkReal x3052=((152.0)*x3042);
IkReal x3053=(r22*x3038);
IkReal x3054=((465.0)*x3046);
IkReal x3055=(gconst25*r11*sj0);
IkReal x3056=(gconst26*r10*sj0);
IkReal x3057=((2055.0)*x3053);
IkReal x3058=((685.0)*x3053);
IkReal x3059=(r12*sj0*x3038);
IkReal x3060=((155.0)*cj0*x3046);
IkReal x3061=(cj0*r02*x3038);
IkReal x3062=((2055.0)*x3046*x3047);
IkReal x3063=((465.0)*x3059);
IkReal x3064=((465.0)*x3061);
IkReal x3065=((2055.0)*x3046*x3048);
IkReal x3066=((685.0)*x3046*x3047);
IkReal x3067=((155.0)*x3061);
IkReal x3068=((155.0)*x3059);
IkReal x3069=((685.0)*x3046*x3048);
IkReal x3070=(x3054*x3055);
IkReal x3071=(cj0*x3043*x3054);
IkReal x3072=(cj0*x3044*x3054);
IkReal x3073=(x3054*x3056);
IkReal x3074=(x3043*x3060);
IkReal x3075=((155.0)*x3046*x3055);
IkReal x3076=((155.0)*x3046*x3056);
IkReal x3077=(x3044*x3060);
IkReal x3078=(x3074+x3075+x3066+x3051);
IkReal x3079=(x3049+x3070+x3071+x3062);
IkReal x3080=(x3072+x3073+x3063+x3065+x3064+x3057+x3050);
IkReal x3081=(x3076+x3077+x3067+x3069+x3068+x3058+x3052);
j1evalpoly[0]=(((x3041*(((((-1.0)*x3081))+x3078+(((-1.0)*x3040))))))+(((0.428)*htj1))+((x3041*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3081))+x3040+x3078))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3041*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3080))+x3040+x3079))))+((x3041*(htj1*htj1)*(((((-1.0)*x3080))+x3079+(((-1.0)*x3040)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3083=((1.0)*cj1);
IkReal x3084=(cj4*r22);
IkReal x3085=(r20*sj1);
IkReal x3086=(gconst26*sj4);
IkReal x3087=((1.0)*gconst25);
IkReal x3088=(r21*sj4);
IkReal x3089=(gconst26*r21);
if( IKabs((((sj1*x3084))+(((-1.0)*x3083*x3089))+(((-1.0)*sj1*x3087*x3088))+(((-1.0)*gconst25*r20*x3083))+((x3085*x3086)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*gconst25*x3088))+(((-1.0)*x3083*x3084))+(((-1.0)*sj1*x3089))+(((-1.0)*r20*x3083*x3086))+(((-1.0)*x3085*x3087)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3084))+(((-1.0)*x3083*x3089))+(((-1.0)*sj1*x3087*x3088))+(((-1.0)*gconst25*r20*x3083))+((x3085*x3086))))+IKsqr((((cj1*gconst25*x3088))+(((-1.0)*x3083*x3084))+(((-1.0)*sj1*x3089))+(((-1.0)*r20*x3083*x3086))+(((-1.0)*x3085*x3087))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3084))+(((-1.0)*x3083*x3089))+(((-1.0)*sj1*x3087*x3088))+(((-1.0)*gconst25*r20*x3083))+((x3085*x3086))), (((cj1*gconst25*x3088))+(((-1.0)*x3083*x3084))+(((-1.0)*sj1*x3089))+(((-1.0)*r20*x3083*x3086))+(((-1.0)*x3085*x3087))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3090=IKcos(j2);
IkReal x3091=IKsin(j2);
IkReal x3092=(sj0*sj4);
IkReal x3093=(gconst25*r11);
IkReal x3094=(gconst26*r10);
IkReal x3095=((0.076)*sj0);
IkReal x3096=(gconst26*sj4);
IkReal x3097=((1.0)*r21);
IkReal x3098=((1.0)*cj0);
IkReal x3099=(cj0*gconst26);
IkReal x3100=((1.0)*sj1);
IkReal x3101=((1.0)*sj0);
IkReal x3102=(gconst25*sj4);
IkReal x3103=(cj0*r01);
IkReal x3104=(cj1*x3090);
IkReal x3105=(cj1*x3091);
IkReal x3106=(sj1*x3090);
IkReal x3107=(sj1*x3091);
IkReal x3108=(x3090*x3100);
IkReal x3109=((1.0)*x3105);
IkReal x3110=(x3108+x3109);
evalcond[0]=((((-1.0)*gconst26*x3097))+(((-1.0)*x3110))+(((-1.0)*gconst25*r20)));
evalcond[1]=(x3104+((cj4*r22))+(((-1.0)*x3091*x3100))+((r20*x3096))+(((-1.0)*x3097*x3102)));
evalcond[2]=(((r01*x3099))+x3107+((gconst26*r11*sj0))+((cj0*gconst25*r00))+((gconst25*r10*sj0))+(((-1.0)*x3104)));
CheckValue<IkReal> x3111=IKPowWithIntegerCheck(cj4,-1);
if(!x3111.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x3106))+(((0.0775)*x3105))+(((-0.3425)*x3107))+pz+(((0.3425)*x3104))+(((-0.076)*r22*sj4*(x3111.value))));
evalcond[4]=((((-1.0)*cj4*r12*x3101))+(((-1.0)*r00*x3096*x3098))+(((-1.0)*x3092*x3094))+((x3092*x3093))+(((-1.0)*x3110))+(((-1.0)*cj4*r02*x3098))+((x3102*x3103)));
evalcond[5]=((((-1.0)*px*x3098))+(((0.2845)*sj1))+(((0.0775)*x3104))+(((-1.0)*py*x3101))+(((0.0535)*cj1))+(((-0.0775)*x3107))+(((-0.3425)*x3106))+(((-0.3425)*x3105))+(((-1.0)*x3093*x3095))+(((0.076)*r00*x3099))+(((-0.076)*gconst25*x3103))+((x3094*x3095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3112=((1.0)*cj4);
CheckValue<IkReal> x3113 = IKatan2WithCheck(IkReal((((gconst25*r10))+((gconst26*r11)))),IkReal((((gconst26*r01))+((gconst25*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3113.valid){
continue;
}
CheckValue<IkReal> x3114=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r20*sj4))+((gconst25*r21*sj4))+((r22*(((((-1.0)*x3112*(gconst25*gconst25)))+(((-1.0)*x3112*(gconst26*gconst26))))))))),-1);
if(!x3114.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3113.value)+(((1.5707963267949)*(x3114.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3115=IKcos(j0);
IkReal x3116=IKsin(j0);
IkReal x3117=(r02*sj4);
IkReal x3118=(r12*sj4);
IkReal x3119=((1.0)*cj4);
IkReal x3120=(cj4*r01);
IkReal x3121=(gconst25*r01);
IkReal x3122=(cj4*gconst25*r11);
IkReal x3123=((1.0)*x3116);
IkReal x3124=(gconst25*x3115);
IkReal x3125=(gconst26*x3115);
IkReal x3126=(r10*x3125);
IkReal x3127=(gconst26*r00*x3116);
IkReal x3128=(r11*x3124);
evalcond[0]=((((-1.0)*gconst25*r00*x3123))+((r10*x3124))+((r11*x3125))+(((-1.0)*gconst26*r01*x3123)));
evalcond[1]=((((0.076)*x3126))+(((0.076)*x3116*x3121))+(((-1.0)*py*x3115))+(((-0.076)*x3128))+(((-0.076)*x3127))+((px*x3116)));
evalcond[2]=(((x3116*x3122))+((x3120*x3124))+(((-1.0)*gconst26*r10*x3116*x3119))+(((-1.0)*r00*x3119*x3125))+((x3116*x3118))+((x3115*x3117)));
evalcond[3]=(((sj4*x3127))+((sj4*x3128))+(((-1.0)*sj4*x3121*x3123))+((cj4*r02*x3116))+(((-1.0)*sj4*x3126))+(((-1.0)*r12*x3115*x3119)));
evalcond[4]=((1.0)+((x3115*x3122))+(((-1.0)*x3117*x3123))+((cj4*x3127))+(((-1.0)*x3119*x3126))+(((-1.0)*x3116*x3119*x3121))+((x3115*x3118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3129=((-1.0)*r20);
IkReal x3130=x2928;
CheckValue<IkReal> x3132 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3129),IKFAST_ATAN2_MAGTHRESH);
if(!x3132.valid){
continue;
}
IkReal x3131=((-1.0)*(x3132.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x3131;
IkReal gconst24=x3131;
IkReal gconst25=(r21*x3130);
IkReal gconst26=(x3129*x3130);
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(cj4,-1);
if(!x3168.valid){
continue;
}
IkReal x3133=x3168.value;
IkReal x3134=((6000.0)*pz);
IkReal x3135=((2000.0)*pz);
IkReal x3136=(gconst25*sj4);
IkReal x3137=((465.0)*cj4);
IkReal x3138=(r12*sj0);
IkReal x3139=(gconst26*sj4);
IkReal x3140=(r10*sj0);
IkReal x3141=(cj0*r02);
IkReal x3142=(cj0*r00);
IkReal x3143=(cj4*r22);
IkReal x3144=(cj0*r01);
IkReal x3145=((155.0)*cj4);
IkReal x3146=(gconst26*r21);
IkReal x3147=(r11*sj0);
IkReal x3148=(gconst25*r20);
IkReal x3149=((2055.0)*x3143);
IkReal x3150=((685.0)*x3143);
IkReal x3151=(r22*sj4*x3133);
IkReal x3152=((2055.0)*r21*x3136);
IkReal x3153=((2055.0)*r20*x3139);
IkReal x3154=((456.0)*x3151);
IkReal x3155=((685.0)*r21*x3136);
IkReal x3156=((152.0)*x3151);
IkReal x3157=((685.0)*r20*x3139);
IkReal x3158=((465.0)*x3136*x3147);
IkReal x3159=((465.0)*x3136*x3144);
IkReal x3160=((569.0)+x3155+x3135);
IkReal x3161=((-569.0)+x3152+x3134);
IkReal x3162=((569.0)+x3152+x3134);
IkReal x3163=(x3159+x3158);
IkReal x3164=(x3149+x3153+x3154);
IkReal x3165=(x3150+x3157+x3156);
IkReal x3166=(x3164+(((465.0)*x3148))+(((465.0)*x3146)));
IkReal x3167=(x3164+(((465.0)*x3139*x3142))+(((465.0)*x3139*x3140))+((x3137*x3138))+((x3137*x3141)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs((x3162+(((-1.0)*x3166)))))))+(((0.00058411214953271)*(IKabs((x3161+(((-1.0)*x3166)))))))+(((0.00058411214953271)*(IKabs((x3160+(((-155.0)*x3148))+(((-155.0)*x3146))+(((-1.0)*x3165)))))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x3139*x3140))+(((-155.0)*x3139*x3142))+x3160+(((155.0)*x3136*x3147))+(((155.0)*x3136*x3144))+(((-1.0)*x3141*x3145))+(((-1.0)*x3138*x3145))+(((-1.0)*x3165)))))))+(((0.00058411214953271)*(IKabs((x3162+x3163+(((-1.0)*x3167)))))))+(((0.00058411214953271)*(IKabs((x3163+x3161+(((-1.0)*x3167))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3199=IKPowWithIntegerCheck(cj4,-1);
if(!x3199.valid){
continue;
}
IkReal x3169=x3199.value;
IkReal x3170=((569.0)*cj4);
IkReal x3171=cj4*cj4;
IkReal x3172=(cj4*r20);
IkReal x3173=((2055.0)*sj4);
IkReal x3174=(cj4*pz);
IkReal x3175=((685.0)*sj4);
IkReal x3176=((0.002)*x3169);
IkReal x3177=(r22*sj4);
IkReal x3178=((6000.0)*x3174);
IkReal x3179=((456.0)*x3177);
IkReal x3180=((2000.0)*x3174);
IkReal x3181=((152.0)*x3177);
IkReal x3182=(cj4*gconst25*r21);
IkReal x3183=(r22*x3171);
IkReal x3184=(cj4*gconst26*r21);
IkReal x3185=((2055.0)*x3183);
IkReal x3186=((465.0)*gconst25*x3172);
IkReal x3187=((465.0)*x3184);
IkReal x3188=((155.0)*gconst25*x3172);
IkReal x3189=((155.0)*x3184);
IkReal x3190=((685.0)*x3183);
IkReal x3191=(x3173*x3182);
IkReal x3192=(gconst26*x3172*x3173);
IkReal x3193=(x3175*x3182);
IkReal x3194=(gconst26*x3172*x3175);
IkReal x3195=(x3191+x3178);
IkReal x3196=(x3180+x3193);
IkReal x3197=(x3181+x3188+x3189+x3194+x3190);
IkReal x3198=(x3185+x3186+x3187+x3192+x3179);
op[0]=(x3176*((x3196+x3170+(((-1.0)*x3197)))));
op[1]=0.428;
op[2]=(x3176*((x3195+x3170+(((-1.0)*x3198)))));
op[3]=0.856;
op[4]=(x3176*((x3195+(((-1.0)*x3170))+(((-1.0)*x3198)))));
op[5]=0.428;
op[6]=(x3176*((x3196+(((-1.0)*x3170))+(((-1.0)*x3197)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3200=cj4*cj4;
CheckValue<IkReal> x3244=IKPowWithIntegerCheck(cj4,-1);
if(!x3244.valid){
continue;
}
IkReal x3201=x3244.value;
IkReal x3202=((569.0)*cj4);
IkReal x3203=((0.002)*x3201);
IkReal x3204=(r22*sj4);
IkReal x3205=(gconst25*r01);
IkReal x3206=(gconst26*r00);
IkReal x3207=(cj4*pz);
IkReal x3208=(cj4*sj4);
IkReal x3209=(gconst25*r21);
IkReal x3210=(gconst26*r20);
IkReal x3211=((6000.0)*x3207);
IkReal x3212=((456.0)*x3204);
IkReal x3213=((2000.0)*x3207);
IkReal x3214=((152.0)*x3204);
IkReal x3215=(r22*x3200);
IkReal x3216=((465.0)*x3208);
IkReal x3217=(gconst25*r11*sj0);
IkReal x3218=(gconst26*r10*sj0);
IkReal x3219=((2055.0)*x3215);
IkReal x3220=((685.0)*x3215);
IkReal x3221=(r12*sj0*x3200);
IkReal x3222=((155.0)*cj0*x3208);
IkReal x3223=(cj0*r02*x3200);
IkReal x3224=((2055.0)*x3208*x3209);
IkReal x3225=((465.0)*x3221);
IkReal x3226=((465.0)*x3223);
IkReal x3227=((2055.0)*x3208*x3210);
IkReal x3228=((685.0)*x3208*x3209);
IkReal x3229=((155.0)*x3223);
IkReal x3230=((155.0)*x3221);
IkReal x3231=((685.0)*x3208*x3210);
IkReal x3232=(x3216*x3217);
IkReal x3233=(cj0*x3205*x3216);
IkReal x3234=(cj0*x3206*x3216);
IkReal x3235=(x3216*x3218);
IkReal x3236=(x3205*x3222);
IkReal x3237=((155.0)*x3208*x3217);
IkReal x3238=((155.0)*x3208*x3218);
IkReal x3239=(x3206*x3222);
IkReal x3240=(x3213+x3236+x3237+x3228);
IkReal x3241=(x3211+x3232+x3233+x3224);
IkReal x3242=(x3212+x3219+x3234+x3235+x3225+x3227+x3226);
IkReal x3243=(x3214+x3230+x3231+x3238+x3239+x3229+x3220);
j1evalpoly[0]=((((0.428)*htj1))+((x3203*((x3240+(((-1.0)*x3243))+(((-1.0)*x3202))))))+((x3203*(htj1*htj1)*((x3241+(((-1.0)*x3242))+(((-1.0)*x3202))))))+((x3203*(htj1*htj1*htj1*htj1)*((x3241+x3202+(((-1.0)*x3242))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3203*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3240+x3202+(((-1.0)*x3243)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3245=((1.0)*cj1);
IkReal x3246=(cj4*r22);
IkReal x3247=(r20*sj1);
IkReal x3248=(gconst26*sj4);
IkReal x3249=((1.0)*gconst25);
IkReal x3250=(r21*sj4);
IkReal x3251=(gconst26*r21);
if( IKabs(((((-1.0)*sj1*x3249*x3250))+((sj1*x3246))+(((-1.0)*x3245*x3251))+(((-1.0)*gconst25*r20*x3245))+((x3247*x3248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*gconst25*x3250))+(((-1.0)*sj1*x3251))+(((-1.0)*r20*x3245*x3248))+(((-1.0)*x3245*x3246))+(((-1.0)*x3247*x3249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x3249*x3250))+((sj1*x3246))+(((-1.0)*x3245*x3251))+(((-1.0)*gconst25*r20*x3245))+((x3247*x3248))))+IKsqr((((cj1*gconst25*x3250))+(((-1.0)*sj1*x3251))+(((-1.0)*r20*x3245*x3248))+(((-1.0)*x3245*x3246))+(((-1.0)*x3247*x3249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x3249*x3250))+((sj1*x3246))+(((-1.0)*x3245*x3251))+(((-1.0)*gconst25*r20*x3245))+((x3247*x3248))), (((cj1*gconst25*x3250))+(((-1.0)*sj1*x3251))+(((-1.0)*r20*x3245*x3248))+(((-1.0)*x3245*x3246))+(((-1.0)*x3247*x3249))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3252=IKcos(j2);
IkReal x3253=IKsin(j2);
IkReal x3254=(sj0*sj4);
IkReal x3255=(gconst25*r11);
IkReal x3256=(gconst26*r10);
IkReal x3257=((0.076)*sj0);
IkReal x3258=(gconst26*sj4);
IkReal x3259=((1.0)*r21);
IkReal x3260=((1.0)*cj0);
IkReal x3261=(cj0*gconst26);
IkReal x3262=((1.0)*sj1);
IkReal x3263=((1.0)*sj0);
IkReal x3264=(gconst25*sj4);
IkReal x3265=(cj0*r01);
IkReal x3266=(cj1*x3252);
IkReal x3267=(cj1*x3253);
IkReal x3268=(sj1*x3252);
IkReal x3269=(sj1*x3253);
IkReal x3270=(x3252*x3262);
IkReal x3271=((1.0)*x3267);
IkReal x3272=(x3270+x3271);
evalcond[0]=((((-1.0)*x3272))+(((-1.0)*gconst26*x3259))+(((-1.0)*gconst25*r20)));
evalcond[1]=(((cj4*r22))+x3266+(((-1.0)*x3253*x3262))+((r20*x3258))+(((-1.0)*x3259*x3264)));
evalcond[2]=(((gconst26*r11*sj0))+((r01*x3261))+(((-1.0)*x3266))+((cj0*gconst25*r00))+x3269+((gconst25*r10*sj0)));
CheckValue<IkReal> x3273=IKPowWithIntegerCheck(cj4,-1);
if(!x3273.valid){
continue;
}
evalcond[3]=((((0.3425)*x3266))+(((0.0535)*sj1))+(((0.0775)*x3267))+(((0.0775)*x3268))+(((-0.2845)*cj1))+pz+(((-0.3425)*x3269))+(((-0.076)*r22*sj4*(x3273.value))));
evalcond[4]=((((-1.0)*r00*x3258*x3260))+(((-1.0)*x3272))+(((-1.0)*cj4*r12*x3263))+(((-1.0)*x3254*x3256))+((x3254*x3255))+(((-1.0)*cj4*r02*x3260))+((x3264*x3265)));
evalcond[5]=((((-1.0)*px*x3260))+(((0.076)*r00*x3261))+(((-0.076)*gconst25*x3265))+(((0.2845)*sj1))+(((0.0775)*x3266))+(((0.0535)*cj1))+((x3256*x3257))+(((-1.0)*py*x3263))+(((-0.3425)*x3267))+(((-0.3425)*x3268))+(((-0.0775)*x3269))+(((-1.0)*x3255*x3257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3274=((1.0)*gconst26);
IkReal x3275=(gconst25*sj4);
IkReal x3276=((1.0)*cj4);
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3274))+(((-1.0)*gconst25*r20)))),-1);
if(!x3277.valid){
continue;
}
CheckValue<IkReal> x3278 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3276))+((r11*x3275))+(((-1.0)*r10*sj4*x3274)))),IkReal((((r01*x3275))+(((-1.0)*r00*sj4*x3274))+(((-1.0)*r02*x3276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3278.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3277.value)))+(x3278.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3279=IKcos(j0);
IkReal x3280=IKsin(j0);
IkReal x3281=(r02*sj4);
IkReal x3282=(r12*sj4);
IkReal x3283=((1.0)*cj4);
IkReal x3284=(cj4*r01);
IkReal x3285=(gconst25*r01);
IkReal x3286=(cj4*gconst25*r11);
IkReal x3287=((1.0)*x3280);
IkReal x3288=(gconst25*x3279);
IkReal x3289=(gconst26*x3279);
IkReal x3290=(r10*x3289);
IkReal x3291=(gconst26*r00*x3280);
IkReal x3292=(r11*x3288);
evalcond[0]=((((-1.0)*gconst25*r00*x3287))+(((-1.0)*gconst26*r01*x3287))+((r10*x3288))+((r11*x3289)));
evalcond[1]=((((0.076)*x3280*x3285))+(((0.076)*x3290))+(((-0.076)*x3291))+(((-0.076)*x3292))+((px*x3280))+(((-1.0)*py*x3279)));
evalcond[2]=(((x3279*x3281))+(((-1.0)*gconst26*r10*x3280*x3283))+(((-1.0)*r00*x3283*x3289))+((x3280*x3286))+((x3280*x3282))+((x3284*x3288)));
evalcond[3]=((((-1.0)*sj4*x3290))+(((-1.0)*sj4*x3285*x3287))+(((-1.0)*r12*x3279*x3283))+((sj4*x3292))+((sj4*x3291))+((cj4*r02*x3280)));
evalcond[4]=((1.0)+((x3279*x3282))+((x3279*x3286))+(((-1.0)*x3280*x3283*x3285))+(((-1.0)*x3281*x3287))+((cj4*x3291))+(((-1.0)*x3283*x3290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3293=((-1.0)*r20);
IkReal x3294=x2928;
CheckValue<IkReal> x3296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3293),IKFAST_ATAN2_MAGTHRESH);
if(!x3296.valid){
continue;
}
IkReal x3295=((-1.0)*(x3296.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x3295;
IkReal gconst24=x3295;
IkReal gconst25=(r21*x3294);
IkReal gconst26=(x3293*x3294);
CheckValue<IkReal> x3332=IKPowWithIntegerCheck(cj4,-1);
if(!x3332.valid){
continue;
}
IkReal x3297=x3332.value;
IkReal x3298=((6000.0)*pz);
IkReal x3299=((2000.0)*pz);
IkReal x3300=(gconst25*sj4);
IkReal x3301=((465.0)*cj4);
IkReal x3302=(r12*sj0);
IkReal x3303=(gconst26*sj4);
IkReal x3304=(r10*sj0);
IkReal x3305=(cj0*r02);
IkReal x3306=(cj0*r00);
IkReal x3307=(cj4*r22);
IkReal x3308=(cj0*r01);
IkReal x3309=((155.0)*cj4);
IkReal x3310=(gconst26*r21);
IkReal x3311=(r11*sj0);
IkReal x3312=(gconst25*r20);
IkReal x3313=((2055.0)*x3307);
IkReal x3314=((685.0)*x3307);
IkReal x3315=(r22*sj4*x3297);
IkReal x3316=((2055.0)*r21*x3300);
IkReal x3317=((2055.0)*r20*x3303);
IkReal x3318=((456.0)*x3315);
IkReal x3319=((685.0)*r21*x3300);
IkReal x3320=((152.0)*x3315);
IkReal x3321=((685.0)*r20*x3303);
IkReal x3322=((465.0)*x3300*x3311);
IkReal x3323=((465.0)*x3300*x3308);
IkReal x3324=((569.0)+x3319+x3299);
IkReal x3325=((-569.0)+x3316+x3298);
IkReal x3326=((569.0)+x3316+x3298);
IkReal x3327=(x3322+x3323);
IkReal x3328=(x3318+x3313+x3317);
IkReal x3329=(x3320+x3321+x3314);
IkReal x3330=((((465.0)*x3312))+(((465.0)*x3310))+x3328);
IkReal x3331=(x3328+((x3301*x3305))+((x3301*x3302))+(((465.0)*x3303*x3306))+(((465.0)*x3303*x3304)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((((-1.0)*x3329))+x3324+(((-1.0)*x3305*x3309))+(((-1.0)*x3302*x3309))+(((-155.0)*x3303*x3306))+(((-155.0)*x3303*x3304))+(((155.0)*x3300*x3308))+(((155.0)*x3300*x3311)))))))+(((0.00058411214953271)*(IKabs((x3325+(((-1.0)*x3330)))))))+(((0.00058411214953271)*(IKabs(((((-1.0)*x3329))+x3324+(((-155.0)*x3312))+(((-155.0)*x3310)))))))+(((0.00058411214953271)*(IKabs((x3325+x3327+(((-1.0)*x3331)))))))+(((0.00058411214953271)*(IKabs((x3326+x3327+(((-1.0)*x3331)))))))+(((0.00058411214953271)*(IKabs((x3326+(((-1.0)*x3330))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3363=IKPowWithIntegerCheck(cj4,-1);
if(!x3363.valid){
continue;
}
IkReal x3333=x3363.value;
IkReal x3334=((569.0)*cj4);
IkReal x3335=cj4*cj4;
IkReal x3336=(cj4*r20);
IkReal x3337=((2055.0)*sj4);
IkReal x3338=(cj4*pz);
IkReal x3339=((685.0)*sj4);
IkReal x3340=((0.002)*x3333);
IkReal x3341=(r22*sj4);
IkReal x3342=((6000.0)*x3338);
IkReal x3343=((456.0)*x3341);
IkReal x3344=((2000.0)*x3338);
IkReal x3345=((152.0)*x3341);
IkReal x3346=(cj4*gconst25*r21);
IkReal x3347=(r22*x3335);
IkReal x3348=(cj4*gconst26*r21);
IkReal x3349=((2055.0)*x3347);
IkReal x3350=((465.0)*gconst25*x3336);
IkReal x3351=((465.0)*x3348);
IkReal x3352=((155.0)*gconst25*x3336);
IkReal x3353=((155.0)*x3348);
IkReal x3354=((685.0)*x3347);
IkReal x3355=(x3337*x3346);
IkReal x3356=(gconst26*x3336*x3337);
IkReal x3357=(x3339*x3346);
IkReal x3358=(gconst26*x3336*x3339);
IkReal x3359=(x3342+x3355);
IkReal x3360=(x3344+x3357);
IkReal x3361=(x3345+x3354+x3353+x3352+x3358);
IkReal x3362=(x3349+x3343+x3356+x3351+x3350);
op[0]=(x3340*((x3360+x3334+(((-1.0)*x3361)))));
op[1]=0.428;
op[2]=(x3340*((x3359+x3334+(((-1.0)*x3362)))));
op[3]=0.856;
op[4]=(x3340*((x3359+(((-1.0)*x3362))+(((-1.0)*x3334)))));
op[5]=0.428;
op[6]=(x3340*((x3360+(((-1.0)*x3361))+(((-1.0)*x3334)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3364=cj4*cj4;
CheckValue<IkReal> x3408=IKPowWithIntegerCheck(cj4,-1);
if(!x3408.valid){
continue;
}
IkReal x3365=x3408.value;
IkReal x3366=((569.0)*cj4);
IkReal x3367=((0.002)*x3365);
IkReal x3368=(r22*sj4);
IkReal x3369=(gconst25*r01);
IkReal x3370=(gconst26*r00);
IkReal x3371=(cj4*pz);
IkReal x3372=(cj4*sj4);
IkReal x3373=(gconst25*r21);
IkReal x3374=(gconst26*r20);
IkReal x3375=((6000.0)*x3371);
IkReal x3376=((456.0)*x3368);
IkReal x3377=((2000.0)*x3371);
IkReal x3378=((152.0)*x3368);
IkReal x3379=(r22*x3364);
IkReal x3380=((465.0)*x3372);
IkReal x3381=(gconst25*r11*sj0);
IkReal x3382=(gconst26*r10*sj0);
IkReal x3383=((2055.0)*x3379);
IkReal x3384=((685.0)*x3379);
IkReal x3385=(r12*sj0*x3364);
IkReal x3386=((155.0)*cj0*x3372);
IkReal x3387=(cj0*r02*x3364);
IkReal x3388=((2055.0)*x3372*x3373);
IkReal x3389=((465.0)*x3385);
IkReal x3390=((465.0)*x3387);
IkReal x3391=((2055.0)*x3372*x3374);
IkReal x3392=((685.0)*x3372*x3373);
IkReal x3393=((155.0)*x3387);
IkReal x3394=((155.0)*x3385);
IkReal x3395=((685.0)*x3372*x3374);
IkReal x3396=(x3380*x3381);
IkReal x3397=(cj0*x3369*x3380);
IkReal x3398=(cj0*x3370*x3380);
IkReal x3399=(x3380*x3382);
IkReal x3400=(x3369*x3386);
IkReal x3401=((155.0)*x3372*x3381);
IkReal x3402=((155.0)*x3372*x3382);
IkReal x3403=(x3370*x3386);
IkReal x3404=(x3377+x3392+x3401+x3400);
IkReal x3405=(x3375+x3388+x3397+x3396);
IkReal x3406=(x3376+x3383+x3389+x3391+x3390+x3399+x3398);
IkReal x3407=(x3378+x3384+x3393+x3395+x3394+x3403+x3402);
j1evalpoly[0]=(((x3367*(htj1*htj1)*(((((-1.0)*x3366))+x3405+(((-1.0)*x3406))))))+(((0.428)*htj1))+((x3367*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3366+x3404+(((-1.0)*x3407))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3367*(((((-1.0)*x3366))+x3404+(((-1.0)*x3407))))))+((x3367*(htj1*htj1*htj1*htj1)*((x3366+x3405+(((-1.0)*x3406)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3409=((1.0)*cj1);
IkReal x3410=(cj4*r22);
IkReal x3411=(r20*sj1);
IkReal x3412=(gconst26*sj4);
IkReal x3413=((1.0)*gconst25);
IkReal x3414=(r21*sj4);
IkReal x3415=(gconst26*r21);
if( IKabs((((x3411*x3412))+((sj1*x3410))+(((-1.0)*gconst25*r20*x3409))+(((-1.0)*sj1*x3413*x3414))+(((-1.0)*x3409*x3415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3411*x3413))+(((-1.0)*x3409*x3410))+((cj1*gconst25*x3414))+(((-1.0)*sj1*x3415))+(((-1.0)*r20*x3409*x3412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3411*x3412))+((sj1*x3410))+(((-1.0)*gconst25*r20*x3409))+(((-1.0)*sj1*x3413*x3414))+(((-1.0)*x3409*x3415))))+IKsqr(((((-1.0)*x3411*x3413))+(((-1.0)*x3409*x3410))+((cj1*gconst25*x3414))+(((-1.0)*sj1*x3415))+(((-1.0)*r20*x3409*x3412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3411*x3412))+((sj1*x3410))+(((-1.0)*gconst25*r20*x3409))+(((-1.0)*sj1*x3413*x3414))+(((-1.0)*x3409*x3415))), ((((-1.0)*x3411*x3413))+(((-1.0)*x3409*x3410))+((cj1*gconst25*x3414))+(((-1.0)*sj1*x3415))+(((-1.0)*r20*x3409*x3412))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3416=IKcos(j2);
IkReal x3417=IKsin(j2);
IkReal x3418=(sj0*sj4);
IkReal x3419=(gconst25*r11);
IkReal x3420=(gconst26*r10);
IkReal x3421=((0.076)*sj0);
IkReal x3422=(gconst26*sj4);
IkReal x3423=((1.0)*r21);
IkReal x3424=((1.0)*cj0);
IkReal x3425=(cj0*gconst26);
IkReal x3426=((1.0)*sj1);
IkReal x3427=((1.0)*sj0);
IkReal x3428=(gconst25*sj4);
IkReal x3429=(cj0*r01);
IkReal x3430=(cj1*x3416);
IkReal x3431=(cj1*x3417);
IkReal x3432=(sj1*x3416);
IkReal x3433=(sj1*x3417);
IkReal x3434=(x3416*x3426);
IkReal x3435=((1.0)*x3431);
IkReal x3436=(x3434+x3435);
evalcond[0]=((((-1.0)*x3436))+(((-1.0)*gconst25*r20))+(((-1.0)*gconst26*x3423)));
evalcond[1]=(((cj4*r22))+((r20*x3422))+(((-1.0)*x3417*x3426))+x3430+(((-1.0)*x3423*x3428)));
evalcond[2]=(((gconst26*r11*sj0))+((cj0*gconst25*r00))+((gconst25*r10*sj0))+x3433+(((-1.0)*x3430))+((r01*x3425)));
CheckValue<IkReal> x3437=IKPowWithIntegerCheck(cj4,-1);
if(!x3437.valid){
continue;
}
evalcond[3]=((((0.0775)*x3431))+(((0.0775)*x3432))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x3433))+pz+(((0.3425)*x3430))+(((-0.076)*r22*sj4*(x3437.value))));
evalcond[4]=(((x3428*x3429))+(((-1.0)*x3418*x3420))+(((-1.0)*cj4*r12*x3427))+(((-1.0)*r00*x3422*x3424))+(((-1.0)*x3436))+((x3418*x3419))+(((-1.0)*cj4*r02*x3424)));
evalcond[5]=((((-0.0775)*x3433))+(((-1.0)*px*x3424))+(((0.0775)*x3430))+(((0.2845)*sj1))+((x3420*x3421))+(((-0.3425)*x3431))+(((-0.3425)*x3432))+(((-1.0)*x3419*x3421))+(((0.0535)*cj1))+(((0.076)*r00*x3425))+(((-1.0)*py*x3427))+(((-0.076)*gconst25*x3429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3438=((-1.0)*r21);
IkReal x3440 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3440)==0){
continue;
}
IkReal x3439=pow(x3440,-0.5);
CheckValue<IkReal> x3441 = IKatan2WithCheck(IkReal(x3438),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3441.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x3441.value))));
IkReal gconst28=(x3438*x3439);
IkReal gconst29=((1.0)*r20*x3439);
CheckValue<IkReal> x3442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3442.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3442.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x3443=((-1.0)*r21);
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal(x3443),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
IkReal x3444=((1.0)*(x3446.value));
IkReal x3445=x3439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3444)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3444)));
IkReal gconst28=(x3443*x3445);
IkReal gconst29=((1.0)*r20*x3445);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x3447=((-1.0)*r21);
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal(x3447),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
IkReal x3448=((1.0)*(x3450.value));
IkReal x3449=x3439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3448)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3448)));
IkReal gconst28=(x3447*x3449);
IkReal gconst29=((1.0)*r20*x3449);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x3451=((-1.0)*r21);
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(x3451),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
IkReal x3452=((1.0)*(x3454.value));
IkReal x3453=x3439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3452)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3452)));
IkReal gconst28=(x3451*x3453);
IkReal gconst29=((1.0)*r20*x3453);
IkReal x3455=(rxp2_2*sj4);
IkReal x3456=(r21*rxp1_2);
IkReal x3457=(r20*rxp0_2);
IkReal x3458=x3439;
IkReal x3459=(cj4*x3458);
j0eval[0]=((((-13.1578947368421)*x3455))+(((13.1578947368421)*x3456*x3459))+(((13.1578947368421)*x3457*x3459)));
j0eval[1]=IKsign(((((1.0)*x3456*x3459))+(((1.0)*x3457*x3459))+(((-1.0)*x3455))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3460=((0.076)*gconst29);
IkReal x3461=((0.076)*gconst28);
CheckValue<IkReal> x3462=IKPowWithIntegerCheck(IKsign((((r20*sj4*x3461))+((cj4*gconst29*rxp0_2))+(((-1.0)*cj4*gconst28*rxp1_2))+(((-1.0)*rxp2_2*sj4))+((r21*sj4*x3460)))),-1);
if(!x3462.valid){
continue;
}
CheckValue<IkReal> x3463 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3461))+(((-1.0)*py))+((r10*x3460)))),IkReal((((r00*x3460))+(((-1.0)*px))+(((-1.0)*r01*x3461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3463.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3462.value)))+(x3463.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3464=IKcos(j0);
IkReal x3465=IKsin(j0);
IkReal x3466=((1.0)*gconst29);
IkReal x3467=(r02*sj4);
IkReal x3468=(r12*sj4);
IkReal x3469=(gconst28*r01);
IkReal x3470=(cj4*x3465);
IkReal x3471=((1.0)*x3465);
IkReal x3472=(r01*x3465);
IkReal x3473=(cj4*x3464);
IkReal x3474=(r10*x3464);
IkReal x3475=(gconst28*r11*x3464);
IkReal x3476=(gconst29*r00*x3465);
evalcond[0]=(((gconst28*x3474))+(((-1.0)*gconst28*r00*x3471))+((gconst29*r11*x3464))+(((-1.0)*x3466*x3472)));
evalcond[1]=((((-1.0)*py*x3464))+(((0.076)*gconst29*x3474))+(((0.076)*x3465*x3469))+((px*x3465))+(((-0.076)*x3476))+(((-0.076)*x3475)));
evalcond[2]=(((x3464*x3467))+(((-1.0)*r10*x3466*x3470))+((x3469*x3473))+((x3465*x3468))+((gconst28*r11*x3470))+(((-1.0)*r00*x3466*x3473)));
evalcond[3]=(((sj4*x3476))+((sj4*x3475))+(((-1.0)*sj4*x3469*x3471))+(((-1.0)*sj4*x3466*x3474))+(((-1.0)*r12*x3473))+((r02*x3470)));
evalcond[4]=((1.0)+((x3464*x3468))+(((-1.0)*x3467*x3471))+(((-1.0)*r10*x3466*x3473))+(((-1.0)*x3469*x3470))+((gconst28*r11*x3473))+((gconst29*r00*x3470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3477=((-1.0)*r21);
CheckValue<IkReal> x3480 = IKatan2WithCheck(IkReal(x3477),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3480.valid){
continue;
}
IkReal x3478=((1.0)*(x3480.value));
IkReal x3479=x3439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3478)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3478)));
IkReal gconst28=(x3477*x3479);
IkReal gconst29=((1.0)*r20*x3479);
IkReal x3481=((6000.0)*pz);
CheckValue<IkReal> x3515=IKPowWithIntegerCheck(cj4,-1);
if(!x3515.valid){
continue;
}
IkReal x3482=x3515.value;
IkReal x3483=((2000.0)*pz);
IkReal x3484=((465.0)*cj4);
IkReal x3485=(r12*sj0);
IkReal x3486=(gconst28*sj4);
IkReal x3487=((155.0)*sj0);
IkReal x3488=(gconst29*r21);
IkReal x3489=(cj0*r02);
IkReal x3490=(gconst29*sj4);
IkReal x3491=(cj4*r22);
IkReal x3492=(cj0*r01);
IkReal x3493=((155.0)*cj4);
IkReal x3494=(cj0*r00);
IkReal x3495=((465.0)*sj0);
IkReal x3496=(gconst28*r20);
IkReal x3497=((2055.0)*x3491);
IkReal x3498=((685.0)*x3491);
IkReal x3499=(r22*sj4*x3482);
IkReal x3500=((2055.0)*r21*x3486);
IkReal x3501=((456.0)*x3499);
IkReal x3502=((2055.0)*r20*x3490);
IkReal x3503=((685.0)*r21*x3486);
IkReal x3504=((152.0)*x3499);
IkReal x3505=((685.0)*r20*x3490);
IkReal x3506=((465.0)*x3486*x3492);
IkReal x3507=(r11*x3486*x3495);
IkReal x3508=(x3500+x3481);
IkReal x3509=((569.0)+x3503+x3483);
IkReal x3510=(x3506+x3507);
IkReal x3511=(x3501+x3502+x3497);
IkReal x3512=(x3504+x3505+x3498);
IkReal x3513=(x3511+(((465.0)*x3488))+(((465.0)*x3496)));
IkReal x3514=(((x3484*x3485))+((x3484*x3489))+((r10*x3490*x3495))+x3511+(((465.0)*x3490*x3494)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x3514))+x3508+x3510)))))+(((0.00058411214953271)*(IKabs(((((-1.0)*x3512))+(((155.0)*x3486*x3492))+x3509+(((-1.0)*x3489*x3493))+(((-155.0)*x3490*x3494))+((r11*x3486*x3487))+(((-1.0)*r10*x3487*x3490))+(((-1.0)*x3485*x3493)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x3514))+x3508+x3510)))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x3513))+x3508)))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x3488))+(((-1.0)*x3512))+x3509+(((-155.0)*x3496)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x3513))+x3508))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3546=IKPowWithIntegerCheck(cj4,-1);
if(!x3546.valid){
continue;
}
IkReal x3516=x3546.value;
IkReal x3517=((569.0)*cj4);
IkReal x3518=cj4*cj4;
IkReal x3519=(cj4*sj4);
IkReal x3520=(gconst28*r21);
IkReal x3521=(cj4*pz);
IkReal x3522=(gconst29*r20);
IkReal x3523=(r22*sj4);
IkReal x3524=((0.002)*x3516);
IkReal x3525=((6000.0)*x3521);
IkReal x3526=((456.0)*x3523);
IkReal x3527=((2000.0)*x3521);
IkReal x3528=((152.0)*x3523);
IkReal x3529=(cj4*gconst29*r21);
IkReal x3530=(r22*x3518);
IkReal x3531=(cj4*gconst28*r20);
IkReal x3532=((2055.0)*x3530);
IkReal x3533=((465.0)*x3529);
IkReal x3534=((465.0)*x3531);
IkReal x3535=((155.0)*x3531);
IkReal x3536=((155.0)*x3529);
IkReal x3537=((685.0)*x3530);
IkReal x3538=((2055.0)*x3519*x3520);
IkReal x3539=((2055.0)*x3519*x3522);
IkReal x3540=((685.0)*x3519*x3520);
IkReal x3541=((685.0)*x3519*x3522);
IkReal x3542=(x3527+x3540);
IkReal x3543=(x3538+x3525);
IkReal x3544=(x3535+x3537+x3536+x3528+x3541);
IkReal x3545=(x3533+x3532+x3534+x3539+x3526);
op[0]=(x3524*((x3517+x3542+(((-1.0)*x3544)))));
op[1]=0.428;
op[2]=(x3524*((x3517+x3543+(((-1.0)*x3545)))));
op[3]=0.856;
op[4]=(x3524*(((((-1.0)*x3517))+x3543+(((-1.0)*x3545)))));
op[5]=0.428;
op[6]=(x3524*(((((-1.0)*x3517))+x3542+(((-1.0)*x3544)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3547=cj4*cj4;
CheckValue<IkReal> x3593=IKPowWithIntegerCheck(cj4,-1);
if(!x3593.valid){
continue;
}
IkReal x3548=x3593.value;
IkReal x3549=((569.0)*cj4);
IkReal x3550=(cj0*r00);
IkReal x3551=(r10*sj0);
IkReal x3552=(cj4*sj4);
IkReal x3553=((465.0)*cj0);
IkReal x3554=(gconst28*r01);
IkReal x3555=((155.0)*gconst29);
IkReal x3556=((155.0)*cj0);
IkReal x3557=(gconst29*r20);
IkReal x3558=(gconst28*r21);
IkReal x3559=(r22*sj4);
IkReal x3560=((0.002)*x3548);
IkReal x3561=(cj4*pz);
IkReal x3562=((6000.0)*x3561);
IkReal x3563=((456.0)*x3559);
IkReal x3564=((2000.0)*x3561);
IkReal x3565=((152.0)*x3559);
IkReal x3566=(r22*x3547);
IkReal x3567=(r02*x3547);
IkReal x3568=(gconst28*r11*sj0);
IkReal x3569=((2055.0)*x3566);
IkReal x3570=((685.0)*x3566);
IkReal x3571=((465.0)*gconst29*x3552);
IkReal x3572=(r12*sj0*x3547);
IkReal x3573=((2055.0)*x3552*x3558);
IkReal x3574=((465.0)*x3572);
IkReal x3575=((2055.0)*x3552*x3557);
IkReal x3576=(x3553*x3567);
IkReal x3577=((685.0)*x3552*x3558);
IkReal x3578=(x3556*x3567);
IkReal x3579=((155.0)*x3572);
IkReal x3580=((685.0)*x3552*x3557);
IkReal x3581=((465.0)*x3552*x3568);
IkReal x3582=(x3552*x3553*x3554);
IkReal x3583=(x3550*x3571);
IkReal x3584=(x3551*x3571);
IkReal x3585=((155.0)*x3552*x3568);
IkReal x3586=(x3552*x3554*x3556);
IkReal x3587=(x3550*x3552*x3555);
IkReal x3588=(x3551*x3552*x3555);
IkReal x3589=(x3577+x3564+x3585+x3586);
IkReal x3590=(x3573+x3562+x3581+x3582);
IkReal x3591=(x3579+x3578+x3570+x3565+x3580+x3587+x3588);
IkReal x3592=(x3575+x3574+x3576+x3563+x3569+x3583+x3584);
j1evalpoly[0]=(((x3560*(htj1*htj1*htj1*htj1)*((x3549+x3590+(((-1.0)*x3592))))))+(((0.428)*htj1))+((x3560*((x3589+(((-1.0)*x3549))+(((-1.0)*x3591))))))+((x3560*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3549+x3589+(((-1.0)*x3591))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3560*(htj1*htj1)*((x3590+(((-1.0)*x3549))+(((-1.0)*x3592)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3594=((1.0)*cj1);
IkReal x3595=(cj4*r22);
IkReal x3596=(gconst29*r21);
IkReal x3597=((1.0)*sj1);
IkReal x3598=(gconst28*r20);
IkReal x3599=(gconst29*r20*sj4);
IkReal x3600=(gconst28*r21*sj4);
if( IKabs((((sj1*x3599))+((sj1*x3595))+(((-1.0)*x3594*x3596))+(((-1.0)*x3594*x3598))+(((-1.0)*x3597*x3600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3594*x3595))+(((-1.0)*x3594*x3599))+((cj1*x3600))+(((-1.0)*x3597*x3598))+(((-1.0)*x3596*x3597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3599))+((sj1*x3595))+(((-1.0)*x3594*x3596))+(((-1.0)*x3594*x3598))+(((-1.0)*x3597*x3600))))+IKsqr(((((-1.0)*x3594*x3595))+(((-1.0)*x3594*x3599))+((cj1*x3600))+(((-1.0)*x3597*x3598))+(((-1.0)*x3596*x3597))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3599))+((sj1*x3595))+(((-1.0)*x3594*x3596))+(((-1.0)*x3594*x3598))+(((-1.0)*x3597*x3600))), ((((-1.0)*x3594*x3595))+(((-1.0)*x3594*x3599))+((cj1*x3600))+(((-1.0)*x3597*x3598))+(((-1.0)*x3596*x3597))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3601=IKcos(j2);
IkReal x3602=IKsin(j2);
IkReal x3603=((1.0)*r21);
IkReal x3604=(gconst28*sj4);
IkReal x3605=((1.0)*cj0);
IkReal x3606=((1.0)*sj1);
IkReal x3607=(gconst29*sj4);
IkReal x3608=(cj0*r00);
IkReal x3609=((1.0)*sj0);
IkReal x3610=(gconst29*sj0);
IkReal x3611=(cj0*r01);
IkReal x3612=(cj1*x3601);
IkReal x3613=(gconst28*r11*sj0);
IkReal x3614=(cj1*x3602);
IkReal x3615=(sj1*x3601);
IkReal x3616=(sj1*x3602);
IkReal x3617=(x3601*x3606);
IkReal x3618=((1.0)*x3614);
IkReal x3619=(x3617+x3618);
evalcond[0]=((((-1.0)*gconst28*r20))+(((-1.0)*gconst29*x3603))+(((-1.0)*x3619)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x3602*x3606))+x3612+(((-1.0)*x3603*x3604))+((r20*x3607)));
evalcond[2]=(((r11*x3610))+(((-1.0)*x3612))+((gconst28*r10*sj0))+x3616+((gconst28*x3608))+((gconst29*x3611)));
CheckValue<IkReal> x3620=IKPowWithIntegerCheck(cj4,-1);
if(!x3620.valid){
continue;
}
evalcond[3]=((((0.3425)*x3612))+(((-0.3425)*x3616))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-0.076)*r22*sj4*(x3620.value)))+(((0.0775)*x3615))+(((0.0775)*x3614)));
evalcond[4]=((((-1.0)*r00*x3605*x3607))+(((-1.0)*r10*x3607*x3609))+(((-1.0)*cj4*r02*x3605))+(((-1.0)*cj4*r12*x3609))+((r11*sj0*x3604))+(((-1.0)*x3619))+((x3604*x3611)));
evalcond[5]=((((-0.3425)*x3615))+(((-0.3425)*x3614))+(((-1.0)*py*x3609))+(((-0.076)*gconst28*x3611))+(((0.2845)*sj1))+(((0.076)*r10*x3610))+(((-0.076)*x3613))+(((-0.0775)*x3616))+(((0.0535)*cj1))+(((0.076)*gconst29*x3608))+(((-1.0)*px*x3605))+(((0.0775)*x3612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3621=((1.0)*cj4);
CheckValue<IkReal> x3622 = IKatan2WithCheck(IkReal((((gconst28*r10))+((gconst29*r11)))),IkReal((((gconst29*r01))+((gconst28*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3622.valid){
continue;
}
CheckValue<IkReal> x3623=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x3621*(gconst29*gconst29)))+(((-1.0)*x3621*(gconst28*gconst28)))))))+((gconst28*r21*sj4))+(((-1.0)*gconst29*r20*sj4)))),-1);
if(!x3623.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3622.value)+(((1.5707963267949)*(x3623.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3624=IKcos(j0);
IkReal x3625=IKsin(j0);
IkReal x3626=((1.0)*gconst29);
IkReal x3627=(r02*sj4);
IkReal x3628=(r12*sj4);
IkReal x3629=(gconst28*r01);
IkReal x3630=(cj4*x3625);
IkReal x3631=((1.0)*x3625);
IkReal x3632=(r01*x3625);
IkReal x3633=(cj4*x3624);
IkReal x3634=(r10*x3624);
IkReal x3635=(gconst28*r11*x3624);
IkReal x3636=(gconst29*r00*x3625);
evalcond[0]=(((gconst29*r11*x3624))+((gconst28*x3634))+(((-1.0)*gconst28*r00*x3631))+(((-1.0)*x3626*x3632)));
evalcond[1]=(((px*x3625))+(((0.076)*x3625*x3629))+(((-0.076)*x3636))+(((-0.076)*x3635))+(((-1.0)*py*x3624))+(((0.076)*gconst29*x3634)));
evalcond[2]=((((-1.0)*r00*x3626*x3633))+((gconst28*r11*x3630))+(((-1.0)*r10*x3626*x3630))+((x3624*x3627))+((x3629*x3633))+((x3625*x3628)));
evalcond[3]=(((r02*x3630))+(((-1.0)*r12*x3633))+(((-1.0)*sj4*x3626*x3634))+((sj4*x3635))+((sj4*x3636))+(((-1.0)*sj4*x3629*x3631)));
evalcond[4]=((1.0)+(((-1.0)*x3627*x3631))+((gconst28*r11*x3633))+(((-1.0)*r10*x3626*x3633))+((gconst29*r00*x3630))+(((-1.0)*x3629*x3630))+((x3624*x3628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3637=((-1.0)*r21);
CheckValue<IkReal> x3640 = IKatan2WithCheck(IkReal(x3637),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3640.valid){
continue;
}
IkReal x3638=((1.0)*(x3640.value));
IkReal x3639=x3439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3638)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3638)));
IkReal gconst28=(x3637*x3639);
IkReal gconst29=((1.0)*r20*x3639);
IkReal x3641=((6000.0)*pz);
CheckValue<IkReal> x3675=IKPowWithIntegerCheck(cj4,-1);
if(!x3675.valid){
continue;
}
IkReal x3642=x3675.value;
IkReal x3643=((2000.0)*pz);
IkReal x3644=((465.0)*cj4);
IkReal x3645=(r12*sj0);
IkReal x3646=(gconst28*sj4);
IkReal x3647=((155.0)*sj0);
IkReal x3648=(gconst29*r21);
IkReal x3649=(cj0*r02);
IkReal x3650=(gconst29*sj4);
IkReal x3651=(cj4*r22);
IkReal x3652=(cj0*r01);
IkReal x3653=((155.0)*cj4);
IkReal x3654=(cj0*r00);
IkReal x3655=((465.0)*sj0);
IkReal x3656=(gconst28*r20);
IkReal x3657=((2055.0)*x3651);
IkReal x3658=((685.0)*x3651);
IkReal x3659=(r22*sj4*x3642);
IkReal x3660=((2055.0)*r21*x3646);
IkReal x3661=((456.0)*x3659);
IkReal x3662=((2055.0)*r20*x3650);
IkReal x3663=((685.0)*r21*x3646);
IkReal x3664=((152.0)*x3659);
IkReal x3665=((685.0)*r20*x3650);
IkReal x3666=((465.0)*x3646*x3652);
IkReal x3667=(r11*x3646*x3655);
IkReal x3668=(x3660+x3641);
IkReal x3669=((569.0)+x3663+x3643);
IkReal x3670=(x3667+x3666);
IkReal x3671=(x3661+x3662+x3657);
IkReal x3672=(x3665+x3664+x3658);
IkReal x3673=((((465.0)*x3656))+(((465.0)*x3648))+x3671);
IkReal x3674=((((465.0)*x3650*x3654))+((r10*x3650*x3655))+x3671+((x3644*x3649))+((x3644*x3645)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((569.0)+x3668+(((-1.0)*x3673)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x3668+(((-1.0)*x3673)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x3668+x3670+(((-1.0)*x3674)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x3668+x3670+(((-1.0)*x3674)))))))+(((0.00058411214953271)*(IKabs((((r11*x3646*x3647))+(((-155.0)*x3650*x3654))+(((155.0)*x3646*x3652))+(((-1.0)*x3645*x3653))+x3669+(((-1.0)*x3649*x3653))+(((-1.0)*x3672))+(((-1.0)*r10*x3647*x3650)))))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x3648))+(((-155.0)*x3656))+x3669+(((-1.0)*x3672))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3706=IKPowWithIntegerCheck(cj4,-1);
if(!x3706.valid){
continue;
}
IkReal x3676=x3706.value;
IkReal x3677=((569.0)*cj4);
IkReal x3678=cj4*cj4;
IkReal x3679=(cj4*sj4);
IkReal x3680=(gconst28*r21);
IkReal x3681=(cj4*pz);
IkReal x3682=(gconst29*r20);
IkReal x3683=(r22*sj4);
IkReal x3684=((0.002)*x3676);
IkReal x3685=((6000.0)*x3681);
IkReal x3686=((456.0)*x3683);
IkReal x3687=((2000.0)*x3681);
IkReal x3688=((152.0)*x3683);
IkReal x3689=(cj4*gconst29*r21);
IkReal x3690=(r22*x3678);
IkReal x3691=(cj4*gconst28*r20);
IkReal x3692=((2055.0)*x3690);
IkReal x3693=((465.0)*x3689);
IkReal x3694=((465.0)*x3691);
IkReal x3695=((155.0)*x3691);
IkReal x3696=((155.0)*x3689);
IkReal x3697=((685.0)*x3690);
IkReal x3698=((2055.0)*x3679*x3680);
IkReal x3699=((2055.0)*x3679*x3682);
IkReal x3700=((685.0)*x3679*x3680);
IkReal x3701=((685.0)*x3679*x3682);
IkReal x3702=(x3687+x3700);
IkReal x3703=(x3698+x3685);
IkReal x3704=(x3695+x3696+x3697+x3688+x3701);
IkReal x3705=(x3699+x3692+x3693+x3694+x3686);
op[0]=(x3684*(((((-1.0)*x3704))+x3677+x3702)));
op[1]=0.428;
op[2]=(x3684*(((((-1.0)*x3705))+x3677+x3703)));
op[3]=0.856;
op[4]=(x3684*(((((-1.0)*x3705))+x3703+(((-1.0)*x3677)))));
op[5]=0.428;
op[6]=(x3684*(((((-1.0)*x3704))+x3702+(((-1.0)*x3677)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3707=cj4*cj4;
CheckValue<IkReal> x3753=IKPowWithIntegerCheck(cj4,-1);
if(!x3753.valid){
continue;
}
IkReal x3708=x3753.value;
IkReal x3709=((569.0)*cj4);
IkReal x3710=(cj0*r00);
IkReal x3711=(r10*sj0);
IkReal x3712=(cj4*sj4);
IkReal x3713=((465.0)*cj0);
IkReal x3714=(gconst28*r01);
IkReal x3715=((155.0)*gconst29);
IkReal x3716=((155.0)*cj0);
IkReal x3717=(gconst29*r20);
IkReal x3718=(gconst28*r21);
IkReal x3719=(r22*sj4);
IkReal x3720=((0.002)*x3708);
IkReal x3721=(cj4*pz);
IkReal x3722=((6000.0)*x3721);
IkReal x3723=((456.0)*x3719);
IkReal x3724=((2000.0)*x3721);
IkReal x3725=((152.0)*x3719);
IkReal x3726=(r22*x3707);
IkReal x3727=(r02*x3707);
IkReal x3728=(gconst28*r11*sj0);
IkReal x3729=((2055.0)*x3726);
IkReal x3730=((685.0)*x3726);
IkReal x3731=((465.0)*gconst29*x3712);
IkReal x3732=(r12*sj0*x3707);
IkReal x3733=((2055.0)*x3712*x3718);
IkReal x3734=((465.0)*x3732);
IkReal x3735=((2055.0)*x3712*x3717);
IkReal x3736=(x3713*x3727);
IkReal x3737=((685.0)*x3712*x3718);
IkReal x3738=(x3716*x3727);
IkReal x3739=((155.0)*x3732);
IkReal x3740=((685.0)*x3712*x3717);
IkReal x3741=((465.0)*x3712*x3728);
IkReal x3742=(x3712*x3713*x3714);
IkReal x3743=(x3710*x3731);
IkReal x3744=(x3711*x3731);
IkReal x3745=((155.0)*x3712*x3728);
IkReal x3746=(x3712*x3714*x3716);
IkReal x3747=(x3710*x3712*x3715);
IkReal x3748=(x3711*x3712*x3715);
IkReal x3749=(x3746+x3745+x3724+x3737);
IkReal x3750=(x3742+x3741+x3722+x3733);
IkReal x3751=(x3748+x3747+x3740+x3725+x3739+x3738+x3730);
IkReal x3752=(x3744+x3743+x3729+x3723+x3736+x3735+x3734);
j1evalpoly[0]=((((0.428)*htj1))+((x3720*(((((-1.0)*x3751))+(((-1.0)*x3709))+x3749))))+((x3720*(htj1*htj1)*(((((-1.0)*x3752))+(((-1.0)*x3709))+x3750))))+((x3720*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3752))+x3750+x3709))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3720*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3751))+x3749+x3709)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3754=((1.0)*cj1);
IkReal x3755=(cj4*r22);
IkReal x3756=(gconst29*r21);
IkReal x3757=((1.0)*sj1);
IkReal x3758=(gconst28*r20);
IkReal x3759=(gconst29*r20*sj4);
IkReal x3760=(gconst28*r21*sj4);
if( IKabs(((((-1.0)*x3757*x3760))+((sj1*x3755))+((sj1*x3759))+(((-1.0)*x3754*x3758))+(((-1.0)*x3754*x3756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3756*x3757))+((cj1*x3760))+(((-1.0)*x3754*x3759))+(((-1.0)*x3754*x3755))+(((-1.0)*x3757*x3758)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3757*x3760))+((sj1*x3755))+((sj1*x3759))+(((-1.0)*x3754*x3758))+(((-1.0)*x3754*x3756))))+IKsqr(((((-1.0)*x3756*x3757))+((cj1*x3760))+(((-1.0)*x3754*x3759))+(((-1.0)*x3754*x3755))+(((-1.0)*x3757*x3758))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3757*x3760))+((sj1*x3755))+((sj1*x3759))+(((-1.0)*x3754*x3758))+(((-1.0)*x3754*x3756))), ((((-1.0)*x3756*x3757))+((cj1*x3760))+(((-1.0)*x3754*x3759))+(((-1.0)*x3754*x3755))+(((-1.0)*x3757*x3758))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3761=IKcos(j2);
IkReal x3762=IKsin(j2);
IkReal x3763=((1.0)*r21);
IkReal x3764=(gconst28*sj4);
IkReal x3765=((1.0)*cj0);
IkReal x3766=((1.0)*sj1);
IkReal x3767=(gconst29*sj4);
IkReal x3768=(cj0*r00);
IkReal x3769=((1.0)*sj0);
IkReal x3770=(gconst29*sj0);
IkReal x3771=(cj0*r01);
IkReal x3772=(cj1*x3761);
IkReal x3773=(gconst28*r11*sj0);
IkReal x3774=(cj1*x3762);
IkReal x3775=(sj1*x3761);
IkReal x3776=(sj1*x3762);
IkReal x3777=(x3761*x3766);
IkReal x3778=((1.0)*x3774);
IkReal x3779=(x3777+x3778);
evalcond[0]=((((-1.0)*gconst29*x3763))+(((-1.0)*gconst28*r20))+(((-1.0)*x3779)));
evalcond[1]=((((-1.0)*x3762*x3766))+((cj4*r22))+(((-1.0)*x3763*x3764))+x3772+((r20*x3767)));
evalcond[2]=((((-1.0)*x3772))+((gconst28*r10*sj0))+((gconst29*x3771))+((gconst28*x3768))+x3776+((r11*x3770)));
CheckValue<IkReal> x3780=IKPowWithIntegerCheck(cj4,-1);
if(!x3780.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.3425)*x3776))+(((-0.2845)*cj1))+pz+(((0.3425)*x3772))+(((0.0775)*x3774))+(((0.0775)*x3775))+(((-0.076)*r22*sj4*(x3780.value))));
evalcond[4]=((((-1.0)*r00*x3765*x3767))+(((-1.0)*r10*x3767*x3769))+(((-1.0)*cj4*r02*x3765))+((r11*sj0*x3764))+(((-1.0)*cj4*r12*x3769))+(((-1.0)*x3779))+((x3764*x3771)));
evalcond[5]=((((0.2845)*sj1))+(((-0.3425)*x3774))+(((-0.3425)*x3775))+(((-0.076)*x3773))+(((0.0535)*cj1))+(((0.076)*gconst29*x3768))+(((-0.076)*gconst28*x3771))+(((0.0775)*x3772))+(((-1.0)*px*x3765))+(((-0.0775)*x3776))+(((0.076)*r10*x3770))+(((-1.0)*py*x3769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3781=((1.0)*gconst29);
IkReal x3782=(gconst28*sj4);
IkReal x3783=((1.0)*cj4);
CheckValue<IkReal> x3784=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*r21*x3781)))),-1);
if(!x3784.valid){
continue;
}
CheckValue<IkReal> x3785 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3783))+(((-1.0)*r10*sj4*x3781))+((r11*x3782)))),IkReal(((((-1.0)*r00*sj4*x3781))+(((-1.0)*r02*x3783))+((r01*x3782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3785.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3784.value)))+(x3785.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3786=IKcos(j0);
IkReal x3787=IKsin(j0);
IkReal x3788=((1.0)*gconst29);
IkReal x3789=(r02*sj4);
IkReal x3790=(r12*sj4);
IkReal x3791=(gconst28*r01);
IkReal x3792=(cj4*x3787);
IkReal x3793=((1.0)*x3787);
IkReal x3794=(r01*x3787);
IkReal x3795=(cj4*x3786);
IkReal x3796=(r10*x3786);
IkReal x3797=(gconst28*r11*x3786);
IkReal x3798=(gconst29*r00*x3787);
evalcond[0]=((((-1.0)*gconst28*r00*x3793))+((gconst28*x3796))+((gconst29*r11*x3786))+(((-1.0)*x3788*x3794)));
evalcond[1]=(((px*x3787))+(((-1.0)*py*x3786))+(((0.076)*gconst29*x3796))+(((-0.076)*x3798))+(((-0.076)*x3797))+(((0.076)*x3787*x3791)));
evalcond[2]=(((gconst28*r11*x3792))+((x3791*x3795))+(((-1.0)*r00*x3788*x3795))+((x3787*x3790))+((x3786*x3789))+(((-1.0)*r10*x3788*x3792)));
evalcond[3]=((((-1.0)*r12*x3795))+((r02*x3792))+(((-1.0)*sj4*x3788*x3796))+(((-1.0)*sj4*x3791*x3793))+((sj4*x3798))+((sj4*x3797)));
evalcond[4]=((1.0)+((gconst28*r11*x3795))+((x3786*x3790))+(((-1.0)*x3791*x3792))+(((-1.0)*x3789*x3793))+((gconst29*r00*x3792))+(((-1.0)*r10*x3788*x3795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3799=((-1.0)*r21);
CheckValue<IkReal> x3802 = IKatan2WithCheck(IkReal(x3799),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3802.valid){
continue;
}
IkReal x3800=((1.0)*(x3802.value));
IkReal x3801=x3439;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3800)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3800)));
IkReal gconst28=(x3799*x3801);
IkReal gconst29=((1.0)*r20*x3801);
IkReal x3803=((6000.0)*pz);
CheckValue<IkReal> x3837=IKPowWithIntegerCheck(cj4,-1);
if(!x3837.valid){
continue;
}
IkReal x3804=x3837.value;
IkReal x3805=((2000.0)*pz);
IkReal x3806=((465.0)*cj4);
IkReal x3807=(r12*sj0);
IkReal x3808=(gconst28*sj4);
IkReal x3809=((155.0)*sj0);
IkReal x3810=(gconst29*r21);
IkReal x3811=(cj0*r02);
IkReal x3812=(gconst29*sj4);
IkReal x3813=(cj4*r22);
IkReal x3814=(cj0*r01);
IkReal x3815=((155.0)*cj4);
IkReal x3816=(cj0*r00);
IkReal x3817=((465.0)*sj0);
IkReal x3818=(gconst28*r20);
IkReal x3819=((2055.0)*x3813);
IkReal x3820=((685.0)*x3813);
IkReal x3821=(r22*sj4*x3804);
IkReal x3822=((2055.0)*r21*x3808);
IkReal x3823=((456.0)*x3821);
IkReal x3824=((2055.0)*r20*x3812);
IkReal x3825=((685.0)*r21*x3808);
IkReal x3826=((152.0)*x3821);
IkReal x3827=((685.0)*r20*x3812);
IkReal x3828=((465.0)*x3808*x3814);
IkReal x3829=(r11*x3808*x3817);
IkReal x3830=(x3822+x3803);
IkReal x3831=((569.0)+x3825+x3805);
IkReal x3832=(x3829+x3828);
IkReal x3833=(x3824+x3823+x3819);
IkReal x3834=(x3827+x3826+x3820);
IkReal x3835=((((465.0)*x3810))+(((465.0)*x3818))+x3833);
IkReal x3836=((((465.0)*x3812*x3816))+((x3806*x3811))+((x3806*x3807))+((r10*x3812*x3817))+x3833);
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((((-155.0)*x3810))+(((-155.0)*x3818))+x3831+(((-1.0)*x3834)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x3830+x3832+(((-1.0)*x3836)))))))+(((0.00058411214953271)*(IKabs(((((-1.0)*x3807*x3815))+(((-1.0)*r10*x3809*x3812))+(((-1.0)*x3811*x3815))+x3831+(((-155.0)*x3812*x3816))+(((155.0)*x3808*x3814))+(((-1.0)*x3834))+((r11*x3808*x3809)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x3830+(((-1.0)*x3835)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x3830+x3832+(((-1.0)*x3836)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x3830+(((-1.0)*x3835))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(cj4,-1);
if(!x3868.valid){
continue;
}
IkReal x3838=x3868.value;
IkReal x3839=((569.0)*cj4);
IkReal x3840=cj4*cj4;
IkReal x3841=(cj4*sj4);
IkReal x3842=(gconst28*r21);
IkReal x3843=(cj4*pz);
IkReal x3844=(gconst29*r20);
IkReal x3845=(r22*sj4);
IkReal x3846=((0.002)*x3838);
IkReal x3847=((6000.0)*x3843);
IkReal x3848=((456.0)*x3845);
IkReal x3849=((2000.0)*x3843);
IkReal x3850=((152.0)*x3845);
IkReal x3851=(cj4*gconst29*r21);
IkReal x3852=(r22*x3840);
IkReal x3853=(cj4*gconst28*r20);
IkReal x3854=((2055.0)*x3852);
IkReal x3855=((465.0)*x3851);
IkReal x3856=((465.0)*x3853);
IkReal x3857=((155.0)*x3853);
IkReal x3858=((155.0)*x3851);
IkReal x3859=((685.0)*x3852);
IkReal x3860=((2055.0)*x3841*x3842);
IkReal x3861=((2055.0)*x3841*x3844);
IkReal x3862=((685.0)*x3841*x3842);
IkReal x3863=((685.0)*x3841*x3844);
IkReal x3864=(x3862+x3849);
IkReal x3865=(x3860+x3847);
IkReal x3866=(x3863+x3857+x3850+x3858+x3859);
IkReal x3867=(x3861+x3856+x3854+x3855+x3848);
op[0]=(x3846*(((((-1.0)*x3866))+x3864+x3839)));
op[1]=0.428;
op[2]=(x3846*(((((-1.0)*x3867))+x3865+x3839)));
op[3]=0.856;
op[4]=(x3846*(((((-1.0)*x3867))+x3865+(((-1.0)*x3839)))));
op[5]=0.428;
op[6]=(x3846*(((((-1.0)*x3866))+x3864+(((-1.0)*x3839)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3869=cj4*cj4;
CheckValue<IkReal> x3915=IKPowWithIntegerCheck(cj4,-1);
if(!x3915.valid){
continue;
}
IkReal x3870=x3915.value;
IkReal x3871=((569.0)*cj4);
IkReal x3872=(cj0*r00);
IkReal x3873=(r10*sj0);
IkReal x3874=(cj4*sj4);
IkReal x3875=((465.0)*cj0);
IkReal x3876=(gconst28*r01);
IkReal x3877=((155.0)*gconst29);
IkReal x3878=((155.0)*cj0);
IkReal x3879=(gconst29*r20);
IkReal x3880=(gconst28*r21);
IkReal x3881=(r22*sj4);
IkReal x3882=((0.002)*x3870);
IkReal x3883=(cj4*pz);
IkReal x3884=((6000.0)*x3883);
IkReal x3885=((456.0)*x3881);
IkReal x3886=((2000.0)*x3883);
IkReal x3887=((152.0)*x3881);
IkReal x3888=(r22*x3869);
IkReal x3889=(r02*x3869);
IkReal x3890=(gconst28*r11*sj0);
IkReal x3891=((2055.0)*x3888);
IkReal x3892=((685.0)*x3888);
IkReal x3893=((465.0)*gconst29*x3874);
IkReal x3894=(r12*sj0*x3869);
IkReal x3895=((2055.0)*x3874*x3880);
IkReal x3896=((465.0)*x3894);
IkReal x3897=((2055.0)*x3874*x3879);
IkReal x3898=(x3875*x3889);
IkReal x3899=((685.0)*x3874*x3880);
IkReal x3900=(x3878*x3889);
IkReal x3901=((155.0)*x3894);
IkReal x3902=((685.0)*x3874*x3879);
IkReal x3903=((465.0)*x3874*x3890);
IkReal x3904=(x3874*x3875*x3876);
IkReal x3905=(x3872*x3893);
IkReal x3906=(x3873*x3893);
IkReal x3907=((155.0)*x3874*x3890);
IkReal x3908=(x3874*x3876*x3878);
IkReal x3909=(x3872*x3874*x3877);
IkReal x3910=(x3873*x3874*x3877);
IkReal x3911=(x3907+x3908+x3899+x3886);
IkReal x3912=(x3904+x3903+x3895+x3884);
IkReal x3913=(x3900+x3901+x3902+x3909+x3910+x3892+x3887);
IkReal x3914=(x3905+x3906+x3898+x3891+x3896+x3897+x3885);
j1evalpoly[0]=(((x3882*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3914))+x3912+x3871))))+((x3882*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3913))+x3911+x3871))))+(((0.428)*htj1))+((x3882*(htj1*htj1)*(((((-1.0)*x3914))+x3912+(((-1.0)*x3871))))))+((x3882*(((((-1.0)*x3913))+x3911+(((-1.0)*x3871))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3916=((1.0)*cj1);
IkReal x3917=(cj4*r22);
IkReal x3918=(gconst29*r21);
IkReal x3919=((1.0)*sj1);
IkReal x3920=(gconst28*r20);
IkReal x3921=(gconst29*r20*sj4);
IkReal x3922=(gconst28*r21*sj4);
if( IKabs(((((-1.0)*x3916*x3918))+((sj1*x3917))+(((-1.0)*x3916*x3920))+(((-1.0)*x3919*x3922))+((sj1*x3921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3916*x3917))+(((-1.0)*x3916*x3921))+(((-1.0)*x3919*x3920))+(((-1.0)*x3918*x3919))+((cj1*x3922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3916*x3918))+((sj1*x3917))+(((-1.0)*x3916*x3920))+(((-1.0)*x3919*x3922))+((sj1*x3921))))+IKsqr(((((-1.0)*x3916*x3917))+(((-1.0)*x3916*x3921))+(((-1.0)*x3919*x3920))+(((-1.0)*x3918*x3919))+((cj1*x3922))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3916*x3918))+((sj1*x3917))+(((-1.0)*x3916*x3920))+(((-1.0)*x3919*x3922))+((sj1*x3921))), ((((-1.0)*x3916*x3917))+(((-1.0)*x3916*x3921))+(((-1.0)*x3919*x3920))+(((-1.0)*x3918*x3919))+((cj1*x3922))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3923=IKcos(j2);
IkReal x3924=IKsin(j2);
IkReal x3925=((1.0)*r21);
IkReal x3926=(gconst28*sj4);
IkReal x3927=((1.0)*cj0);
IkReal x3928=((1.0)*sj1);
IkReal x3929=(gconst29*sj4);
IkReal x3930=(cj0*r00);
IkReal x3931=((1.0)*sj0);
IkReal x3932=(gconst29*sj0);
IkReal x3933=(cj0*r01);
IkReal x3934=(cj1*x3923);
IkReal x3935=(gconst28*r11*sj0);
IkReal x3936=(cj1*x3924);
IkReal x3937=(sj1*x3923);
IkReal x3938=(sj1*x3924);
IkReal x3939=(x3923*x3928);
IkReal x3940=((1.0)*x3936);
IkReal x3941=(x3939+x3940);
evalcond[0]=((((-1.0)*gconst28*r20))+(((-1.0)*x3941))+(((-1.0)*gconst29*x3925)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x3925*x3926))+(((-1.0)*x3924*x3928))+x3934+((r20*x3929)));
evalcond[2]=((((-1.0)*x3934))+((gconst28*r10*sj0))+((gconst29*x3933))+x3938+((gconst28*x3930))+((r11*x3932)));
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(cj4,-1);
if(!x3942.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((0.0775)*x3937))+(((0.0775)*x3936))+(((-0.2845)*cj1))+(((-0.3425)*x3938))+pz+(((0.3425)*x3934))+(((-0.076)*r22*sj4*(x3942.value))));
evalcond[4]=((((-1.0)*cj4*r12*x3931))+(((-1.0)*r10*x3929*x3931))+(((-1.0)*cj4*r02*x3927))+((x3926*x3933))+(((-1.0)*x3941))+(((-1.0)*r00*x3927*x3929))+((r11*sj0*x3926)));
evalcond[5]=((((-0.076)*gconst28*x3933))+(((-0.0775)*x3938))+(((-1.0)*px*x3927))+(((0.2845)*sj1))+(((0.0775)*x3934))+(((0.0535)*cj1))+(((-0.3425)*x3937))+(((-0.3425)*x3936))+(((0.076)*r10*x3932))+(((0.076)*gconst29*x3930))+(((-0.076)*x3935))+(((-1.0)*py*x3931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3943=((0.076)*sj5);
IkReal x3944=((0.076)*cj5);
CheckValue<IkReal> x3945 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x3943))+((r10*x3944)))),IkReal((((r00*x3944))+(((-1.0)*r01*x3943))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3945.valid){
continue;
}
CheckValue<IkReal> x3946=IKPowWithIntegerCheck(IKsign((((r20*sj4*x3943))+(((-1.0)*rxp2_2*sj4))+((r21*sj4*x3944))+((cj4*cj5*rxp0_2))+(((-1.0)*cj4*rxp1_2*sj5)))),-1);
if(!x3946.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3945.value)+(((1.5707963267949)*(x3946.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3947=IKcos(j0);
IkReal x3948=IKsin(j0);
IkReal x3949=((1.0)*r01);
IkReal x3950=(r11*sj5);
IkReal x3951=(cj4*r00);
IkReal x3952=((1.0)*r10);
IkReal x3953=(r01*sj5);
IkReal x3954=(cj5*x3948);
IkReal x3955=(sj4*x3947);
IkReal x3956=(sj4*x3948);
IkReal x3957=(cj5*x3947);
IkReal x3958=(cj4*x3948);
IkReal x3959=(cj4*x3947);
evalcond[0]=((((-1.0)*x3949*x3954))+(((-1.0)*r00*sj5*x3948))+((r11*x3957))+((r10*sj5*x3947)));
evalcond[1]=((((0.076)*x3948*x3953))+(((-0.076)*x3947*x3950))+(((-1.0)*py*x3947))+(((0.076)*r10*x3957))+(((-0.076)*r00*x3954))+((px*x3948)));
evalcond[2]=((((-1.0)*cj4*x3952*x3954))+((x3953*x3959))+(((-1.0)*x3951*x3957))+((x3950*x3958))+((r02*x3955))+((r12*x3956)));
evalcond[3]=((((-1.0)*r12*x3959))+((r00*sj4*x3954))+(((-1.0)*cj5*x3952*x3955))+(((-1.0)*sj5*x3949*x3956))+((x3950*x3955))+((r02*x3958)));
evalcond[4]=((1.0)+(((-1.0)*cj4*x3952*x3957))+(((-1.0)*r02*x3956))+(((-1.0)*sj5*x3949*x3958))+((x3950*x3959))+((x3951*x3954))+((r12*x3955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3960=((6000.0)*pz);
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(cj4,-1);
if(!x3988.valid){
continue;
}
IkReal x3961=x3988.value;
IkReal x3962=(r20*sj5);
IkReal x3963=((0.304)*sj0);
IkReal x3964=(r11*sj5);
IkReal x3965=(cj0*px);
IkReal x3966=(py*sj0);
IkReal x3967=(cj4*r22);
IkReal x3968=(cj5*r10);
IkReal x3969=(cj5*r21);
IkReal x3970=((0.912)*sj0);
IkReal x3971=((0.912)*cj0);
IkReal x3972=(r01*sj5);
IkReal x3973=(cj5*r00);
IkReal x3974=((0.304)*cj0);
IkReal x3975=((4.11)*x3962);
IkReal x3976=((4.11)*x3969);
IkReal x3977=(cj5*r20*sj4);
IkReal x3978=(r21*sj4*sj5);
IkReal x3979=(r22*sj4*x3961);
IkReal x3980=((2055.0)*x3978);
IkReal x3981=(x3971*x3973);
IkReal x3982=(x3968*x3970);
IkReal x3983=((0.93)*x3978);
IkReal x3984=(x3980+x3960);
IkReal x3985=((((465.0)*x3969))+(((465.0)*x3962))+(((456.0)*x3979))+(((2055.0)*x3977))+(((2055.0)*x3967)));
IkReal x3986=(x3981+x3982+x3983+x3975+x3976);
IkReal x3987=((((12.0)*x3965))+(((12.0)*x3966))+((x3971*x3972))+(((0.93)*x3977))+(((0.93)*x3967))+((x3964*x3970)));
j1eval[0]=((10.816)+(IKabs(((-0.214)+x3986+(((-1.0)*x3987)))))+(IKabs(((0.214)+x3986+(((-1.0)*x3987)))))+(((0.002)*(IKabs(((-569.0)+x3984+(((-1.0)*x3985)))))))+(((0.002)*(IKabs(((569.0)+(((-685.0)*x3977))+(((-155.0)*x3962))+(((-155.0)*x3969))+(((-685.0)*x3967))+(((685.0)*x3978))+(((-152.0)*x3979))+(((2000.0)*pz)))))))+(((0.002)*(IKabs(((569.0)+x3984+(((-1.0)*x3985)))))))+(IKabs(((-0.214)+(((-1.0)*x3972*x3974))+(((-1.0)*x3963*x3964))+(((1.37)*x3969))+(((1.37)*x3962))+(((-4.0)*x3966))+(((-4.0)*x3965))+((x3973*x3974))+(((0.31)*x3978))+(((-0.31)*x3977))+(((-0.31)*x3967))+((x3963*x3968))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(cj4,-1);
if(!x4019.valid){
continue;
}
IkReal x3989=x4019.value;
IkReal x3990=((569.0)*cj4);
IkReal x3991=cj4*cj4;
IkReal x3992=(cj4*cj5);
IkReal x3993=(cj4*pz);
IkReal x3994=((685.0)*sj4);
IkReal x3995=(r22*sj4);
IkReal x3996=((0.002)*x3989);
IkReal x3997=((2055.0)*sj4);
IkReal x3998=((6000.0)*x3993);
IkReal x3999=((456.0)*x3995);
IkReal x4000=((2000.0)*x3993);
IkReal x4001=((152.0)*x3995);
IkReal x4002=(cj4*r21*sj5);
IkReal x4003=(r22*x3991);
IkReal x4004=(cj4*r20*sj5);
IkReal x4005=((2055.0)*x4003);
IkReal x4006=((465.0)*x4004);
IkReal x4007=((465.0)*r21*x3992);
IkReal x4008=((155.0)*x4004);
IkReal x4009=((155.0)*r21*x3992);
IkReal x4010=((685.0)*x4003);
IkReal x4011=(x3997*x4002);
IkReal x4012=(r20*x3992*x3997);
IkReal x4013=(x3994*x4002);
IkReal x4014=(r20*x3992*x3994);
IkReal x4015=(x4011+x3998);
IkReal x4016=(x4000+x4013);
IkReal x4017=(x4005+x4006+x4007+x4012+x3999);
IkReal x4018=(x4008+x4009+x4001+x4010+x4014);
op[0]=(x3996*((x4016+x3990+(((-1.0)*x4018)))));
op[1]=0.428;
op[2]=(x3996*((x4015+x3990+(((-1.0)*x4017)))));
op[3]=0.856;
op[4]=(x3996*(((((-1.0)*x3990))+x4015+(((-1.0)*x4017)))));
op[5]=0.428;
op[6]=(x3996*(((((-1.0)*x3990))+x4016+(((-1.0)*x4018)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4020=((0.93)*sj4);
IkReal x4021=(cj5*r20);
IkReal x4022=((0.304)*sj0);
IkReal x4023=(cj5*r10);
IkReal x4024=(r11*sj5);
IkReal x4025=(r21*sj5);
IkReal x4026=((0.31)*sj4);
IkReal x4027=(cj0*px);
IkReal x4028=(py*sj0);
IkReal x4029=(r20*sj5);
IkReal x4030=(cj5*r21);
IkReal x4031=(cj4*r22);
IkReal x4032=((0.912)*sj0);
IkReal x4033=((0.912)*cj0);
IkReal x4034=(r01*sj5);
IkReal x4035=(cj5*r00);
IkReal x4036=((0.304)*cj0);
IkReal x4037=((1.37)*x4030);
IkReal x4038=((1.37)*x4029);
IkReal x4039=((4.11)*x4029);
IkReal x4040=((4.11)*x4030);
IkReal x4041=(x4022*x4023);
IkReal x4042=(x4035*x4036);
IkReal x4043=(x4025*x4026);
IkReal x4044=(x4033*x4035);
IkReal x4045=(x4023*x4032);
IkReal x4046=(x4020*x4025);
IkReal x4047=(x4041+x4042+x4043+x4037+x4038);
IkReal x4048=(x4044+x4045+x4046+x4040+x4039);
IkReal x4049=(((x4020*x4021))+(((12.0)*x4028))+(((12.0)*x4027))+((x4033*x4034))+(((0.93)*x4031))+((x4024*x4032)));
IkReal x4050=(((x4021*x4026))+(((0.31)*x4031))+((x4022*x4024))+((x4034*x4036))+(((4.0)*x4028))+(((4.0)*x4027)));
j1evalpoly[0]=((0.214)+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((0.214)+x4048+(((-1.0)*x4049))))))+x4047+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+x4047+(((-1.0)*x4050))))))+(((htj1*htj1*htj1*htj1)*(((-0.214)+x4048+(((-1.0)*x4049))))))+(((2.276)*htj1))+(((-1.0)*x4050)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4051=((1.0)*cj1);
IkReal x4052=(cj4*r22);
IkReal x4053=(cj5*r21);
IkReal x4054=((1.0)*sj1);
IkReal x4055=(r20*sj5);
IkReal x4056=(r21*sj4*sj5);
IkReal x4057=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x4051*x4053))+(((-1.0)*x4051*x4055))+(((-1.0)*x4054*x4056))+((sj1*x4052))+((sj1*x4057)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4051*x4057))+(((-1.0)*x4051*x4052))+(((-1.0)*x4053*x4054))+(((-1.0)*x4054*x4055))+((cj1*x4056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4051*x4053))+(((-1.0)*x4051*x4055))+(((-1.0)*x4054*x4056))+((sj1*x4052))+((sj1*x4057))))+IKsqr(((((-1.0)*x4051*x4057))+(((-1.0)*x4051*x4052))+(((-1.0)*x4053*x4054))+(((-1.0)*x4054*x4055))+((cj1*x4056))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4051*x4053))+(((-1.0)*x4051*x4055))+(((-1.0)*x4054*x4056))+((sj1*x4052))+((sj1*x4057))), ((((-1.0)*x4051*x4057))+(((-1.0)*x4051*x4052))+(((-1.0)*x4053*x4054))+(((-1.0)*x4054*x4055))+((cj1*x4056))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4058=IKcos(j2);
IkReal x4059=IKsin(j2);
IkReal x4060=(r10*sj0);
IkReal x4061=((0.076)*cj5);
IkReal x4062=(cj0*r00);
IkReal x4063=((0.076)*sj5);
IkReal x4064=(r11*sj0);
IkReal x4065=((1.0)*sj5);
IkReal x4066=((1.0)*cj0);
IkReal x4067=(cj0*r01);
IkReal x4068=((1.0)*sj1);
IkReal x4069=((0.3425)*sj1);
IkReal x4070=(sj4*sj5);
IkReal x4071=((1.0)*sj0);
IkReal x4072=(cj1*x4058);
IkReal x4073=((1.0)*cj5*sj4);
IkReal x4074=(cj1*x4059);
IkReal x4075=(sj1*x4059);
IkReal x4076=(x4058*x4068);
IkReal x4077=((1.0)*x4074);
IkReal x4078=(x4077+x4076);
evalcond[0]=((((-1.0)*r20*x4065))+(((-1.0)*x4078))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x4065))+(((-1.0)*x4059*x4068))+x4072);
evalcond[2]=((((-1.0)*x4072))+((sj5*x4062))+((sj5*x4060))+x4075+((cj5*x4064))+((cj5*x4067)));
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(cj4,-1);
if(!x4079.valid){
continue;
}
evalcond[3]=((((0.3425)*x4072))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*x4059*x4069))+(((0.0775)*sj1*x4058))+pz+(((0.0775)*x4074))+(((-0.076)*r22*sj4*(x4079.value))));
evalcond[4]=((((-1.0)*x4062*x4073))+(((-1.0)*cj4*r02*x4066))+(((-1.0)*x4078))+(((-1.0)*cj4*r12*x4071))+((x4067*x4070))+((x4064*x4070))+(((-1.0)*x4060*x4073)));
evalcond[5]=(((x4060*x4061))+((x4061*x4062))+(((-0.0775)*x4075))+(((0.2845)*sj1))+(((-1.0)*x4063*x4064))+(((-1.0)*x4063*x4067))+(((-1.0)*py*x4071))+(((-0.3425)*x4074))+(((-1.0)*px*x4066))+(((0.0535)*cj1))+(((-1.0)*x4058*x4069))+(((0.0775)*x4072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4080=(sj4*sj5);
IkReal x4081=((1.0)*cj4);
IkReal x4082=((1.0)*cj5*sj4);
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4081))+((r11*x4080))+(((-1.0)*r10*x4082)))),IkReal((((r01*x4080))+(((-1.0)*r02*x4081))+(((-1.0)*r00*x4082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
CheckValue<IkReal> x4084=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4084.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4083.value)+(((1.5707963267949)*(x4084.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4085=IKcos(j0);
IkReal x4086=IKsin(j0);
IkReal x4087=((1.0)*r01);
IkReal x4088=(r11*sj5);
IkReal x4089=(cj4*r00);
IkReal x4090=((1.0)*r10);
IkReal x4091=(r01*sj5);
IkReal x4092=(cj5*x4086);
IkReal x4093=(sj4*x4085);
IkReal x4094=(sj4*x4086);
IkReal x4095=(cj5*x4085);
IkReal x4096=(cj4*x4086);
IkReal x4097=(cj4*x4085);
evalcond[0]=(((r10*sj5*x4085))+((r11*x4095))+(((-1.0)*x4087*x4092))+(((-1.0)*r00*sj5*x4086)));
evalcond[1]=(((px*x4086))+(((0.076)*r10*x4095))+(((-0.076)*r00*x4092))+(((0.076)*x4086*x4091))+(((-0.076)*x4085*x4088))+(((-1.0)*py*x4085)));
evalcond[2]=(((x4088*x4096))+(((-1.0)*x4089*x4095))+((r12*x4094))+((r02*x4093))+((x4091*x4097))+(((-1.0)*cj4*x4090*x4092)));
evalcond[3]=(((x4088*x4093))+(((-1.0)*sj5*x4087*x4094))+((r00*sj4*x4092))+((r02*x4096))+(((-1.0)*r12*x4097))+(((-1.0)*cj5*x4090*x4093)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4094))+((x4088*x4097))+(((-1.0)*sj5*x4087*x4096))+((x4089*x4092))+((r12*x4093))+(((-1.0)*cj4*x4090*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4098=((6000.0)*pz);
CheckValue<IkReal> x4126=IKPowWithIntegerCheck(cj4,-1);
if(!x4126.valid){
continue;
}
IkReal x4099=x4126.value;
IkReal x4100=(r20*sj5);
IkReal x4101=((0.304)*sj0);
IkReal x4102=(r11*sj5);
IkReal x4103=(cj0*px);
IkReal x4104=(py*sj0);
IkReal x4105=(cj4*r22);
IkReal x4106=(cj5*r10);
IkReal x4107=(cj5*r21);
IkReal x4108=((0.912)*sj0);
IkReal x4109=((0.912)*cj0);
IkReal x4110=(r01*sj5);
IkReal x4111=(cj5*r00);
IkReal x4112=((0.304)*cj0);
IkReal x4113=((4.11)*x4100);
IkReal x4114=((4.11)*x4107);
IkReal x4115=(cj5*r20*sj4);
IkReal x4116=(r21*sj4*sj5);
IkReal x4117=(r22*sj4*x4099);
IkReal x4118=((2055.0)*x4116);
IkReal x4119=(x4109*x4111);
IkReal x4120=(x4106*x4108);
IkReal x4121=((0.93)*x4116);
IkReal x4122=(x4098+x4118);
IkReal x4123=((((456.0)*x4117))+(((2055.0)*x4105))+(((465.0)*x4100))+(((465.0)*x4107))+(((2055.0)*x4115)));
IkReal x4124=(x4121+x4120+x4114+x4113+x4119);
IkReal x4125=((((0.93)*x4115))+((x4109*x4110))+(((0.93)*x4105))+(((12.0)*x4103))+(((12.0)*x4104))+((x4102*x4108)));
j1eval[0]=((10.816)+(((0.002)*(IKabs(((569.0)+(((-1.0)*x4123))+x4122)))))+(IKabs(((-0.214)+(((1.37)*x4100))+(((1.37)*x4107))+(((-4.0)*x4104))+(((-4.0)*x4103))+(((-1.0)*x4110*x4112))+(((-0.31)*x4105))+((x4101*x4106))+(((-0.31)*x4115))+((x4111*x4112))+(((-1.0)*x4101*x4102))+(((0.31)*x4116)))))+(((0.002)*(IKabs(((569.0)+(((685.0)*x4116))+(((-685.0)*x4115))+(((-155.0)*x4107))+(((-155.0)*x4100))+(((-685.0)*x4105))+(((-152.0)*x4117))+(((2000.0)*pz)))))))+(IKabs(((0.214)+(((-1.0)*x4125))+x4124)))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x4123))+x4122)))))+(IKabs(((-0.214)+(((-1.0)*x4125))+x4124))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4157=IKPowWithIntegerCheck(cj4,-1);
if(!x4157.valid){
continue;
}
IkReal x4127=x4157.value;
IkReal x4128=((569.0)*cj4);
IkReal x4129=cj4*cj4;
IkReal x4130=(cj4*cj5);
IkReal x4131=(cj4*pz);
IkReal x4132=((685.0)*sj4);
IkReal x4133=(r22*sj4);
IkReal x4134=((0.002)*x4127);
IkReal x4135=((2055.0)*sj4);
IkReal x4136=((6000.0)*x4131);
IkReal x4137=((456.0)*x4133);
IkReal x4138=((2000.0)*x4131);
IkReal x4139=((152.0)*x4133);
IkReal x4140=(cj4*r21*sj5);
IkReal x4141=(r22*x4129);
IkReal x4142=(cj4*r20*sj5);
IkReal x4143=((2055.0)*x4141);
IkReal x4144=((465.0)*x4142);
IkReal x4145=((465.0)*r21*x4130);
IkReal x4146=((155.0)*x4142);
IkReal x4147=((155.0)*r21*x4130);
IkReal x4148=((685.0)*x4141);
IkReal x4149=(x4135*x4140);
IkReal x4150=(r20*x4130*x4135);
IkReal x4151=(x4132*x4140);
IkReal x4152=(r20*x4130*x4132);
IkReal x4153=(x4149+x4136);
IkReal x4154=(x4151+x4138);
IkReal x4155=(x4150+x4145+x4144+x4143+x4137);
IkReal x4156=(x4152+x4148+x4147+x4146+x4139);
op[0]=(x4134*((x4128+x4154+(((-1.0)*x4156)))));
op[1]=0.428;
op[2]=(x4134*((x4128+x4153+(((-1.0)*x4155)))));
op[3]=0.856;
op[4]=(x4134*(((((-1.0)*x4128))+x4153+(((-1.0)*x4155)))));
op[5]=0.428;
op[6]=(x4134*(((((-1.0)*x4128))+x4154+(((-1.0)*x4156)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4158=((0.93)*sj4);
IkReal x4159=(cj5*r20);
IkReal x4160=((0.304)*sj0);
IkReal x4161=(cj5*r10);
IkReal x4162=(r11*sj5);
IkReal x4163=(r21*sj5);
IkReal x4164=((0.31)*sj4);
IkReal x4165=(cj0*px);
IkReal x4166=(py*sj0);
IkReal x4167=(r20*sj5);
IkReal x4168=(cj5*r21);
IkReal x4169=(cj4*r22);
IkReal x4170=((0.912)*sj0);
IkReal x4171=((0.912)*cj0);
IkReal x4172=(r01*sj5);
IkReal x4173=(cj5*r00);
IkReal x4174=((0.304)*cj0);
IkReal x4175=((1.37)*x4168);
IkReal x4176=((1.37)*x4167);
IkReal x4177=((4.11)*x4167);
IkReal x4178=((4.11)*x4168);
IkReal x4179=(x4160*x4161);
IkReal x4180=(x4173*x4174);
IkReal x4181=(x4163*x4164);
IkReal x4182=(x4171*x4173);
IkReal x4183=(x4161*x4170);
IkReal x4184=(x4158*x4163);
IkReal x4185=(x4181+x4180+x4175+x4176+x4179);
IkReal x4186=(x4183+x4182+x4184+x4177+x4178);
IkReal x4187=(((x4162*x4170))+(((0.93)*x4169))+(((12.0)*x4165))+(((12.0)*x4166))+((x4171*x4172))+((x4158*x4159)));
IkReal x4188=((((0.31)*x4169))+(((4.0)*x4165))+(((4.0)*x4166))+((x4160*x4162))+((x4159*x4164))+((x4172*x4174)));
j1evalpoly[0]=((0.214)+(((-1.0)*x4188))+(((htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x4187))+x4186))))+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x4188))+x4185))))+x4185+(((2.276)*htj1))+(((htj1*htj1)*(((0.214)+(((-1.0)*x4187))+x4186)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4189=((1.0)*cj1);
IkReal x4190=(cj4*r22);
IkReal x4191=(cj5*r21);
IkReal x4192=((1.0)*sj1);
IkReal x4193=(r20*sj5);
IkReal x4194=(r21*sj4*sj5);
IkReal x4195=(cj5*r20*sj4);
if( IKabs((((sj1*x4190))+((sj1*x4195))+(((-1.0)*x4189*x4193))+(((-1.0)*x4189*x4191))+(((-1.0)*x4192*x4194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x4194))+(((-1.0)*x4189*x4190))+(((-1.0)*x4189*x4195))+(((-1.0)*x4191*x4192))+(((-1.0)*x4192*x4193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x4190))+((sj1*x4195))+(((-1.0)*x4189*x4193))+(((-1.0)*x4189*x4191))+(((-1.0)*x4192*x4194))))+IKsqr((((cj1*x4194))+(((-1.0)*x4189*x4190))+(((-1.0)*x4189*x4195))+(((-1.0)*x4191*x4192))+(((-1.0)*x4192*x4193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x4190))+((sj1*x4195))+(((-1.0)*x4189*x4193))+(((-1.0)*x4189*x4191))+(((-1.0)*x4192*x4194))), (((cj1*x4194))+(((-1.0)*x4189*x4190))+(((-1.0)*x4189*x4195))+(((-1.0)*x4191*x4192))+(((-1.0)*x4192*x4193))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4196=IKcos(j2);
IkReal x4197=IKsin(j2);
IkReal x4198=(r10*sj0);
IkReal x4199=((0.076)*cj5);
IkReal x4200=(cj0*r00);
IkReal x4201=((0.076)*sj5);
IkReal x4202=(r11*sj0);
IkReal x4203=((1.0)*sj5);
IkReal x4204=((1.0)*cj0);
IkReal x4205=(cj0*r01);
IkReal x4206=((1.0)*sj1);
IkReal x4207=((0.3425)*sj1);
IkReal x4208=(sj4*sj5);
IkReal x4209=((1.0)*sj0);
IkReal x4210=(cj1*x4196);
IkReal x4211=((1.0)*cj5*sj4);
IkReal x4212=(cj1*x4197);
IkReal x4213=(sj1*x4197);
IkReal x4214=(x4196*x4206);
IkReal x4215=((1.0)*x4212);
IkReal x4216=(x4215+x4214);
evalcond[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4203))+(((-1.0)*x4216)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x4197*x4206))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x4203))+x4210);
evalcond[2]=(((sj5*x4198))+((sj5*x4200))+x4213+(((-1.0)*x4210))+((cj5*x4202))+((cj5*x4205)));
CheckValue<IkReal> x4217=IKPowWithIntegerCheck(cj4,-1);
if(!x4217.valid){
continue;
}
evalcond[3]=((((-1.0)*x4197*x4207))+(((0.0775)*x4212))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*sj1*x4196))+(((0.3425)*x4210))+(((-0.076)*r22*sj4*(x4217.value))));
evalcond[4]=((((-1.0)*x4198*x4211))+((x4205*x4208))+((x4202*x4208))+(((-1.0)*cj4*r12*x4209))+(((-1.0)*cj4*r02*x4204))+(((-1.0)*x4200*x4211))+(((-1.0)*x4216)));
evalcond[5]=(((x4199*x4200))+(((-1.0)*x4201*x4205))+(((-1.0)*x4201*x4202))+(((0.0775)*x4210))+(((0.2845)*sj1))+(((-0.3425)*x4212))+(((-1.0)*px*x4204))+(((0.0535)*cj1))+(((-0.0775)*x4213))+(((-1.0)*x4196*x4207))+((x4198*x4199))+(((-1.0)*py*x4209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4218=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*cj5*r20*sj4))+(((-1.0)*cj4*r22)))),-1);
if(!x4218.valid){
continue;
}
CheckValue<IkReal> x4219 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4219.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4218.value)))+(x4219.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4220=IKcos(j0);
IkReal x4221=IKsin(j0);
IkReal x4222=((1.0)*r01);
IkReal x4223=(r11*sj5);
IkReal x4224=(cj4*r00);
IkReal x4225=((1.0)*r10);
IkReal x4226=(r01*sj5);
IkReal x4227=(cj5*x4221);
IkReal x4228=(sj4*x4220);
IkReal x4229=(sj4*x4221);
IkReal x4230=(cj5*x4220);
IkReal x4231=(cj4*x4221);
IkReal x4232=(cj4*x4220);
evalcond[0]=((((-1.0)*x4222*x4227))+((r10*sj5*x4220))+(((-1.0)*r00*sj5*x4221))+((r11*x4230)));
evalcond[1]=((((0.076)*r10*x4230))+(((-0.076)*r00*x4227))+(((0.076)*x4221*x4226))+(((-0.076)*x4220*x4223))+((px*x4221))+(((-1.0)*py*x4220)));
evalcond[2]=(((r02*x4228))+((x4226*x4232))+((x4223*x4231))+(((-1.0)*x4224*x4230))+(((-1.0)*cj4*x4225*x4227))+((r12*x4229)));
evalcond[3]=(((r00*sj4*x4227))+(((-1.0)*cj5*x4225*x4228))+(((-1.0)*r12*x4232))+(((-1.0)*sj5*x4222*x4229))+((r02*x4231))+((x4223*x4228)));
evalcond[4]=((1.0)+((x4224*x4227))+(((-1.0)*r02*x4229))+(((-1.0)*sj5*x4222*x4231))+((x4223*x4232))+(((-1.0)*cj4*x4225*x4230))+((r12*x4228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4233=((6000.0)*pz);
CheckValue<IkReal> x4261=IKPowWithIntegerCheck(cj4,-1);
if(!x4261.valid){
continue;
}
IkReal x4234=x4261.value;
IkReal x4235=(r20*sj5);
IkReal x4236=((0.304)*sj0);
IkReal x4237=(r11*sj5);
IkReal x4238=(cj0*px);
IkReal x4239=(py*sj0);
IkReal x4240=(cj4*r22);
IkReal x4241=(cj5*r10);
IkReal x4242=(cj5*r21);
IkReal x4243=((0.912)*sj0);
IkReal x4244=((0.912)*cj0);
IkReal x4245=(r01*sj5);
IkReal x4246=(cj5*r00);
IkReal x4247=((0.304)*cj0);
IkReal x4248=((4.11)*x4235);
IkReal x4249=((4.11)*x4242);
IkReal x4250=(cj5*r20*sj4);
IkReal x4251=(r21*sj4*sj5);
IkReal x4252=(r22*sj4*x4234);
IkReal x4253=((2055.0)*x4251);
IkReal x4254=(x4244*x4246);
IkReal x4255=(x4241*x4243);
IkReal x4256=((0.93)*x4251);
IkReal x4257=(x4253+x4233);
IkReal x4258=((((465.0)*x4235))+(((2055.0)*x4240))+(((465.0)*x4242))+(((456.0)*x4252))+(((2055.0)*x4250)));
IkReal x4259=(x4255+x4254+x4256+x4248+x4249);
IkReal x4260=(((x4237*x4243))+(((0.93)*x4240))+(((12.0)*x4239))+(((12.0)*x4238))+(((0.93)*x4250))+((x4244*x4245)));
j1eval[0]=((10.816)+(IKabs(((-0.214)+(((-4.0)*x4239))+(((-4.0)*x4238))+((x4246*x4247))+(((0.31)*x4251))+(((1.37)*x4235))+(((1.37)*x4242))+(((-0.31)*x4240))+((x4236*x4241))+(((-1.0)*x4236*x4237))+(((-0.31)*x4250))+(((-1.0)*x4245*x4247)))))+(((0.002)*(IKabs(((569.0)+(((-152.0)*x4252))+(((-155.0)*x4235))+(((685.0)*x4251))+(((-685.0)*x4250))+(((-155.0)*x4242))+(((2000.0)*pz))+(((-685.0)*x4240)))))))+(IKabs(((0.214)+x4259+(((-1.0)*x4260)))))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x4258))+x4257)))))+(IKabs(((-0.214)+x4259+(((-1.0)*x4260)))))+(((0.002)*(IKabs(((569.0)+(((-1.0)*x4258))+x4257))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4292=IKPowWithIntegerCheck(cj4,-1);
if(!x4292.valid){
continue;
}
IkReal x4262=x4292.value;
IkReal x4263=((569.0)*cj4);
IkReal x4264=cj4*cj4;
IkReal x4265=(cj4*cj5);
IkReal x4266=(cj4*pz);
IkReal x4267=((685.0)*sj4);
IkReal x4268=(r22*sj4);
IkReal x4269=((0.002)*x4262);
IkReal x4270=((2055.0)*sj4);
IkReal x4271=((6000.0)*x4266);
IkReal x4272=((456.0)*x4268);
IkReal x4273=((2000.0)*x4266);
IkReal x4274=((152.0)*x4268);
IkReal x4275=(cj4*r21*sj5);
IkReal x4276=(r22*x4264);
IkReal x4277=(cj4*r20*sj5);
IkReal x4278=((2055.0)*x4276);
IkReal x4279=((465.0)*x4277);
IkReal x4280=((465.0)*r21*x4265);
IkReal x4281=((155.0)*x4277);
IkReal x4282=((155.0)*r21*x4265);
IkReal x4283=((685.0)*x4276);
IkReal x4284=(x4270*x4275);
IkReal x4285=(r20*x4265*x4270);
IkReal x4286=(x4267*x4275);
IkReal x4287=(r20*x4265*x4267);
IkReal x4288=(x4284+x4271);
IkReal x4289=(x4286+x4273);
IkReal x4290=(x4280+x4285+x4272+x4279+x4278);
IkReal x4291=(x4282+x4283+x4281+x4287+x4274);
op[0]=(x4269*(((((-1.0)*x4291))+x4289+x4263)));
op[1]=0.428;
op[2]=(x4269*(((((-1.0)*x4290))+x4288+x4263)));
op[3]=0.856;
op[4]=(x4269*(((((-1.0)*x4290))+x4288+(((-1.0)*x4263)))));
op[5]=0.428;
op[6]=(x4269*(((((-1.0)*x4291))+x4289+(((-1.0)*x4263)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4293=((0.93)*sj4);
IkReal x4294=(cj5*r20);
IkReal x4295=((0.304)*sj0);
IkReal x4296=(cj5*r10);
IkReal x4297=(r11*sj5);
IkReal x4298=(r21*sj5);
IkReal x4299=((0.31)*sj4);
IkReal x4300=(cj0*px);
IkReal x4301=(py*sj0);
IkReal x4302=(r20*sj5);
IkReal x4303=(cj5*r21);
IkReal x4304=(cj4*r22);
IkReal x4305=((0.912)*sj0);
IkReal x4306=((0.912)*cj0);
IkReal x4307=(r01*sj5);
IkReal x4308=(cj5*r00);
IkReal x4309=((0.304)*cj0);
IkReal x4310=((1.37)*x4303);
IkReal x4311=((1.37)*x4302);
IkReal x4312=((4.11)*x4302);
IkReal x4313=((4.11)*x4303);
IkReal x4314=(x4295*x4296);
IkReal x4315=(x4308*x4309);
IkReal x4316=(x4298*x4299);
IkReal x4317=(x4306*x4308);
IkReal x4318=(x4296*x4305);
IkReal x4319=(x4293*x4298);
IkReal x4320=(x4310+x4311+x4314+x4315+x4316);
IkReal x4321=(x4312+x4313+x4317+x4318+x4319);
IkReal x4322=(((x4293*x4294))+(((12.0)*x4301))+(((12.0)*x4300))+(((0.93)*x4304))+((x4306*x4307))+((x4297*x4305)));
IkReal x4323=((((0.31)*x4304))+((x4307*x4309))+((x4295*x4297))+(((4.0)*x4301))+(((4.0)*x4300))+((x4294*x4299)));
j1evalpoly[0]=((0.214)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x4323))+x4320))))+(((-1.0)*x4323))+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x4322))+x4321))))+(((2.276)*htj1))+x4320+(((htj1*htj1)*(((0.214)+(((-1.0)*x4322))+x4321)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4324=((1.0)*cj1);
IkReal x4325=(cj4*r22);
IkReal x4326=(cj5*r21);
IkReal x4327=((1.0)*sj1);
IkReal x4328=(r20*sj5);
IkReal x4329=(r21*sj4*sj5);
IkReal x4330=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x4324*x4326))+(((-1.0)*x4324*x4328))+(((-1.0)*x4327*x4329))+((sj1*x4330))+((sj1*x4325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4324*x4325))+(((-1.0)*x4324*x4330))+(((-1.0)*x4327*x4328))+(((-1.0)*x4326*x4327))+((cj1*x4329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4324*x4326))+(((-1.0)*x4324*x4328))+(((-1.0)*x4327*x4329))+((sj1*x4330))+((sj1*x4325))))+IKsqr(((((-1.0)*x4324*x4325))+(((-1.0)*x4324*x4330))+(((-1.0)*x4327*x4328))+(((-1.0)*x4326*x4327))+((cj1*x4329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4324*x4326))+(((-1.0)*x4324*x4328))+(((-1.0)*x4327*x4329))+((sj1*x4330))+((sj1*x4325))), ((((-1.0)*x4324*x4325))+(((-1.0)*x4324*x4330))+(((-1.0)*x4327*x4328))+(((-1.0)*x4326*x4327))+((cj1*x4329))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4331=IKcos(j2);
IkReal x4332=IKsin(j2);
IkReal x4333=(r10*sj0);
IkReal x4334=((0.076)*cj5);
IkReal x4335=(cj0*r00);
IkReal x4336=((0.076)*sj5);
IkReal x4337=(r11*sj0);
IkReal x4338=((1.0)*sj5);
IkReal x4339=((1.0)*cj0);
IkReal x4340=(cj0*r01);
IkReal x4341=((1.0)*sj1);
IkReal x4342=((0.3425)*sj1);
IkReal x4343=(sj4*sj5);
IkReal x4344=((1.0)*sj0);
IkReal x4345=(cj1*x4331);
IkReal x4346=((1.0)*cj5*sj4);
IkReal x4347=(cj1*x4332);
IkReal x4348=(sj1*x4332);
IkReal x4349=(x4331*x4341);
IkReal x4350=((1.0)*x4347);
IkReal x4351=(x4350+x4349);
evalcond[0]=((((-1.0)*r20*x4338))+(((-1.0)*x4351))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x4338))+x4345+(((-1.0)*x4332*x4341)));
evalcond[2]=(((cj5*x4337))+((sj5*x4335))+((sj5*x4333))+((cj5*x4340))+x4348+(((-1.0)*x4345)));
CheckValue<IkReal> x4352=IKPowWithIntegerCheck(cj4,-1);
if(!x4352.valid){
continue;
}
evalcond[3]=((((0.3425)*x4345))+(((0.0775)*x4347))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-1.0)*x4332*x4342))+(((0.0775)*sj1*x4331))+(((-0.076)*r22*sj4*(x4352.value))));
evalcond[4]=((((-1.0)*x4333*x4346))+(((-1.0)*cj4*r12*x4344))+(((-1.0)*cj4*r02*x4339))+(((-1.0)*x4351))+((x4340*x4343))+((x4337*x4343))+(((-1.0)*x4335*x4346)));
evalcond[5]=((((-1.0)*py*x4344))+((x4334*x4335))+(((0.0775)*x4345))+(((0.2845)*sj1))+(((-0.0775)*x4348))+(((-1.0)*px*x4339))+(((-1.0)*x4331*x4342))+(((0.0535)*cj1))+((x4333*x4334))+(((-0.3425)*x4347))+(((-1.0)*x4336*x4337))+(((-1.0)*x4336*x4340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4353=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x4353) < -0.00001)
continue;
IkReal x4354=IKabs(IKsqrt(x4353));
IkReal x4360 = x4353;
if(IKabs(x4360)==0){
continue;
}
IkReal x4355=pow(x4360,-0.5);
IkReal x4356=((13.1578947368421)*x4355);
CheckValue<IkReal> x4361=IKPowWithIntegerCheck(x4354,-1);
if(!x4361.valid){
continue;
}
IkReal x4357=x4361.value;
IkReal x4358=(r22*x4357);
if((((1.0)+(((-1.0)*(x4358*x4358))))) < -0.00001)
continue;
IkReal x4359=IKsqrt(((1.0)+(((-1.0)*(x4358*x4358)))));
if( (x4358) < -1-IKFAST_SINCOS_THRESH || (x4358) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4362 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4362.valid){
continue;
}
IkReal gconst0=((IKasin(x4358))+(((-1.0)*(x4362.value))));
IkReal gconst1=((((-1.0)*rxp0_2*x4356*x4358))+((rxp1_2*x4356*x4359)));
IkReal gconst2=((((-1.0)*rxp0_2*x4356*x4359))+(((-1.0)*rxp1_2*x4356*x4358)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4363=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x4363.valid){
continue;
}
if( ((r22*(x4363.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4363.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4364 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4364.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x4363.value))))))+(x4364.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4365=((0.076)*cj3);
IkReal x4366=((1.0)*cj3);
CheckValue<IkReal> x4367 = IKatan2WithCheck(IkReal((((gconst2*r10*x4365))+(((-1.0)*gconst1*r11*x4365))+(((-1.0)*py*x4366)))),IkReal(((((-1.0)*px*x4366))+(((-1.0)*gconst1*r01*x4365))+((gconst2*r00*x4365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4367.valid){
continue;
}
CheckValue<IkReal> x4368=IKPowWithIntegerCheck(IKsign((((r22*(((((-0.076)*(gconst2*gconst2)))+(((-0.076)*(gconst1*gconst1)))))))+(((-1.0)*gconst1*rxp0_2))+(((-1.0)*gconst2*rxp1_2)))),-1);
if(!x4368.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4367.value)+(((1.5707963267949)*(x4368.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4369=IKcos(j0);
IkReal x4370=IKsin(j0);
IkReal x4371=(cj4*gconst1);
IkReal x4372=((1.0)*sj4);
IkReal x4373=(gconst2*r00);
IkReal x4374=((1.0)*cj4);
IkReal x4375=(gconst1*r01);
IkReal x4376=(r11*x4369);
IkReal x4377=(r02*x4370);
IkReal x4378=((0.076)*x4370);
IkReal x4379=(r12*x4369);
IkReal x4380=((1.0)*x4370);
IkReal x4381=(gconst2*r10*x4369);
evalcond[0]=(((gconst1*r10*x4369))+cj3+(((-1.0)*gconst1*r00*x4380))+(((-1.0)*gconst2*r01*x4380))+((gconst2*x4376)));
evalcond[1]=((((-0.076)*gconst1*x4376))+((px*x4370))+((x4375*x4378))+(((0.076)*x4381))+(((-1.0)*x4373*x4378))+(((-1.0)*py*x4369)));
evalcond[2]=(((gconst1*sj4*x4376))+((sj4*x4370*x4373))+(((-1.0)*x4372*x4381))+(((-1.0)*x4374*x4379))+((cj4*x4377))+(((-1.0)*x4370*x4372*x4375)));
evalcond[3]=(((x4371*x4376))+((cj4*x4370*x4373))+((sj4*x4379))+(((-1.0)*sj3))+(((-1.0)*r01*x4371*x4380))+(((-1.0)*x4374*x4381))+(((-1.0)*x4372*x4377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4382=x4353;
if((x4382) < -0.00001)
continue;
IkReal x4383=IKabs(IKsqrt(x4382));
IkReal x4390 = x4382;
if(IKabs(x4390)==0){
continue;
}
IkReal x4384=pow(x4390,-0.5);
IkReal x4385=((13.1578947368421)*x4384);
CheckValue<IkReal> x4391=IKPowWithIntegerCheck(x4383,-1);
if(!x4391.valid){
continue;
}
IkReal x4386=x4391.value;
IkReal x4387=(r22*x4386);
if((((1.0)+(((-1.0)*(x4387*x4387))))) < -0.00001)
continue;
IkReal x4388=IKsqrt(((1.0)+(((-1.0)*(x4387*x4387)))));
if( (x4387) < -1-IKFAST_SINCOS_THRESH || (x4387) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4392 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4392.valid){
continue;
}
IkReal x4389=((IKasin(x4387))+(((-1.0)*(x4392.value))));
sj5=gconst1;
cj5=gconst2;
j5=x4389;
IkReal gconst0=x4389;
IkReal gconst1=((((-1.0)*rxp0_2*x4385*x4387))+((rxp1_2*x4385*x4388)));
IkReal gconst2=((((-1.0)*rxp1_2*x4385*x4387))+(((-1.0)*rxp0_2*x4385*x4388)));
IkReal x4393=((1.138)*cj3);
IkReal x4394=((12.0)*pz);
IkReal x4395=(gconst2*sj4);
IkReal x4396=((0.31)*sj0);
IkReal x4397=((0.93)*sj4);
IkReal x4398=((0.93)*cj4);
IkReal x4399=((1.37)*r20);
IkReal x4400=(gconst2*r20);
IkReal x4401=((4.0)*pz);
IkReal x4402=((0.31)*cj4);
IkReal x4403=(gconst1*r21);
IkReal x4404=((0.912)*cj3);
IkReal x4405=((4.11)*r20);
IkReal x4406=(gconst1*r11);
IkReal x4407=(cj0*r02);
IkReal x4408=(cj0*r00);
IkReal x4409=((0.31)*sj4);
IkReal x4410=((0.304)*cj3);
IkReal x4411=(cj3*x4394);
IkReal x4412=(r22*x4397);
IkReal x4413=((0.912)*x4403);
IkReal x4414=(cj0*gconst1*r01);
IkReal x4415=((4.11)*cj4*r22);
IkReal x4416=((1.37)*cj4*r22);
IkReal x4417=(x4398*x4400);
IkReal x4418=(x4400*x4404);
IkReal x4419=(cj3*x4415);
IkReal x4420=(x4398*x4403);
IkReal x4421=(x4403*x4404);
IkReal x4422=((4.11)*sj4*x4403);
IkReal x4423=(cj3*sj4*x4403);
IkReal x4424=(cj3*x4395*x4405);
IkReal x4425=(cj3*x4422);
IkReal x4426=(sj0*x4397*x4406);
IkReal x4427=(x4397*x4414);
IkReal x4428=(x4419+x4418+x4417+x4424);
IkReal x4429=(x4413+x4422+x4426+x4427+x4394);
IkReal x4430=(x4412+x4411+x4420+x4421+x4425);
IkReal x4431=(x4415+((r12*sj0*x4398))+(((0.93)*x4395*x4408))+((x4395*x4405))+(((0.93)*r10*sj0*x4395))+(((0.912)*x4400))+((x4398*x4407)));
j1eval[0]=((1.712)+(IKabs((x4428+(((-1.0)*x4430))+x4393)))+(IKabs(((((-1.0)*x4393))+(((-1.0)*x4403*x4410))+((x4400*x4402))+((x4400*x4410))+(((-1.0)*cj3*x4401))+(((-1.0)*x4402*x4403))+((cj3*x4395*x4399))+(((-1.0)*r22*x4409))+(((-1.37)*x4423))+((cj3*x4416)))))+(IKabs(((1.138)+((sj4*x4396*x4406))+x4401+(((0.304)*x4403))+(((1.37)*sj4*x4403))+(((-1.0)*x4395*x4399))+(((-0.31)*x4395*x4408))+(((-1.0)*x4416))+(((-1.0)*x4402*x4407))+(((-1.0)*cj4*r12*x4396))+((x4409*x4414))+(((-1.0)*r10*x4395*x4396))+(((-0.304)*x4400)))))+(IKabs(((((-1.0)*x4393))+x4428+(((-1.0)*x4430)))))+(IKabs(((1.138)+x4429+(((-1.0)*x4431)))))+(IKabs(((-1.138)+x4429+(((-1.0)*x4431)))))+(((1.712)*(IKabs(cj3)))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4432=((1.138)*cj3);
IkReal x4433=(r22*sj4);
IkReal x4434=(gconst2*r20);
IkReal x4435=((0.31)*cj4);
IkReal x4436=((0.304)*cj3);
IkReal x4437=(gconst1*r21);
IkReal x4438=((0.912)*cj3);
IkReal x4439=(cj3*sj4);
IkReal x4440=((0.93)*cj4);
IkReal x4441=(cj3*pz);
IkReal x4442=((12.0)*x4441);
IkReal x4443=((0.93)*x4433);
IkReal x4444=((-0.428)*cj3);
IkReal x4445=((0.31)*x4433);
IkReal x4446=((4.0)*x4441);
IkReal x4447=(cj3*cj4*r22);
IkReal x4448=(x4434*x4440);
IkReal x4449=(x4434*x4438);
IkReal x4450=((4.11)*x4447);
IkReal x4451=(x4437*x4440);
IkReal x4452=(x4437*x4438);
IkReal x4453=((1.37)*x4447);
IkReal x4454=(x4434*x4435);
IkReal x4455=(x4434*x4436);
IkReal x4456=(x4435*x4437);
IkReal x4457=(x4436*x4437);
IkReal x4458=(x4437*x4439);
IkReal x4459=((4.11)*x4434*x4439);
IkReal x4460=((4.11)*x4458);
IkReal x4461=((1.37)*x4434*x4439);
IkReal x4462=((1.37)*x4458);
IkReal x4463=(x4453+x4455+x4454+x4461);
IkReal x4464=(x4448+x4449+x4450+x4459);
IkReal x4465=(x4442+x4443+x4452+x4451+x4460);
IkReal x4466=(x4445+x4446+x4457+x4456+x4462);
op[0]=(x4463+(((-1.0)*x4432))+(((-1.0)*x4466)));
op[1]=x4444;
op[2]=(x4464+(((-1.0)*x4432))+(((-1.0)*x4465)));
op[3]=((-0.856)*cj3);
op[4]=(x4432+x4464+(((-1.0)*x4465)));
op[5]=x4444;
op[6]=(x4432+x4463+(((-1.0)*x4466)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4467=((4.0)*pz);
IkReal x4468=((12.0)*pz);
IkReal x4469=(gconst2*sj4);
IkReal x4470=((0.31)*sj0);
IkReal x4471=((0.93)*cj4);
IkReal x4472=(cj0*r02);
IkReal x4473=(gconst1*r21);
IkReal x4474=(gconst1*sj4);
IkReal x4475=((0.93)*cj0);
IkReal x4476=((0.93)*sj0);
IkReal x4477=(cj4*r22);
IkReal x4478=((0.31)*cj0);
IkReal x4479=(gconst2*r20);
IkReal x4480=((0.304)*x4473);
IkReal x4481=((0.912)*x4473);
IkReal x4482=((4.11)*sj4*x4473);
IkReal x4483=((1.37)*sj4*x4473);
IkReal x4484=(r11*x4470*x4474);
IkReal x4485=(r11*x4474*x4476);
IkReal x4486=(r01*x4474*x4475);
IkReal x4487=(r01*x4474*x4478);
IkReal x4488=(x4485+x4486+x4481+x4482+x4468);
IkReal x4489=(x4484+x4487+x4480+x4483+x4467);
IkReal x4490=(((x4471*x4472))+(((4.11)*x4477))+((r12*sj0*x4471))+((r10*x4469*x4476))+(((4.11)*r20*x4469))+(((0.912)*x4479))+((r00*x4469*x4475)));
IkReal x4491=((((1.37)*x4477))+(((0.31)*cj4*x4472))+((cj4*r12*x4470))+(((0.304)*x4479))+(((1.37)*r20*x4469))+((r10*x4469*x4470))+((r00*x4469*x4478)));
j1evalpoly[0]=((-1.138)+x4489+(((0.428)*htj1))+(((htj1*htj1*htj1*htj1)*(((1.138)+x4488+(((-1.0)*x4490))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x4489+(((-1.0)*x4491))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.138)+x4488+(((-1.0)*x4490))))))+(((-1.0)*x4491)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4492=x4353;
if((x4492) < -0.00001)
continue;
IkReal x4493=IKabs(IKsqrt(x4492));
IkReal x4500 = x4492;
if(IKabs(x4500)==0){
continue;
}
IkReal x4494=pow(x4500,-0.5);
IkReal x4495=((13.1578947368421)*x4494);
CheckValue<IkReal> x4501=IKPowWithIntegerCheck(x4493,-1);
if(!x4501.valid){
continue;
}
IkReal x4496=x4501.value;
IkReal x4497=(r22*x4496);
if((((1.0)+(((-1.0)*(x4497*x4497))))) < -0.00001)
continue;
IkReal x4498=IKsqrt(((1.0)+(((-1.0)*(x4497*x4497)))));
CheckValue<IkReal> x4502 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4502.valid){
continue;
}
if( (x4497) < -1-IKFAST_SINCOS_THRESH || (x4497) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4499=((((-1.0)*(x4502.value)))+(IKasin(x4497)));
sj5=gconst1;
cj5=gconst2;
j5=x4499;
IkReal gconst0=x4499;
IkReal gconst1=(((rxp1_2*x4495*x4498))+(((-1.0)*rxp0_2*x4495*x4497)));
IkReal gconst2=((((-1.0)*rxp0_2*x4495*x4498))+(((-1.0)*rxp1_2*x4495*x4497)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4503=x4353;
if((x4503) < -0.00001)
continue;
IkReal x4504=IKabs(IKsqrt(x4503));
IkReal x4511 = x4503;
if(IKabs(x4511)==0){
continue;
}
IkReal x4505=pow(x4511,-0.5);
IkReal x4506=((13.1578947368421)*x4505);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(x4504,-1);
if(!x4512.valid){
continue;
}
IkReal x4507=x4512.value;
IkReal x4508=(r22*x4507);
if((((1.0)+(((-1.0)*(x4508*x4508))))) < -0.00001)
continue;
IkReal x4509=IKsqrt(((1.0)+(((-1.0)*(x4508*x4508)))));
if( (x4508) < -1-IKFAST_SINCOS_THRESH || (x4508) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
IkReal x4510=((IKasin(x4508))+(((-1.0)*(x4513.value))));
sj5=gconst1;
cj5=gconst2;
j5=x4510;
IkReal gconst0=x4510;
IkReal gconst1=((((-1.0)*rxp0_2*x4506*x4508))+((rxp1_2*x4506*x4509)));
IkReal gconst2=((((-1.0)*rxp1_2*x4506*x4508))+(((-1.0)*rxp0_2*x4506*x4509)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4514=x4353;
if((x4514) < -0.00001)
continue;
IkReal x4515=IKabs(IKsqrt(x4514));
IkReal x4522 = x4514;
if(IKabs(x4522)==0){
continue;
}
IkReal x4516=pow(x4522,-0.5);
IkReal x4517=((13.1578947368421)*x4516);
CheckValue<IkReal> x4523=IKPowWithIntegerCheck(x4515,-1);
if(!x4523.valid){
continue;
}
IkReal x4518=x4523.value;
IkReal x4519=(r22*x4518);
if((((1.0)+(((-1.0)*(x4519*x4519))))) < -0.00001)
continue;
IkReal x4520=IKsqrt(((1.0)+(((-1.0)*(x4519*x4519)))));
if( (x4519) < -1-IKFAST_SINCOS_THRESH || (x4519) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4524 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4524.valid){
continue;
}
IkReal x4521=((IKasin(x4519))+(((-1.0)*(x4524.value))));
sj5=gconst1;
cj5=gconst2;
j5=x4521;
IkReal gconst0=x4521;
IkReal gconst1=((((-1.0)*rxp0_2*x4517*x4519))+((rxp1_2*x4517*x4520)));
IkReal gconst2=((((-1.0)*rxp1_2*x4517*x4519))+(((-1.0)*rxp0_2*x4517*x4520)));
IkReal x4525=(cj3*sj3);
j2eval[0]=x4525;
j2eval[1]=IKsign(x4525);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4526=(gconst2*r21);
IkReal x4527=(cj4*r22);
IkReal x4528=((1.0)*cj1);
IkReal x4529=(r20*sj1);
IkReal x4530=(gconst2*sj4);
IkReal x4531=(gconst1*r21*sj4);
if( IKabs((((cj1*x4526))+((sj1*x4527))+((x4529*x4530))+((cj1*gconst1*r20))+(((-1.0)*sj1*x4531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x4526))+(((-1.0)*r20*x4528*x4530))+((gconst1*x4529))+(((-1.0)*x4527*x4528))+((cj1*x4531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x4526))+((sj1*x4527))+((x4529*x4530))+((cj1*gconst1*r20))+(((-1.0)*sj1*x4531))))+IKsqr((((sj1*x4526))+(((-1.0)*r20*x4528*x4530))+((gconst1*x4529))+(((-1.0)*x4527*x4528))+((cj1*x4531))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x4526))+((sj1*x4527))+((x4529*x4530))+((cj1*gconst1*r20))+(((-1.0)*sj1*x4531))), (((sj1*x4526))+(((-1.0)*r20*x4528*x4530))+((gconst1*x4529))+(((-1.0)*x4527*x4528))+((cj1*x4531))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4532=IKcos(j2);
IkReal x4533=IKsin(j2);
IkReal x4534=(r11*sj0);
IkReal x4535=(cj0*r01);
IkReal x4536=(gconst1*sj4);
IkReal x4537=((1.0)*cj0);
IkReal x4538=((1.0)*sj1);
IkReal x4539=(gconst2*sj4);
IkReal x4540=(r10*sj0);
IkReal x4541=((0.076)*gconst2);
IkReal x4542=((0.076)*gconst1);
IkReal x4543=((1.0)*sj0);
IkReal x4544=((0.3425)*sj1);
IkReal x4545=(cj0*r00);
IkReal x4546=((1.0)*r21);
IkReal x4547=(cj1*x4532);
IkReal x4548=(cj1*x4533);
IkReal x4549=(sj1*x4532);
IkReal x4550=(x4533*x4538);
evalcond[0]=(x4549+x4548+(((-1.0)*gconst2*x4546))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+x4547+(((-1.0)*x4550))+(((-1.0)*x4536*x4546))+((r20*x4539)));
evalcond[2]=(x4547+(((-1.0)*x4550))+((gconst2*x4535))+((gconst2*x4534))+((gconst1*x4545))+((gconst1*x4540)));
evalcond[3]=((((0.3425)*x4547))+(((-1.0)*x4533*x4544))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*r20*x4541))+pz+((r21*x4542))+(((0.0775)*x4548))+(((0.0775)*x4549)));
evalcond[4]=((((-1.0)*cj4*r12*x4543))+(((-1.0)*x4548))+(((-1.0)*r00*x4537*x4539))+(((-1.0)*x4539*x4540))+((x4534*x4536))+(((-1.0)*cj4*r02*x4537))+(((-1.0)*x4532*x4538))+((x4535*x4536)));
evalcond[5]=((((-1.0)*x4532*x4544))+(((-1.0)*px*x4537))+(((-1.0)*x4534*x4542))+(((0.2845)*sj1))+(((-0.3425)*x4548))+(((-1.0)*x4535*x4542))+(((-1.0)*py*x4543))+(((0.0535)*cj1))+(((0.0775)*x4547))+((x4540*x4541))+((x4541*x4545))+(((-0.0775)*sj1*x4533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4551=((1.0)*r22);
IkReal x4552=(cj1*cj4);
IkReal x4553=(gconst2*r20);
IkReal x4554=(cj4*sj1);
IkReal x4555=(sj1*sj4);
IkReal x4556=(cj1*sj4);
IkReal x4557=((1.0)*gconst1*r21);
if( IKabs((((x4552*x4553))+((x4553*x4555))+(((-1.0)*x4552*x4557))+(((-1.0)*x4555*x4557))+(((-1.0)*x4551*x4556))+((r22*x4554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4553*x4554))+(((-1.0)*x4551*x4555))+(((-1.0)*x4551*x4552))+((gconst1*r21*x4556))+(((-1.0)*x4553*x4556))+(((-1.0)*x4554*x4557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4552*x4553))+((x4553*x4555))+(((-1.0)*x4552*x4557))+(((-1.0)*x4555*x4557))+(((-1.0)*x4551*x4556))+((r22*x4554))))+IKsqr((((x4553*x4554))+(((-1.0)*x4551*x4555))+(((-1.0)*x4551*x4552))+((gconst1*r21*x4556))+(((-1.0)*x4553*x4556))+(((-1.0)*x4554*x4557))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4552*x4553))+((x4553*x4555))+(((-1.0)*x4552*x4557))+(((-1.0)*x4555*x4557))+(((-1.0)*x4551*x4556))+((r22*x4554))), (((x4553*x4554))+(((-1.0)*x4551*x4555))+(((-1.0)*x4551*x4552))+((gconst1*r21*x4556))+(((-1.0)*x4553*x4556))+(((-1.0)*x4554*x4557))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4558=IKcos(j2);
IkReal x4559=IKsin(j2);
IkReal x4560=(gconst1*sj4);
IkReal x4561=(cj0*r01);
IkReal x4562=((1.0)*cj4);
IkReal x4563=(gconst1*r21);
IkReal x4564=(cj0*r02);
IkReal x4565=(gconst2*r20);
IkReal x4566=((1.0)*sj1);
IkReal x4567=(r11*sj0);
IkReal x4568=((1.0)*sj4);
IkReal x4569=(cj4*gconst1);
IkReal x4570=((0.076)*gconst1);
IkReal x4571=((0.3425)*sj1);
IkReal x4572=(r12*sj0);
IkReal x4573=(cj1*x4558);
IkReal x4574=(gconst2*r10*sj0);
IkReal x4575=(cj0*gconst2*r00);
IkReal x4576=(cj1*x4559);
IkReal x4577=(sj1*x4559);
IkReal x4578=(x4558*x4566);
IkReal x4579=((1.0)*x4576);
IkReal x4580=(x4578+x4579);
evalcond[0]=(((cj4*r22))+((sj4*x4565))+x4573+(((-1.0)*x4559*x4566))+(((-1.0)*r21*x4560)));
evalcond[1]=((((-1.0)*x4580))+((cj4*x4565))+(((-1.0)*r22*x4568))+(((-1.0)*x4562*x4563)));
evalcond[2]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.076)*x4565))+(((0.0775)*sj1*x4558))+(((0.076)*x4563))+pz+(((0.3425)*x4573))+(((-1.0)*x4559*x4571))+(((0.0775)*x4576)));
evalcond[3]=(((x4567*x4569))+((sj4*x4564))+x4577+((sj4*x4572))+(((-1.0)*x4562*x4575))+(((-1.0)*x4562*x4574))+((x4561*x4569))+(((-1.0)*x4573)));
evalcond[4]=((((-1.0)*x4580))+(((-1.0)*x4568*x4575))+(((-1.0)*x4568*x4574))+(((-1.0)*x4562*x4572))+((x4560*x4561))+((x4560*x4567))+(((-1.0)*x4562*x4564)));
evalcond[5]=((((-1.0)*x4567*x4570))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-0.0775)*x4577))+(((-1.0)*x4558*x4571))+(((0.076)*x4574))+(((0.076)*x4575))+(((-0.3425)*x4576))+(((-1.0)*py*sj0))+(((0.0775)*x4573))+(((-1.0)*x4561*x4570))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4581=((1.0)*cj1);
IkReal x4582=(cj4*r22);
IkReal x4583=(sj1*sj4);
IkReal x4584=(gconst2*r20);
IkReal x4585=(gconst2*r21);
IkReal x4586=(gconst1*r21);
IkReal x4587=(gconst1*r20);
IkReal x4588=((1.0)*sj1);
if( IKabs((((sj1*x4582))+((x4583*x4584))+(((-1.0)*x4581*x4587))+(((-1.0)*x4581*x4585))+(((-1.0)*x4583*x4586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*sj4*x4586))+(((-1.0)*sj4*x4581*x4584))+(((-1.0)*x4587*x4588))+(((-1.0)*x4581*x4582))+(((-1.0)*x4585*x4588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x4582))+((x4583*x4584))+(((-1.0)*x4581*x4587))+(((-1.0)*x4581*x4585))+(((-1.0)*x4583*x4586))))+IKsqr((((cj1*sj4*x4586))+(((-1.0)*sj4*x4581*x4584))+(((-1.0)*x4587*x4588))+(((-1.0)*x4581*x4582))+(((-1.0)*x4585*x4588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x4582))+((x4583*x4584))+(((-1.0)*x4581*x4587))+(((-1.0)*x4581*x4585))+(((-1.0)*x4583*x4586))), (((cj1*sj4*x4586))+(((-1.0)*sj4*x4581*x4584))+(((-1.0)*x4587*x4588))+(((-1.0)*x4581*x4582))+(((-1.0)*x4585*x4588))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4589=IKcos(j2);
IkReal x4590=IKsin(j2);
IkReal x4591=(r11*sj0);
IkReal x4592=(cj0*r01);
IkReal x4593=(gconst1*sj4);
IkReal x4594=((1.0)*cj0);
IkReal x4595=((1.0)*sj1);
IkReal x4596=(gconst2*sj4);
IkReal x4597=(r10*sj0);
IkReal x4598=((0.076)*gconst2);
IkReal x4599=((0.076)*gconst1);
IkReal x4600=((1.0)*r21);
IkReal x4601=((1.0)*sj0);
IkReal x4602=((0.3425)*sj1);
IkReal x4603=(cj0*r00);
IkReal x4604=(cj1*x4589);
IkReal x4605=(cj1*x4590);
IkReal x4606=(sj1*x4590);
IkReal x4607=(x4589*x4595);
IkReal x4608=((1.0)*x4605);
IkReal x4609=(x4608+x4607);
evalcond[0]=((((-1.0)*x4609))+(((-1.0)*gconst2*x4600))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x4593*x4600))+x4604+((r20*x4596))+(((-1.0)*x4590*x4595)));
evalcond[2]=(((gconst1*x4603))+(((-1.0)*x4604))+((gconst1*x4597))+x4606+((gconst2*x4591))+((gconst2*x4592)));
evalcond[3]=((((-1.0)*x4590*x4602))+((r21*x4599))+(((0.0775)*sj1*x4589))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.3425)*x4604))+(((-1.0)*r20*x4598))+(((0.0775)*x4605)));
evalcond[4]=((((-1.0)*x4609))+(((-1.0)*r00*x4594*x4596))+(((-1.0)*cj4*r02*x4594))+((x4591*x4593))+(((-1.0)*x4596*x4597))+(((-1.0)*cj4*r12*x4601))+((x4592*x4593)));
evalcond[5]=((((-1.0)*px*x4594))+(((0.2845)*sj1))+(((-0.3425)*x4605))+(((-1.0)*x4591*x4599))+(((0.0535)*cj1))+((x4597*x4598))+(((-1.0)*x4592*x4599))+(((-1.0)*x4589*x4602))+((x4598*x4603))+(((-0.0775)*x4606))+(((0.0775)*x4604))+(((-1.0)*py*x4601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4610=(cj1*gconst1);
IkReal x4611=(sj1*sj3);
IkReal x4612=(r22*sj4);
IkReal x4613=(gconst1*sj1);
IkReal x4614=(cj0*cj3);
IkReal x4615=(cj4*r20);
IkReal x4616=(gconst2*sj1);
IkReal x4617=(cj4*r21*sj3);
IkReal x4618=(cj3*r10*sj0);
IkReal x4619=((1.0)*cj1*gconst2);
IkReal x4620=(cj3*r11*sj0);
CheckValue<IkReal> x4621 = IKatan2WithCheck(IkReal((((r01*x4614*x4616))+((x4616*x4620))+(((-1.0)*sj3*x4615*x4619))+((r00*x4613*x4614))+((x4610*x4617))+((x4613*x4618))+((cj1*sj3*x4612)))),IkReal(((((-1.0)*gconst2*x4611*x4615))+((cj4*gconst1*r21*x4611))+(((-1.0)*x4610*x4618))+((x4611*x4612))+(((-1.0)*r01*x4614*x4619))+(((-1.0)*x4619*x4620))+(((-1.0)*r00*x4610*x4614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4621.valid){
continue;
}
CheckValue<IkReal> x4622=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x4622.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4621.value)+(((1.5707963267949)*(x4622.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4623=IKcos(j2);
IkReal x4624=IKsin(j2);
IkReal x4625=(gconst2*sj0);
IkReal x4626=(cj3*sj1);
IkReal x4627=(cj0*r01);
IkReal x4628=(gconst1*sj4);
IkReal x4629=((1.0)*cj4);
IkReal x4630=(gconst1*r21);
IkReal x4631=(gconst2*r20);
IkReal x4632=(r12*sj0);
IkReal x4633=(r11*sj0);
IkReal x4634=((1.0)*sj4);
IkReal x4635=(cj0*r02);
IkReal x4636=(cj4*gconst1);
IkReal x4637=((0.076)*gconst1);
IkReal x4638=((1.0)*r21);
IkReal x4639=(cj1*x4623);
IkReal x4640=((1.0)*x4624);
IkReal x4641=(sj1*x4623);
IkReal x4642=(cj0*gconst2*r00);
IkReal x4643=(cj1*x4624);
IkReal x4644=(sj1*x4624);
evalcond[0]=(((sj3*x4643))+((sj3*x4641))+(((-1.0)*gconst1*r20))+(((-1.0)*gconst2*x4638)));
evalcond[1]=(((cj4*r22))+((sj4*x4631))+x4639+(((-1.0)*x4628*x4638))+(((-1.0)*sj1*x4640)));
evalcond[2]=(((cj4*x4631))+((x4623*x4626))+((cj3*x4643))+(((-1.0)*x4629*x4630))+(((-1.0)*r22*x4634)));
evalcond[3]=(((r11*x4625))+(((-1.0)*sj1*sj3*x4640))+((gconst2*x4627))+((sj3*x4639))+((gconst1*r10*sj0))+((cj0*gconst1*r00)));
evalcond[4]=((((-0.3425)*x4644))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x4643))+(((0.0775)*x4641))+(((0.3425)*x4639))+pz+(((-0.076)*x4631))+(((0.076)*x4630)));
evalcond[5]=(((sj4*x4632))+((sj4*x4635))+((x4633*x4636))+(((-1.0)*x4629*x4642))+(((-1.0)*r10*x4625*x4629))+(((-1.0)*x4626*x4640))+((cj3*x4639))+((x4627*x4636)));
evalcond[6]=((((-1.0)*cj1*x4640))+(((-1.0)*x4641))+(((-1.0)*r10*x4625*x4634))+((x4627*x4628))+(((-1.0)*x4634*x4642))+((x4628*x4633))+(((-1.0)*x4629*x4635))+(((-1.0)*x4629*x4632)));
evalcond[7]=((((0.076)*x4642))+(((-0.3425)*x4643))+(((-0.3425)*x4641))+(((-0.0775)*x4644))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((0.0775)*x4639))+(((-1.0)*py*sj0))+(((-1.0)*x4627*x4637))+(((-1.0)*x4633*x4637))+(((0.076)*r10*x4625))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4645=(cj1*cj3);
IkReal x4646=(cj4*r22);
IkReal x4647=(gconst1*r21);
IkReal x4648=(cj3*sj1);
IkReal x4649=(r22*sj4);
IkReal x4650=(cj4*sj1);
IkReal x4651=(gconst2*r20);
IkReal x4652=((1.0)*sj4);
IkReal x4653=(cj1*cj4);
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4654.valid){
continue;
}
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal((((x4646*x4648))+((x4647*x4653))+(((-1.0)*x4647*x4648*x4652))+((sj4*x4648*x4651))+((cj1*x4649))+(((-1.0)*x4651*x4653)))),IkReal(((((-1.0)*x4650*x4651))+(((-1.0)*x4645*x4646))+(((-1.0)*x4645*x4651*x4652))+((x4647*x4650))+((sj1*x4649))+((sj4*x4645*x4647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4654.value)))+(x4655.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4656=IKcos(j2);
IkReal x4657=IKsin(j2);
IkReal x4658=(gconst2*sj0);
IkReal x4659=(cj3*sj1);
IkReal x4660=(cj0*r01);
IkReal x4661=(gconst1*sj4);
IkReal x4662=((1.0)*cj4);
IkReal x4663=(gconst1*r21);
IkReal x4664=(gconst2*r20);
IkReal x4665=(r12*sj0);
IkReal x4666=(r11*sj0);
IkReal x4667=((1.0)*sj4);
IkReal x4668=(cj0*r02);
IkReal x4669=(cj4*gconst1);
IkReal x4670=((0.076)*gconst1);
IkReal x4671=((1.0)*r21);
IkReal x4672=(cj1*x4656);
IkReal x4673=((1.0)*x4657);
IkReal x4674=(sj1*x4656);
IkReal x4675=(cj0*gconst2*r00);
IkReal x4676=(cj1*x4657);
IkReal x4677=(sj1*x4657);
evalcond[0]=(((sj3*x4676))+((sj3*x4674))+(((-1.0)*gconst2*x4671))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x4661*x4671))+x4672+((sj4*x4664))+(((-1.0)*sj1*x4673)));
evalcond[2]=(((cj3*x4676))+(((-1.0)*x4662*x4663))+((x4656*x4659))+(((-1.0)*r22*x4667))+((cj4*x4664)));
evalcond[3]=(((sj3*x4672))+((r11*x4658))+(((-1.0)*sj1*sj3*x4673))+((gconst2*x4660))+((gconst1*r10*sj0))+((cj0*gconst1*r00)));
evalcond[4]=((((-0.3425)*x4677))+(((0.3425)*x4672))+(((0.076)*x4663))+(((0.0535)*sj1))+(((0.0775)*x4676))+(((0.0775)*x4674))+(((-0.2845)*cj1))+(((-0.076)*x4664))+pz);
evalcond[5]=((((-1.0)*r10*x4658*x4662))+(((-1.0)*x4662*x4675))+((cj3*x4672))+(((-1.0)*x4659*x4673))+((sj4*x4665))+((sj4*x4668))+((x4666*x4669))+((x4660*x4669)));
evalcond[6]=((((-1.0)*cj1*x4673))+(((-1.0)*r10*x4658*x4667))+(((-1.0)*x4662*x4665))+(((-1.0)*x4662*x4668))+(((-1.0)*x4674))+((x4661*x4666))+(((-1.0)*x4667*x4675))+((x4660*x4661)));
evalcond[7]=((((-0.3425)*x4674))+(((-0.3425)*x4676))+(((0.076)*x4675))+(((-1.0)*x4660*x4670))+(((-0.0775)*x4677))+(((0.2845)*sj1))+(((0.0775)*x4672))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.076)*r10*x4658))+(((-1.0)*x4666*x4670))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4678=(cj1*r21);
IkReal x4679=(sj3*sj4);
IkReal x4680=(gconst2*r20);
IkReal x4681=((1.0)*cj1);
IkReal x4682=(r21*sj1);
IkReal x4683=(gconst1*r20);
IkReal x4684=(cj4*r22*sj3);
CheckValue<IkReal> x4685=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4685.valid){
continue;
}
CheckValue<IkReal> x4686 = IKatan2WithCheck(IkReal((((gconst2*x4678))+(((-1.0)*gconst1*x4679*x4682))+((sj1*x4679*x4680))+((sj1*x4684))+((cj1*x4683)))),IkReal((((gconst1*x4678*x4679))+(((-1.0)*x4679*x4680*x4681))+(((-1.0)*x4681*x4684))+((gconst2*x4682))+((sj1*x4683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4686.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4685.value)))+(x4686.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4687=IKcos(j2);
IkReal x4688=IKsin(j2);
IkReal x4689=(gconst2*sj0);
IkReal x4690=(cj3*sj1);
IkReal x4691=(cj0*r01);
IkReal x4692=(gconst1*sj4);
IkReal x4693=((1.0)*cj4);
IkReal x4694=(gconst1*r21);
IkReal x4695=(gconst2*r20);
IkReal x4696=(r12*sj0);
IkReal x4697=(r11*sj0);
IkReal x4698=((1.0)*sj4);
IkReal x4699=(cj0*r02);
IkReal x4700=(cj4*gconst1);
IkReal x4701=((0.076)*gconst1);
IkReal x4702=((1.0)*r21);
IkReal x4703=(cj1*x4687);
IkReal x4704=((1.0)*x4688);
IkReal x4705=(sj1*x4687);
IkReal x4706=(cj0*gconst2*r00);
IkReal x4707=(cj1*x4688);
IkReal x4708=(sj1*x4688);
evalcond[0]=((((-1.0)*gconst2*x4702))+((sj3*x4705))+((sj3*x4707))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+x4703+(((-1.0)*sj1*x4704))+((sj4*x4695))+(((-1.0)*x4692*x4702)));
evalcond[2]=(((cj3*x4707))+(((-1.0)*x4693*x4694))+(((-1.0)*r22*x4698))+((cj4*x4695))+((x4687*x4690)));
evalcond[3]=((((-1.0)*sj1*sj3*x4704))+((gconst2*x4691))+((sj3*x4703))+((r11*x4689))+((gconst1*r10*sj0))+((cj0*gconst1*r00)));
evalcond[4]=((((-0.076)*x4695))+(((0.0535)*sj1))+(((0.3425)*x4703))+(((0.076)*x4694))+(((0.0775)*x4707))+(((0.0775)*x4705))+(((-0.2845)*cj1))+pz+(((-0.3425)*x4708)));
evalcond[5]=(((cj3*x4703))+(((-1.0)*x4693*x4706))+(((-1.0)*x4690*x4704))+(((-1.0)*r10*x4689*x4693))+((x4697*x4700))+((x4691*x4700))+((sj4*x4696))+((sj4*x4699)));
evalcond[6]=((((-1.0)*x4705))+(((-1.0)*r10*x4689*x4698))+(((-1.0)*x4698*x4706))+(((-1.0)*cj1*x4704))+(((-1.0)*x4693*x4696))+(((-1.0)*x4693*x4699))+((x4691*x4692))+((x4692*x4697)));
evalcond[7]=((((-0.0775)*x4708))+(((0.076)*x4706))+(((-1.0)*x4697*x4701))+(((0.2845)*sj1))+(((0.0775)*x4703))+(((0.0535)*cj1))+(((-1.0)*x4691*x4701))+(((-1.0)*py*sj0))+(((-0.3425)*x4707))+(((-0.3425)*x4705))+(((-1.0)*cj0*px))+(((0.076)*r10*x4689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4709=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x4709) < -0.00001)
continue;
IkReal x4710=IKabs(IKsqrt(x4709));
IkReal x4716 = x4709;
if(IKabs(x4716)==0){
continue;
}
IkReal x4711=pow(x4716,-0.5);
IkReal x4712=((13.1578947368421)*x4711);
CheckValue<IkReal> x4717=IKPowWithIntegerCheck(x4710,-1);
if(!x4717.valid){
continue;
}
IkReal x4713=x4717.value;
IkReal x4714=(r22*x4713);
if((((1.0)+(((-1.0)*(x4714*x4714))))) < -0.00001)
continue;
IkReal x4715=IKsqrt(((1.0)+(((-1.0)*(x4714*x4714)))));
if( (x4714) < -1-IKFAST_SINCOS_THRESH || (x4714) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4718 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4718.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(IKasin(x4714))))+(((-1.0)*(x4718.value))));
IkReal gconst4=((((-1.0)*rxp1_2*x4712*x4715))+(((-1.0)*rxp0_2*x4712*x4714)));
IkReal gconst5=((((-1.0)*rxp1_2*x4712*x4714))+((rxp0_2*x4712*x4715)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4719=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x4719.valid){
continue;
}
if( ((r22*(x4719.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4719.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4720 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4720.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x4719.value))))+(x4720.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4721=((0.076)*cj3);
IkReal x4722=((1.0)*cj3);
CheckValue<IkReal> x4723 = IKatan2WithCheck(IkReal(((((-1.0)*py*x4722))+(((-1.0)*gconst4*r11*x4721))+((gconst5*r10*x4721)))),IkReal(((((-1.0)*px*x4722))+((gconst5*r00*x4721))+(((-1.0)*gconst4*r01*x4721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4723.valid){
continue;
}
CheckValue<IkReal> x4724=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*rxp1_2))+((r22*(((((-0.076)*(gconst4*gconst4)))+(((-0.076)*(gconst5*gconst5)))))))+(((-1.0)*gconst4*rxp0_2)))),-1);
if(!x4724.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4723.value)+(((1.5707963267949)*(x4724.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4725=IKcos(j0);
IkReal x4726=IKsin(j0);
IkReal x4727=((1.0)*sj4);
IkReal x4728=((0.076)*gconst4);
IkReal x4729=((1.0)*cj4);
IkReal x4730=(r10*x4725);
IkReal x4731=(r02*x4726);
IkReal x4732=(r01*x4726);
IkReal x4733=(r12*x4725);
IkReal x4734=(r11*x4725);
IkReal x4735=((1.0)*gconst4*x4726);
IkReal x4736=(gconst5*r00*x4726);
IkReal x4737=(gconst4*x4734);
evalcond[0]=(cj3+(((-1.0)*gconst5*x4732))+((gconst4*x4730))+((gconst5*x4734))+(((-1.0)*r00*x4735)));
evalcond[1]=((((-1.0)*x4728*x4734))+(((-1.0)*py*x4725))+((px*x4726))+(((0.076)*gconst5*x4730))+((x4728*x4732))+(((-0.076)*x4736)));
evalcond[2]=(((cj4*x4731))+(((-1.0)*gconst5*x4727*x4730))+(((-1.0)*gconst4*x4727*x4732))+(((-1.0)*x4729*x4733))+((sj4*x4737))+((sj4*x4736)));
evalcond[3]=(((cj4*x4737))+((cj4*x4736))+(((-1.0)*sj3))+(((-1.0)*gconst5*x4729*x4730))+(((-1.0)*x4727*x4731))+(((-1.0)*gconst4*x4729*x4732))+((sj4*x4733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4738=x4709;
if((x4738) < -0.00001)
continue;
IkReal x4739=IKabs(IKsqrt(x4738));
IkReal x4746 = x4738;
if(IKabs(x4746)==0){
continue;
}
IkReal x4740=pow(x4746,-0.5);
IkReal x4741=((13.1578947368421)*x4740);
CheckValue<IkReal> x4747=IKPowWithIntegerCheck(x4739,-1);
if(!x4747.valid){
continue;
}
IkReal x4742=x4747.value;
IkReal x4743=(r22*x4742);
if((((1.0)+(((-1.0)*(x4743*x4743))))) < -0.00001)
continue;
IkReal x4744=IKsqrt(((1.0)+(((-1.0)*(x4743*x4743)))));
CheckValue<IkReal> x4748 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4748.valid){
continue;
}
if( (x4743) < -1-IKFAST_SINCOS_THRESH || (x4743) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4745=((((1.0)*(x4748.value)))+(((1.0)*(IKasin(x4743)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4745)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4745)));
IkReal gconst4=((((-1.0)*rxp1_2*x4741*x4744))+(((-1.0)*rxp0_2*x4741*x4743)));
IkReal gconst5=((((-1.0)*rxp1_2*x4741*x4743))+((rxp0_2*x4741*x4744)));
IkReal x4749=((1.138)*cj3);
IkReal x4750=((12.0)*pz);
IkReal x4751=((0.31)*cj4);
IkReal x4752=(r12*sj0);
IkReal x4753=(gconst5*r20);
IkReal x4754=(gconst4*r21);
IkReal x4755=((0.93)*cj4);
IkReal x4756=(cj0*r02);
IkReal x4757=((4.11)*sj4);
IkReal x4758=((4.0)*pz);
IkReal x4759=((0.912)*cj3);
IkReal x4760=((0.304)*cj3);
IkReal x4761=((0.31)*sj4);
IkReal x4762=((0.93)*sj4);
IkReal x4763=((1.37)*sj4);
IkReal x4764=(cj3*x4750);
IkReal x4765=(r22*x4762);
IkReal x4766=((0.912)*x4754);
IkReal x4767=(cj3*x4763);
IkReal x4768=(gconst5*r10*sj0);
IkReal x4769=(cj0*gconst4*r01);
IkReal x4770=(gconst4*r11*sj0);
IkReal x4771=((4.11)*cj4*r22);
IkReal x4772=((1.37)*cj4*r22);
IkReal x4773=(cj0*gconst5*r00);
IkReal x4774=(x4753*x4755);
IkReal x4775=(cj3*x4771);
IkReal x4776=(x4753*x4759);
IkReal x4777=(x4754*x4755);
IkReal x4778=(x4754*x4759);
IkReal x4779=(x4754*x4757);
IkReal x4780=(cj3*x4753*x4757);
IkReal x4781=(cj3*x4779);
IkReal x4782=(x4762*x4769);
IkReal x4783=(x4762*x4770);
IkReal x4784=(x4776+x4774+x4775+x4780);
IkReal x4785=(x4750+x4779+x4766+x4783+x4782);
IkReal x4786=(x4777+x4778+x4765+x4764+x4781);
IkReal x4787=((((0.912)*x4753))+((x4753*x4757))+((x4755*x4756))+x4771+((x4762*x4773))+((x4752*x4755))+((x4762*x4768)));
j1eval[0]=((1.712)+(IKabs(((-1.138)+x4785+(((-1.0)*x4787)))))+(IKabs(((1.138)+x4785+(((-1.0)*x4787)))))+(IKabs((x4749+x4784+(((-1.0)*x4786)))))+(IKabs((x4784+(((-1.0)*x4749))+(((-1.0)*x4786)))))+(((1.712)*(IKabs(cj3))))+(IKabs((((x4753*x4760))+((x4753*x4767))+(((-1.0)*cj3*x4758))+(((-1.0)*r22*x4761))+(((-1.0)*x4754*x4767))+(((-1.0)*x4754*x4760))+((cj3*x4772))+((x4751*x4753))+(((-1.0)*x4751*x4754))+(((-1.0)*x4749)))))+(IKabs(((1.138)+(((0.304)*x4754))+(((-1.0)*x4761*x4768))+x4758+(((-1.0)*x4772))+(((-1.0)*x4751*x4752))+(((-1.0)*x4751*x4756))+((x4754*x4763))+(((-1.0)*x4761*x4773))+((x4761*x4769))+((x4761*x4770))+(((-1.0)*x4753*x4763))+(((-0.304)*x4753))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4788=((1.138)*cj3);
IkReal x4789=(gconst5*r20);
IkReal x4790=((0.31)*cj4);
IkReal x4791=((4.11)*cj3);
IkReal x4792=(r22*sj4);
IkReal x4793=((0.304)*cj3);
IkReal x4794=(cj4*r22);
IkReal x4795=((1.37)*cj3);
IkReal x4796=((0.912)*cj3);
IkReal x4797=(gconst4*r21);
IkReal x4798=(cj3*pz);
IkReal x4799=((0.93)*cj4);
IkReal x4800=((12.0)*x4798);
IkReal x4801=((0.93)*x4792);
IkReal x4802=((-0.428)*cj3);
IkReal x4803=((0.31)*x4792);
IkReal x4804=((4.0)*x4798);
IkReal x4805=(x4789*x4799);
IkReal x4806=(x4791*x4794);
IkReal x4807=(x4789*x4796);
IkReal x4808=(x4797*x4799);
IkReal x4809=(x4796*x4797);
IkReal x4810=(x4789*x4793);
IkReal x4811=(x4794*x4795);
IkReal x4812=(x4789*x4790);
IkReal x4813=(x4793*x4797);
IkReal x4814=(x4790*x4797);
IkReal x4815=(cj3*sj4*x4797);
IkReal x4816=(sj4*x4789*x4791);
IkReal x4817=(sj4*x4791*x4797);
IkReal x4818=(sj4*x4789*x4795);
IkReal x4819=(sj4*x4795*x4797);
IkReal x4820=(x4816+x4805+x4806+x4807);
IkReal x4821=(x4812+x4811+x4810+x4818);
IkReal x4822=(x4813+x4814+x4819+x4803+x4804);
IkReal x4823=(x4817+x4800+x4801+x4808+x4809);
op[0]=((((-1.0)*x4822))+x4821+(((-1.0)*x4788)));
op[1]=x4802;
op[2]=((((-1.0)*x4823))+x4820+(((-1.0)*x4788)));
op[3]=((-0.856)*cj3);
op[4]=((((-1.0)*x4823))+x4788+x4820);
op[5]=x4802;
op[6]=((((-1.0)*x4822))+x4788+x4821);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4824=((4.0)*pz);
IkReal x4825=((12.0)*pz);
IkReal x4826=(gconst4*r21);
IkReal x4827=(gconst5*r20);
IkReal x4828=((0.93)*cj4);
IkReal x4829=(cj0*r02);
IkReal x4830=((4.11)*sj4);
IkReal x4831=((0.31)*sj4);
IkReal x4832=(r12*sj0);
IkReal x4833=((1.37)*sj4);
IkReal x4834=((0.93)*sj4);
IkReal x4835=((0.31)*cj4);
IkReal x4836=(cj4*r22);
IkReal x4837=((0.304)*x4826);
IkReal x4838=((0.912)*x4826);
IkReal x4839=(gconst4*r11*sj0);
IkReal x4840=(cj0*gconst5*r00);
IkReal x4841=(gconst5*r10*sj0);
IkReal x4842=(cj0*gconst4*r01);
IkReal x4843=(x4826*x4833);
IkReal x4844=(x4826*x4830);
IkReal x4845=(x4831*x4842);
IkReal x4846=(x4834*x4842);
IkReal x4847=(x4834*x4839);
IkReal x4848=(x4831*x4839);
IkReal x4849=(x4825+x4838+x4844+x4846+x4847);
IkReal x4850=(x4824+x4837+x4848+x4845+x4843);
IkReal x4851=(((x4828*x4829))+(((4.11)*x4836))+((x4834*x4840))+((x4834*x4841))+((x4827*x4830))+(((0.912)*x4827))+((x4828*x4832)));
IkReal x4852=((((0.304)*x4827))+((x4831*x4841))+((x4831*x4840))+((x4829*x4835))+((x4832*x4835))+((x4827*x4833))+(((1.37)*x4836)));
j1evalpoly[0]=((-1.138)+(((0.428)*htj1))+(((-1.0)*x4852))+(((htj1*htj1)*(((-1.138)+(((-1.0)*x4851))+x4849))))+(((0.856)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+(((-1.0)*x4852))+x4850))))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+x4850+(((htj1*htj1*htj1*htj1)*(((1.138)+(((-1.0)*x4851))+x4849)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4853=x4709;
if((x4853) < -0.00001)
continue;
IkReal x4854=IKabs(IKsqrt(x4853));
IkReal x4861 = x4853;
if(IKabs(x4861)==0){
continue;
}
IkReal x4855=pow(x4861,-0.5);
IkReal x4856=((13.1578947368421)*x4855);
CheckValue<IkReal> x4862=IKPowWithIntegerCheck(x4854,-1);
if(!x4862.valid){
continue;
}
IkReal x4857=x4862.value;
IkReal x4858=(r22*x4857);
if((((1.0)+(((-1.0)*(x4858*x4858))))) < -0.00001)
continue;
IkReal x4859=IKsqrt(((1.0)+(((-1.0)*(x4858*x4858)))));
CheckValue<IkReal> x4863 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
if( (x4858) < -1-IKFAST_SINCOS_THRESH || (x4858) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4860=((((1.0)*(x4863.value)))+(((1.0)*(IKasin(x4858)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4860)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4860)));
IkReal gconst4=((((-1.0)*rxp0_2*x4856*x4858))+(((-1.0)*rxp1_2*x4856*x4859)));
IkReal gconst5=(((rxp0_2*x4856*x4859))+(((-1.0)*rxp1_2*x4856*x4858)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4864=x4709;
if((x4864) < -0.00001)
continue;
IkReal x4865=IKabs(IKsqrt(x4864));
IkReal x4872 = x4864;
if(IKabs(x4872)==0){
continue;
}
IkReal x4866=pow(x4872,-0.5);
IkReal x4867=((13.1578947368421)*x4866);
CheckValue<IkReal> x4873=IKPowWithIntegerCheck(x4865,-1);
if(!x4873.valid){
continue;
}
IkReal x4868=x4873.value;
IkReal x4869=(r22*x4868);
if((((1.0)+(((-1.0)*(x4869*x4869))))) < -0.00001)
continue;
IkReal x4870=IKsqrt(((1.0)+(((-1.0)*(x4869*x4869)))));
CheckValue<IkReal> x4874 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4874.valid){
continue;
}
if( (x4869) < -1-IKFAST_SINCOS_THRESH || (x4869) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4871=((((1.0)*(x4874.value)))+(((1.0)*(IKasin(x4869)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4871)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4871)));
IkReal gconst4=((((-1.0)*rxp1_2*x4867*x4870))+(((-1.0)*rxp0_2*x4867*x4869)));
IkReal gconst5=((((-1.0)*rxp1_2*x4867*x4869))+((rxp0_2*x4867*x4870)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4875=x4709;
if((x4875) < -0.00001)
continue;
IkReal x4876=IKabs(IKsqrt(x4875));
IkReal x4883 = x4875;
if(IKabs(x4883)==0){
continue;
}
IkReal x4877=pow(x4883,-0.5);
IkReal x4878=((13.1578947368421)*x4877);
CheckValue<IkReal> x4884=IKPowWithIntegerCheck(x4876,-1);
if(!x4884.valid){
continue;
}
IkReal x4879=x4884.value;
IkReal x4880=(r22*x4879);
if((((1.0)+(((-1.0)*(x4880*x4880))))) < -0.00001)
continue;
IkReal x4881=IKsqrt(((1.0)+(((-1.0)*(x4880*x4880)))));
CheckValue<IkReal> x4885 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4885.valid){
continue;
}
if( (x4880) < -1-IKFAST_SINCOS_THRESH || (x4880) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4882=((((1.0)*(x4885.value)))+(((1.0)*(IKasin(x4880)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4882)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4882)));
IkReal gconst4=((((-1.0)*rxp0_2*x4878*x4880))+(((-1.0)*rxp1_2*x4878*x4881)));
IkReal gconst5=(((rxp0_2*x4878*x4881))+(((-1.0)*rxp1_2*x4878*x4880)));
IkReal x4886=(cj3*sj3);
j2eval[0]=x4886;
j2eval[1]=IKsign(x4886);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4887=((1.0)*cj1);
IkReal x4888=(cj4*r22);
IkReal x4889=(gconst5*r21);
IkReal x4890=(cj1*gconst4);
IkReal x4891=(r21*sj4);
IkReal x4892=(gconst4*sj1);
IkReal x4893=(gconst5*r20*sj4);
if( IKabs((((r20*x4890))+(((-1.0)*x4891*x4892))+((sj1*x4888))+((cj1*x4889))+((sj1*x4893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4890*x4891))+((r20*x4892))+(((-1.0)*x4887*x4893))+(((-1.0)*x4887*x4888))+((sj1*x4889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x4890))+(((-1.0)*x4891*x4892))+((sj1*x4888))+((cj1*x4889))+((sj1*x4893))))+IKsqr((((x4890*x4891))+((r20*x4892))+(((-1.0)*x4887*x4893))+(((-1.0)*x4887*x4888))+((sj1*x4889))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x4890))+(((-1.0)*x4891*x4892))+((sj1*x4888))+((cj1*x4889))+((sj1*x4893))), (((x4890*x4891))+((r20*x4892))+(((-1.0)*x4887*x4893))+(((-1.0)*x4887*x4888))+((sj1*x4889))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4894=IKcos(j2);
IkReal x4895=IKsin(j2);
IkReal x4896=(gconst5*sj4);
IkReal x4897=(gconst4*sj0);
IkReal x4898=((0.076)*gconst4);
IkReal x4899=((1.0)*cj0);
IkReal x4900=((1.0)*sj0);
IkReal x4901=(gconst5*sj0);
IkReal x4902=(cj0*r01);
IkReal x4903=(cj0*r00);
IkReal x4904=((0.076)*gconst5);
IkReal x4905=((1.0)*r21);
IkReal x4906=(gconst4*sj4);
IkReal x4907=(cj1*x4894);
IkReal x4908=(sj1*x4894);
IkReal x4909=(cj1*x4895);
IkReal x4910=(sj1*x4895);
IkReal x4911=((1.0)*x4910);
evalcond[0]=(x4909+x4908+(((-1.0)*gconst5*x4905))+(((-1.0)*gconst4*r20)));
evalcond[1]=(x4907+(((-1.0)*x4905*x4906))+((cj4*r22))+(((-1.0)*x4911))+((r20*x4896)));
evalcond[2]=(x4907+(((-1.0)*x4911))+((r11*x4901))+((gconst4*x4903))+((gconst5*x4902))+((r10*x4897)));
evalcond[3]=(((r21*x4898))+(((-0.3425)*x4910))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-1.0)*r20*x4904))+(((0.3425)*x4907))+(((0.0775)*x4909))+(((0.0775)*x4908)));
evalcond[4]=((((-1.0)*r00*x4896*x4899))+(((-1.0)*cj4*r12*x4900))+((r11*sj4*x4897))+(((-1.0)*x4909))+(((-1.0)*x4908))+(((-1.0)*r10*x4896*x4900))+(((-1.0)*cj4*r02*x4899))+((x4902*x4906)));
evalcond[5]=((((-0.3425)*x4909))+(((-0.3425)*x4908))+(((-0.076)*r11*x4897))+(((-1.0)*x4898*x4902))+(((0.2845)*sj1))+(((0.076)*r10*x4901))+((x4903*x4904))+(((0.0535)*cj1))+(((-1.0)*px*x4899))+(((-1.0)*py*x4900))+(((-0.0775)*x4910))+(((0.0775)*x4907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4912=((1.0)*r22);
IkReal x4913=(cj1*cj4);
IkReal x4914=(sj1*sj4);
IkReal x4915=(gconst5*r20);
IkReal x4916=(cj1*sj4);
IkReal x4917=(cj4*sj1);
IkReal x4918=((1.0)*gconst4*r21);
if( IKabs(((((-1.0)*x4912*x4916))+(((-1.0)*x4913*x4918))+((x4913*x4915))+((x4914*x4915))+(((-1.0)*x4914*x4918))+((r22*x4917)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4912*x4913))+(((-1.0)*x4912*x4914))+(((-1.0)*x4915*x4916))+((x4915*x4917))+((gconst4*r21*x4916))+(((-1.0)*x4917*x4918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4912*x4916))+(((-1.0)*x4913*x4918))+((x4913*x4915))+((x4914*x4915))+(((-1.0)*x4914*x4918))+((r22*x4917))))+IKsqr(((((-1.0)*x4912*x4913))+(((-1.0)*x4912*x4914))+(((-1.0)*x4915*x4916))+((x4915*x4917))+((gconst4*r21*x4916))+(((-1.0)*x4917*x4918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4912*x4916))+(((-1.0)*x4913*x4918))+((x4913*x4915))+((x4914*x4915))+(((-1.0)*x4914*x4918))+((r22*x4917))), ((((-1.0)*x4912*x4913))+(((-1.0)*x4912*x4914))+(((-1.0)*x4915*x4916))+((x4915*x4917))+((gconst4*r21*x4916))+(((-1.0)*x4917*x4918))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4919=IKcos(j2);
IkReal x4920=IKsin(j2);
IkReal x4921=(gconst5*sj4);
IkReal x4922=((1.0)*cj4);
IkReal x4923=((0.076)*gconst4);
IkReal x4924=(cj0*r02);
IkReal x4925=((1.0)*sj1);
IkReal x4926=((1.0)*cj0);
IkReal x4927=((1.0)*sj0);
IkReal x4928=(gconst4*r21);
IkReal x4929=(gconst5*r20);
IkReal x4930=((0.3425)*sj1);
IkReal x4931=((1.0)*sj4);
IkReal x4932=(r12*sj0);
IkReal x4933=(cj1*x4919);
IkReal x4934=(cj0*gconst5*r00);
IkReal x4935=(gconst4*r11*sj0);
IkReal x4936=(cj0*gconst4*r01);
IkReal x4937=(cj1*x4920);
IkReal x4938=(sj1*x4920);
IkReal x4939=(gconst5*r10*sj0);
IkReal x4940=(x4919*x4925);
IkReal x4941=((1.0)*x4937);
IkReal x4942=(x4941+x4940);
evalcond[0]=(x4933+((r20*x4921))+((cj4*r22))+(((-1.0)*x4920*x4925))+(((-1.0)*x4928*x4931)));
evalcond[1]=(((cj4*x4929))+(((-1.0)*x4942))+(((-1.0)*x4922*x4928))+(((-1.0)*r22*x4931)));
evalcond[2]=((((0.3425)*x4933))+(((0.0535)*sj1))+(((-0.2845)*cj1))+((r21*x4923))+(((-0.076)*x4929))+pz+(((-1.0)*x4920*x4930))+(((0.0775)*x4937))+(((0.0775)*sj1*x4919)));
evalcond[3]=(x4938+(((-1.0)*x4933))+((sj4*x4924))+((cj4*x4936))+((cj4*x4935))+(((-1.0)*x4922*x4939))+(((-1.0)*x4922*x4934))+((sj4*x4932)));
evalcond[4]=((((-1.0)*x4942))+(((-1.0)*r00*x4921*x4926))+(((-1.0)*r10*x4921*x4927))+(((-1.0)*x4922*x4932))+(((-1.0)*x4922*x4924))+((sj4*x4936))+((sj4*x4935)));
evalcond[5]=((((0.2845)*sj1))+(((0.076)*x4939))+(((0.076)*x4934))+(((-0.0775)*x4938))+(((-1.0)*x4919*x4930))+(((0.0535)*cj1))+(((-1.0)*r11*sj0*x4923))+(((-1.0)*px*x4926))+(((0.0775)*x4933))+(((-1.0)*cj0*r01*x4923))+(((-0.3425)*x4937))+(((-1.0)*py*x4927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4943=((1.0)*cj1);
IkReal x4944=(cj4*r22);
IkReal x4945=((1.0)*sj1);
IkReal x4946=(gconst4*r20);
IkReal x4947=(gconst5*r21);
IkReal x4948=(gconst5*r20*sj4);
IkReal x4949=(gconst4*r21*sj4);
if( IKabs(((((-1.0)*x4943*x4947))+(((-1.0)*x4943*x4946))+(((-1.0)*x4945*x4949))+((sj1*x4948))+((sj1*x4944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4943*x4948))+(((-1.0)*x4943*x4944))+(((-1.0)*x4945*x4947))+(((-1.0)*x4945*x4946))+((cj1*x4949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4943*x4947))+(((-1.0)*x4943*x4946))+(((-1.0)*x4945*x4949))+((sj1*x4948))+((sj1*x4944))))+IKsqr(((((-1.0)*x4943*x4948))+(((-1.0)*x4943*x4944))+(((-1.0)*x4945*x4947))+(((-1.0)*x4945*x4946))+((cj1*x4949))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4943*x4947))+(((-1.0)*x4943*x4946))+(((-1.0)*x4945*x4949))+((sj1*x4948))+((sj1*x4944))), ((((-1.0)*x4943*x4948))+(((-1.0)*x4943*x4944))+(((-1.0)*x4945*x4947))+(((-1.0)*x4945*x4946))+((cj1*x4949))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4950=IKcos(j2);
IkReal x4951=IKsin(j2);
IkReal x4952=(gconst5*sj4);
IkReal x4953=(gconst4*sj0);
IkReal x4954=((1.0)*sj1);
IkReal x4955=((1.0)*cj0);
IkReal x4956=((1.0)*sj0);
IkReal x4957=(gconst5*sj0);
IkReal x4958=(cj0*r00);
IkReal x4959=((0.076)*gconst5);
IkReal x4960=(gconst4*r21);
IkReal x4961=(cj1*x4950);
IkReal x4962=(sj1*x4950);
IkReal x4963=(cj0*gconst4*r01);
IkReal x4964=(cj1*x4951);
IkReal x4965=(sj1*x4951);
IkReal x4966=(x4950*x4954);
IkReal x4967=((1.0)*x4964);
IkReal x4968=(x4967+x4966);
evalcond[0]=((((-1.0)*x4968))+(((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20)));
evalcond[1]=(x4961+((cj4*r22))+((r20*x4952))+(((-1.0)*sj4*x4960))+(((-1.0)*x4951*x4954)));
evalcond[2]=(x4965+((gconst4*x4958))+((r10*x4953))+((r11*x4957))+(((-1.0)*x4961))+((cj0*gconst5*r01)));
evalcond[3]=((((0.0775)*x4964))+(((0.0775)*x4962))+(((-1.0)*r20*x4959))+(((0.076)*x4960))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x4965))+(((0.3425)*x4961))+pz);
evalcond[4]=((((-1.0)*cj4*r02*x4955))+(((-1.0)*x4968))+((r11*sj4*x4953))+((sj4*x4963))+(((-1.0)*r10*x4952*x4956))+(((-1.0)*r00*x4952*x4955))+(((-1.0)*cj4*r12*x4956)));
evalcond[5]=((((-0.0775)*x4965))+(((0.0775)*x4961))+(((-1.0)*px*x4955))+(((0.2845)*sj1))+(((-0.076)*r11*x4953))+(((-0.076)*x4963))+(((-0.3425)*x4964))+(((-0.3425)*x4962))+(((0.076)*r10*x4957))+(((0.0535)*cj1))+(((-1.0)*py*x4956))+((x4958*x4959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4969=(sj1*sj3);
IkReal x4970=(r22*sj4);
IkReal x4971=(cj3*sj1);
IkReal x4972=(cj1*sj3);
IkReal x4973=(cj0*gconst5*r01);
IkReal x4974=(gconst4*r10*sj0);
IkReal x4975=((1.0)*cj1*cj3);
IkReal x4976=(gconst5*r11*sj0);
IkReal x4977=(cj0*gconst4*r00);
IkReal x4978=(cj4*gconst4*r21);
IkReal x4979=((1.0)*cj4*gconst5*r20);
CheckValue<IkReal> x4980=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x4980.valid){
continue;
}
CheckValue<IkReal> x4981 = IKatan2WithCheck(IkReal((((x4970*x4972))+(((-1.0)*x4972*x4979))+((x4971*x4974))+((x4971*x4976))+((x4971*x4977))+((x4971*x4973))+((x4972*x4978)))),IkReal(((((-1.0)*x4975*x4976))+(((-1.0)*x4975*x4977))+((x4969*x4970))+((x4969*x4978))+(((-1.0)*x4973*x4975))+(((-1.0)*x4974*x4975))+(((-1.0)*x4969*x4979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4981.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4980.value)))+(x4981.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4982=IKcos(j2);
IkReal x4983=IKsin(j2);
IkReal x4984=(gconst5*sj4);
IkReal x4985=((1.0)*cj4);
IkReal x4986=(r10*sj0);
IkReal x4987=(cj3*sj1);
IkReal x4988=((0.076)*gconst4);
IkReal x4989=(cj0*r01);
IkReal x4990=(r12*sj0);
IkReal x4991=((1.0)*cj0);
IkReal x4992=(cj0*r02);
IkReal x4993=(gconst4*r21);
IkReal x4994=(gconst5*r20);
IkReal x4995=((1.0)*sj4);
IkReal x4996=(cj1*x4982);
IkReal x4997=(cj0*gconst5*r00);
IkReal x4998=(gconst4*r11*sj0);
IkReal x4999=((1.0)*x4983);
IkReal x5000=(sj1*x4982);
IkReal x5001=(cj1*x4983);
IkReal x5002=(sj1*x4983);
evalcond[0]=((((-1.0)*gconst5*r21))+((sj3*x5000))+((sj3*x5001))+(((-1.0)*gconst4*r20)));
evalcond[1]=(x4996+((cj4*r22))+(((-1.0)*sj1*x4999))+(((-1.0)*x4993*x4995))+((r20*x4984)));
evalcond[2]=((((-1.0)*r22*x4995))+((x4982*x4987))+((cj3*x5001))+(((-1.0)*x4985*x4993))+((cj4*x4994)));
evalcond[3]=(((cj0*gconst4*r00))+((gconst4*x4986))+((gconst5*x4989))+((gconst5*r11*sj0))+(((-1.0)*sj1*sj3*x4999))+((sj3*x4996)));
evalcond[4]=((((-0.076)*x4994))+(((-0.3425)*x5002))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x4996))+((r21*x4988))+pz+(((0.0775)*x5000))+(((0.0775)*x5001)));
evalcond[5]=(((cj3*x4996))+(((-1.0)*gconst5*x4985*x4986))+((sj4*x4990))+((sj4*x4992))+(((-1.0)*x4985*x4997))+((cj4*gconst4*x4989))+(((-1.0)*x4987*x4999))+((cj4*x4998)));
evalcond[6]=((((-1.0)*x5000))+((sj4*x4998))+(((-1.0)*r00*x4984*x4991))+(((-1.0)*x4985*x4992))+(((-1.0)*x4985*x4990))+(((-1.0)*x4984*x4986))+((gconst4*sj4*x4989))+(((-1.0)*cj1*x4999)));
evalcond[7]=((((-0.3425)*x5000))+(((-0.3425)*x5001))+(((0.076)*gconst5*x4986))+(((0.2845)*sj1))+(((0.0775)*x4996))+(((-1.0)*x4988*x4989))+(((-0.0775)*x5002))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.076)*x4997))+(((-1.0)*px*x4991))+(((-1.0)*r11*sj0*x4988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5003=(cj1*cj4);
IkReal x5004=(gconst4*r21);
IkReal x5005=(cj3*r22);
IkReal x5006=(cj4*sj1);
IkReal x5007=(gconst5*r20);
IkReal x5008=(sj1*sj4);
IkReal x5009=((1.0)*cj3);
IkReal x5010=(cj1*sj4);
CheckValue<IkReal> x5011 = IKatan2WithCheck(IkReal((((x5003*x5004))+(((-1.0)*x5004*x5008*x5009))+(((-1.0)*x5003*x5007))+((r22*x5010))+((x5005*x5006))+((cj3*x5007*x5008)))),IkReal(((((-1.0)*x5007*x5009*x5010))+(((-1.0)*x5006*x5007))+((r22*x5008))+(((-1.0)*x5003*x5005))+((cj3*x5004*x5010))+((x5004*x5006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5011.valid){
continue;
}
CheckValue<IkReal> x5012=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5012.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5011.value)+(((1.5707963267949)*(x5012.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5013=IKcos(j2);
IkReal x5014=IKsin(j2);
IkReal x5015=(gconst5*sj4);
IkReal x5016=((1.0)*cj4);
IkReal x5017=(r10*sj0);
IkReal x5018=(cj3*sj1);
IkReal x5019=((0.076)*gconst4);
IkReal x5020=(cj0*r01);
IkReal x5021=(r12*sj0);
IkReal x5022=((1.0)*cj0);
IkReal x5023=(cj0*r02);
IkReal x5024=(gconst4*r21);
IkReal x5025=(gconst5*r20);
IkReal x5026=((1.0)*sj4);
IkReal x5027=(cj1*x5013);
IkReal x5028=(cj0*gconst5*r00);
IkReal x5029=(gconst4*r11*sj0);
IkReal x5030=((1.0)*x5014);
IkReal x5031=(sj1*x5013);
IkReal x5032=(cj1*x5014);
IkReal x5033=(sj1*x5014);
evalcond[0]=((((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20))+((sj3*x5031))+((sj3*x5032)));
evalcond[1]=(((r20*x5015))+((cj4*r22))+x5027+(((-1.0)*sj1*x5030))+(((-1.0)*x5024*x5026)));
evalcond[2]=(((cj4*x5025))+(((-1.0)*x5016*x5024))+((x5013*x5018))+((cj3*x5032))+(((-1.0)*r22*x5026)));
evalcond[3]=(((gconst5*x5020))+((cj0*gconst4*r00))+((gconst4*x5017))+((gconst5*r11*sj0))+((sj3*x5027))+(((-1.0)*sj1*sj3*x5030)));
evalcond[4]=((((-0.3425)*x5033))+(((-0.076)*x5025))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x5027))+((r21*x5019))+pz+(((0.0775)*x5032))+(((0.0775)*x5031)));
evalcond[5]=(((cj4*x5029))+(((-1.0)*gconst5*x5016*x5017))+((sj4*x5023))+((sj4*x5021))+(((-1.0)*x5018*x5030))+((cj4*gconst4*x5020))+(((-1.0)*x5016*x5028))+((cj3*x5027)));
evalcond[6]=((((-1.0)*x5015*x5017))+((sj4*x5029))+(((-1.0)*x5031))+(((-1.0)*x5016*x5021))+(((-1.0)*x5016*x5023))+(((-1.0)*cj1*x5030))+((gconst4*sj4*x5020))+(((-1.0)*r00*x5015*x5022)));
evalcond[7]=((((-1.0)*x5019*x5020))+(((-1.0)*px*x5022))+(((-0.3425)*x5032))+(((-0.3425)*x5031))+(((0.076)*x5028))+(((0.2845)*sj1))+(((-0.0775)*x5033))+(((0.0535)*cj1))+(((0.076)*gconst5*x5017))+(((-1.0)*py*sj0))+(((-1.0)*r11*sj0*x5019))+(((0.0775)*x5027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5034=(gconst5*sj1);
IkReal x5035=(cj1*gconst4);
IkReal x5036=(cj1*gconst5);
IkReal x5037=(sj1*sj3);
IkReal x5038=(cj4*r22);
IkReal x5039=(r21*sj4);
IkReal x5040=(r20*sj3*sj4);
CheckValue<IkReal> x5041=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5041.valid){
continue;
}
CheckValue<IkReal> x5042 = IKatan2WithCheck(IkReal((((r20*x5035))+((x5034*x5040))+(((-1.0)*gconst4*x5037*x5039))+((r21*x5036))+((x5037*x5038)))),IkReal(((((-1.0)*x5036*x5040))+((gconst4*r20*sj1))+((sj3*x5035*x5039))+((r21*x5034))+(((-1.0)*cj1*sj3*x5038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5042.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5041.value)))+(x5042.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5043=IKcos(j2);
IkReal x5044=IKsin(j2);
IkReal x5045=(gconst5*sj4);
IkReal x5046=((1.0)*cj4);
IkReal x5047=(r10*sj0);
IkReal x5048=(cj3*sj1);
IkReal x5049=((0.076)*gconst4);
IkReal x5050=(cj0*r01);
IkReal x5051=(r12*sj0);
IkReal x5052=((1.0)*cj0);
IkReal x5053=(cj0*r02);
IkReal x5054=(gconst4*r21);
IkReal x5055=(gconst5*r20);
IkReal x5056=((1.0)*sj4);
IkReal x5057=(cj1*x5043);
IkReal x5058=(cj0*gconst5*r00);
IkReal x5059=(gconst4*r11*sj0);
IkReal x5060=((1.0)*x5044);
IkReal x5061=(sj1*x5043);
IkReal x5062=(cj1*x5044);
IkReal x5063=(sj1*x5044);
evalcond[0]=(((sj3*x5061))+((sj3*x5062))+(((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x5054*x5056))+((r20*x5045))+x5057+(((-1.0)*sj1*x5060)));
evalcond[2]=(((cj3*x5062))+(((-1.0)*r22*x5056))+((x5043*x5048))+((cj4*x5055))+(((-1.0)*x5046*x5054)));
evalcond[3]=(((gconst5*x5050))+((cj0*gconst4*r00))+((gconst5*r11*sj0))+((gconst4*x5047))+((sj3*x5057))+(((-1.0)*sj1*sj3*x5060)));
evalcond[4]=((((-0.3425)*x5063))+(((-0.076)*x5055))+(((0.0775)*x5061))+(((0.0775)*x5062))+(((0.0535)*sj1))+(((-0.2845)*cj1))+((r21*x5049))+pz+(((0.3425)*x5057)));
evalcond[5]=(((cj3*x5057))+((sj4*x5053))+((sj4*x5051))+(((-1.0)*x5048*x5060))+(((-1.0)*gconst5*x5046*x5047))+((cj4*x5059))+((cj4*gconst4*x5050))+(((-1.0)*x5046*x5058)));
evalcond[6]=((((-1.0)*r00*x5045*x5052))+((sj4*x5059))+((gconst4*sj4*x5050))+(((-1.0)*cj1*x5060))+(((-1.0)*x5061))+(((-1.0)*x5046*x5051))+(((-1.0)*x5046*x5053))+(((-1.0)*x5045*x5047)));
evalcond[7]=((((-0.3425)*x5061))+(((-0.3425)*x5062))+(((0.076)*x5058))+(((0.2845)*sj1))+(((0.076)*gconst5*x5047))+(((0.0775)*x5057))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*px*x5052))+(((-1.0)*x5049*x5050))+(((-0.0775)*x5063))+(((-1.0)*r11*sj0*x5049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5064=((1.0)*sj3);
IkReal x5065=((0.076)*sj4);
IkReal x5066=((0.076)*cj5*sj3);
IkReal x5067=((0.076)*sj3*sj5);
CheckValue<IkReal> x5068 = IKatan2WithCheck(IkReal(((((-1.0)*py*x5064))+(((-1.0)*r11*x5067))+((r10*x5066)))),IkReal(((((-1.0)*px*x5064))+((r00*x5066))+(((-1.0)*r01*x5067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5068.valid){
continue;
}
CheckValue<IkReal> x5069=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*cj5*rxp0_2))+(((-1.0)*cj5*r21*x5065))+(((-1.0)*r20*sj5*x5065))+((cj4*rxp1_2*sj5))+((rxp2_2*sj4)))),-1);
if(!x5069.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5068.value)+(((1.5707963267949)*(x5069.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5070=IKcos(j0);
IkReal x5071=IKsin(j0);
IkReal x5072=(sj4*sj5);
IkReal x5073=(cj4*sj5);
IkReal x5074=((1.0)*cj4);
IkReal x5075=((0.076)*sj5);
IkReal x5076=((1.0)*x5071);
IkReal x5077=(r11*x5070);
IkReal x5078=(r12*x5070);
IkReal x5079=(cj5*r00*x5071);
IkReal x5080=(cj5*r10*x5070);
evalcond[0]=(((cj5*x5077))+cj3+((r10*sj5*x5070))+(((-1.0)*cj5*r01*x5076))+(((-1.0)*r00*sj5*x5076)));
evalcond[1]=((((0.076)*x5080))+((px*x5071))+(((-1.0)*py*x5070))+(((-0.076)*x5079))+((r01*x5071*x5075))+(((-1.0)*x5075*x5077)));
evalcond[2]=(((cj4*r02*x5071))+(((-1.0)*sj4*x5080))+(((-1.0)*r01*x5072*x5076))+((sj4*x5079))+(((-1.0)*x5074*x5078))+((x5072*x5077)));
evalcond[3]=(((cj4*x5079))+(((-1.0)*sj3))+((x5073*x5077))+(((-1.0)*x5074*x5080))+(((-1.0)*r01*x5073*x5076))+((sj4*x5078))+(((-1.0)*r02*sj4*x5076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5081=((1.138)*sj3);
IkReal x5082=((1.138)*cj3);
IkReal x5083=((0.31)*cj5);
IkReal x5084=(cj4*r20);
IkReal x5085=((0.93)*sj5);
IkReal x5086=(cj4*r21);
IkReal x5087=(r22*sj4);
IkReal x5088=((0.912)*sj3);
IkReal x5089=(cj5*r20);
IkReal x5090=(r21*sj5);
IkReal x5091=((4.11)*sj4);
IkReal x5092=((0.93)*cj5);
IkReal x5093=((0.304)*cj3);
IkReal x5094=(pz*sj3);
IkReal x5095=((0.31)*sj5);
IkReal x5096=((0.304)*sj3);
IkReal x5097=((0.912)*cj3);
IkReal x5098=((1.37)*sj3);
IkReal x5099=(cj4*r22);
IkReal x5100=(cj3*pz);
IkReal x5101=((1.37)*cj3);
IkReal x5102=(r21*x5092);
IkReal x5103=((12.0)*x5094);
IkReal x5104=(r20*x5085);
IkReal x5105=((12.0)*x5100);
IkReal x5106=((0.93)*x5087);
IkReal x5107=((4.11)*sj3*x5099);
IkReal x5108=(x5088*x5089);
IkReal x5109=(x5088*x5090);
IkReal x5110=((4.11)*cj3*x5099);
IkReal x5111=(x5089*x5097);
IkReal x5112=(x5084*x5092);
IkReal x5113=(x5090*x5097);
IkReal x5114=(x5085*x5086);
IkReal x5115=((1.37)*sj4*x5090);
IkReal x5116=(sj3*x5089*x5091);
IkReal x5117=(sj3*x5090*x5091);
IkReal x5118=(cj3*x5089*x5091);
IkReal x5119=(cj3*x5090*x5091);
IkReal x5120=(x5108+x5107+x5116);
IkReal x5121=(x5111+x5110+x5112+x5118);
IkReal x5122=(x5109+x5102+x5103+x5104+x5117);
IkReal x5123=(x5106+x5105+x5114+x5113+x5119);
j1eval[0]=((IKabs((((sj4*x5089*x5098))+(((-1.0)*x5090*x5096))+(((-1.0)*x5081))+((x5089*x5096))+(((-1.0)*sj4*x5090*x5098))+(((-4.0)*x5094))+((x5098*x5099))+(((-1.0)*r20*x5095))+(((-1.0)*r21*x5083)))))+(IKabs((x5120+(((-1.0)*x5081))+(((-1.0)*x5122)))))+(IKabs((x5121+(((-1.0)*x5082))+(((-1.0)*x5123)))))+(IKabs((x5121+x5082+(((-1.0)*x5123)))))+(IKabs((((sj4*x5089*x5101))+((x5099*x5101))+(((-1.0)*x5090*x5093))+(((-1.0)*x5086*x5095))+(((-1.0)*x5082))+((x5089*x5093))+((x5083*x5084))+(((-0.31)*x5087))+(((-1.0)*sj4*x5090*x5101))+(((-4.0)*x5100)))))+(((1.712)*(IKabs(cj3))))+(((1.712)*(IKabs(sj3))))+(IKabs((x5120+x5081+(((-1.0)*x5122))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5124=((1.138)*sj3);
IkReal x5125=(r20*sj5);
IkReal x5126=(pz*sj3);
IkReal x5127=((1.37)*sj4);
IkReal x5128=(cj5*r21);
IkReal x5129=((4.11)*sj4);
IkReal x5130=((0.93)*x5128);
IkReal x5131=((12.0)*x5126);
IkReal x5132=((0.93)*x5125);
IkReal x5133=((-0.428)*sj3);
IkReal x5134=((0.31)*x5125);
IkReal x5135=((4.0)*x5126);
IkReal x5136=((0.31)*x5128);
IkReal x5137=(r21*sj3*sj5);
IkReal x5138=(cj5*r20*sj3);
IkReal x5139=(cj4*r22*sj3);
IkReal x5140=((4.11)*x5139);
IkReal x5141=((0.912)*x5138);
IkReal x5142=((0.912)*x5137);
IkReal x5143=((1.37)*x5139);
IkReal x5144=((0.304)*x5138);
IkReal x5145=((0.304)*x5137);
IkReal x5146=(x5129*x5138);
IkReal x5147=(x5129*x5137);
IkReal x5148=(x5127*x5138);
IkReal x5149=(x5127*x5137);
IkReal x5150=(x5146+x5140+x5141);
IkReal x5151=(x5148+x5144+x5143);
IkReal x5152=(x5149+x5145+x5136+x5135+x5134);
IkReal x5153=(x5147+x5142+x5132+x5131+x5130);
op[0]=(x5151+(((-1.0)*x5124))+(((-1.0)*x5152)));
op[1]=x5133;
op[2]=(x5150+(((-1.0)*x5124))+(((-1.0)*x5153)));
op[3]=((-0.856)*sj3);
op[4]=(x5150+x5124+(((-1.0)*x5153)));
op[5]=x5133;
op[6]=(x5151+x5124+(((-1.0)*x5152)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5154=((1.138)*cj3);
IkReal x5155=(cj5*r20);
IkReal x5156=((0.31)*cj4);
IkReal x5157=(r21*sj5);
IkReal x5158=(cj3*sj4);
IkReal x5159=(r22*sj4);
IkReal x5160=((0.93)*cj4);
IkReal x5161=((0.304)*cj3);
IkReal x5162=((0.912)*cj3);
IkReal x5163=((0.428)*cj3);
IkReal x5164=(cj3*pz);
IkReal x5165=((12.0)*x5164);
IkReal x5166=((0.93)*x5159);
IkReal x5167=((0.31)*x5159);
IkReal x5168=((4.0)*x5164);
IkReal x5169=(cj3*cj4*r22);
IkReal x5170=(x5155*x5161);
IkReal x5171=((1.37)*x5169);
IkReal x5172=((4.11)*x5169);
IkReal x5173=(x5155*x5162);
IkReal x5174=(x5155*x5160);
IkReal x5175=(x5157*x5162);
IkReal x5176=(x5157*x5160);
IkReal x5177=(x5155*x5156);
IkReal x5178=(x5157*x5161);
IkReal x5179=(x5156*x5157);
IkReal x5180=((1.37)*x5155*x5158);
IkReal x5181=((4.11)*x5155*x5158);
IkReal x5182=((4.11)*x5157*x5158);
IkReal x5183=((1.37)*x5157*x5158);
IkReal x5184=(x5181+x5173+x5172+x5174);
IkReal x5185=(x5180+x5171+x5170+x5177);
IkReal x5186=(x5182+x5165+x5166+x5176+x5175);
IkReal x5187=(x5183+x5167+x5168+x5179+x5178);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1)*((x5184+(((-1.0)*x5154))+(((-1.0)*x5186))))))+(((htj1*htj1)*((x5154+x5184+(((-1.0)*x5186))))))+(((-1.0)*htj1*x5163))+x5154+x5185+(((-1.0)*x5163*(htj1*htj1*htj1*htj1*htj1)))+(((-0.856)*cj3*(htj1*htj1*htj1)))+(((-1.0)*x5187))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x5185+(((-1.0)*x5154))+(((-1.0)*x5187)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x5188=(cj5*r20);
IkReal x5189=(r20*sj5);
IkReal x5190=(r21*sj5);
IkReal x5191=(cj5*r21);
IkReal x5192=(cj1*sj3*sj4);
IkReal x5193=(cj4*r22*sj3);
IkReal x5194=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*x5188*x5192))+((sj1*x5191))+((sj1*x5189))+((x5190*x5192))+(((-1.0)*cj1*x5193)))))+(IKabs((((sj1*x5193))+((cj1*x5189))+((x5188*x5194))+(((-1.0)*x5190*x5194))+((cj1*x5191))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5195=(cj4*r22);
IkReal x5196=((1.0)*cj1);
IkReal x5197=(r20*sj1);
IkReal x5198=(cj5*sj4);
IkReal x5199=(cj5*r21);
IkReal x5200=(r21*sj4*sj5);
if( IKabs((((sj1*x5195))+((cj1*r20*sj5))+(((-1.0)*sj1*x5200))+((x5197*x5198))+((cj1*x5199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x5199))+(((-1.0)*r20*x5196*x5198))+((cj1*x5200))+((sj5*x5197))+(((-1.0)*x5195*x5196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5195))+((cj1*r20*sj5))+(((-1.0)*sj1*x5200))+((x5197*x5198))+((cj1*x5199))))+IKsqr((((sj1*x5199))+(((-1.0)*r20*x5196*x5198))+((cj1*x5200))+((sj5*x5197))+(((-1.0)*x5195*x5196))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5195))+((cj1*r20*sj5))+(((-1.0)*sj1*x5200))+((x5197*x5198))+((cj1*x5199))), (((sj1*x5199))+(((-1.0)*r20*x5196*x5198))+((cj1*x5200))+((sj5*x5197))+(((-1.0)*x5195*x5196))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5201=IKcos(j2);
IkReal x5202=IKsin(j2);
IkReal x5203=(r10*sj0);
IkReal x5204=((0.076)*cj5);
IkReal x5205=(cj0*r00);
IkReal x5206=((0.076)*sj5);
IkReal x5207=(r11*sj0);
IkReal x5208=((1.0)*sj5);
IkReal x5209=((1.0)*cj0);
IkReal x5210=(cj0*r01);
IkReal x5211=((1.0)*sj1);
IkReal x5212=((0.3425)*sj1);
IkReal x5213=(sj4*sj5);
IkReal x5214=((1.0)*sj0);
IkReal x5215=(cj1*x5201);
IkReal x5216=((1.0)*cj5*sj4);
IkReal x5217=(cj1*x5202);
IkReal x5218=(sj1*x5201);
IkReal x5219=(x5202*x5211);
evalcond[0]=(x5217+x5218+(((-1.0)*cj5*r21))+(((-1.0)*r20*x5208)));
evalcond[1]=((((-1.0)*r21*sj4*x5208))+((cj4*r22))+(((-1.0)*x5219))+((cj5*r20*sj4))+x5215);
evalcond[2]=(((cj5*x5207))+((cj5*x5210))+(((-1.0)*x5219))+x5215+((sj5*x5205))+((sj5*x5203)));
CheckValue<IkReal> x5220=IKPowWithIntegerCheck(cj4,-1);
if(!x5220.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-1.0)*x5202*x5212))+(((0.0775)*x5217))+(((0.0775)*x5218))+(((0.3425)*x5215))+(((-0.076)*r22*sj4*(x5220.value))));
evalcond[4]=(((x5207*x5213))+(((-1.0)*x5201*x5211))+(((-1.0)*cj4*r12*x5214))+(((-1.0)*cj4*r02*x5209))+((x5210*x5213))+(((-1.0)*x5205*x5216))+(((-1.0)*x5217))+(((-1.0)*x5203*x5216)));
evalcond[5]=(((x5204*x5205))+(((-1.0)*x5206*x5207))+((x5203*x5204))+(((-1.0)*x5201*x5212))+(((-1.0)*x5206*x5210))+(((0.2845)*sj1))+(((-0.0775)*sj1*x5202))+(((-1.0)*py*x5214))+(((0.0535)*cj1))+(((0.0775)*x5215))+(((-1.0)*px*x5209))+(((-0.3425)*x5217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5221=((1.0)*cj1);
IkReal x5222=(cj4*r22);
IkReal x5223=(cj5*r21);
IkReal x5224=((1.0)*sj1);
IkReal x5225=(r20*sj5);
IkReal x5226=(r21*sj4*sj5);
IkReal x5227=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x5221*x5225))+(((-1.0)*x5221*x5223))+(((-1.0)*x5224*x5226))+((sj1*x5227))+((sj1*x5222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5223*x5224))+(((-1.0)*x5221*x5227))+(((-1.0)*x5221*x5222))+((cj1*x5226))+(((-1.0)*x5224*x5225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5221*x5225))+(((-1.0)*x5221*x5223))+(((-1.0)*x5224*x5226))+((sj1*x5227))+((sj1*x5222))))+IKsqr(((((-1.0)*x5223*x5224))+(((-1.0)*x5221*x5227))+(((-1.0)*x5221*x5222))+((cj1*x5226))+(((-1.0)*x5224*x5225))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5221*x5225))+(((-1.0)*x5221*x5223))+(((-1.0)*x5224*x5226))+((sj1*x5227))+((sj1*x5222))), ((((-1.0)*x5223*x5224))+(((-1.0)*x5221*x5227))+(((-1.0)*x5221*x5222))+((cj1*x5226))+(((-1.0)*x5224*x5225))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5228=IKcos(j2);
IkReal x5229=IKsin(j2);
IkReal x5230=(r10*sj0);
IkReal x5231=((0.076)*cj5);
IkReal x5232=(cj0*r00);
IkReal x5233=((0.076)*sj5);
IkReal x5234=(r11*sj0);
IkReal x5235=((1.0)*sj5);
IkReal x5236=((1.0)*cj0);
IkReal x5237=(cj0*r01);
IkReal x5238=((1.0)*sj1);
IkReal x5239=((0.3425)*sj1);
IkReal x5240=(sj4*sj5);
IkReal x5241=((1.0)*sj0);
IkReal x5242=(cj1*x5228);
IkReal x5243=((1.0)*cj5*sj4);
IkReal x5244=(cj1*x5229);
IkReal x5245=(sj1*x5229);
IkReal x5246=(x5228*x5238);
IkReal x5247=((1.0)*x5244);
IkReal x5248=(x5247+x5246);
evalcond[0]=((((-1.0)*x5248))+(((-1.0)*r20*x5235))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+x5242+(((-1.0)*x5229*x5238))+(((-1.0)*r21*sj4*x5235)));
evalcond[2]=(((sj5*x5230))+((sj5*x5232))+(((-1.0)*x5242))+x5245+((cj5*x5234))+((cj5*x5237)));
CheckValue<IkReal> x5249=IKPowWithIntegerCheck(cj4,-1);
if(!x5249.valid){
continue;
}
evalcond[3]=((((0.0775)*x5244))+(((0.0535)*sj1))+(((-1.0)*x5229*x5239))+(((-0.2845)*cj1))+(((0.0775)*sj1*x5228))+pz+(((0.3425)*x5242))+(((-0.076)*r22*sj4*(x5249.value))));
evalcond[4]=(((x5237*x5240))+(((-1.0)*x5248))+(((-1.0)*cj4*r02*x5236))+(((-1.0)*x5232*x5243))+(((-1.0)*cj4*r12*x5241))+(((-1.0)*x5230*x5243))+((x5234*x5240)));
evalcond[5]=((((0.0775)*x5242))+(((-1.0)*py*x5241))+(((0.2845)*sj1))+(((-1.0)*x5228*x5239))+(((-1.0)*px*x5236))+(((-0.0775)*x5245))+((x5231*x5232))+(((0.0535)*cj1))+((x5230*x5231))+(((-0.3425)*x5244))+(((-1.0)*x5233*x5237))+(((-1.0)*x5233*x5234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5250=(cj4*r22);
IkReal x5251=((1.0)*cj1);
IkReal x5252=(sj1*sj4);
IkReal x5253=(cj5*r20);
IkReal x5254=(r21*sj5);
IkReal x5255=(cj4*sj1);
IkReal x5256=(cj1*x5254);
if( IKabs((((cj4*x5256))+(((-1.0)*cj4*x5251*x5253))+((sj1*x5250))+(((-1.0)*x5252*x5254))+((x5252*x5253))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x5252))+((x5254*x5255))+(((-1.0)*sj4*x5251*x5253))+(((-1.0)*x5250*x5251))+((sj4*x5256))+(((-1.0)*x5253*x5255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x5256))+(((-1.0)*cj4*x5251*x5253))+((sj1*x5250))+(((-1.0)*x5252*x5254))+((x5252*x5253))+((cj1*r22*sj4))))+IKsqr((((r22*x5252))+((x5254*x5255))+(((-1.0)*sj4*x5251*x5253))+(((-1.0)*x5250*x5251))+((sj4*x5256))+(((-1.0)*x5253*x5255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x5256))+(((-1.0)*cj4*x5251*x5253))+((sj1*x5250))+(((-1.0)*x5252*x5254))+((x5252*x5253))+((cj1*r22*sj4))), (((r22*x5252))+((x5254*x5255))+(((-1.0)*sj4*x5251*x5253))+(((-1.0)*x5250*x5251))+((sj4*x5256))+(((-1.0)*x5253*x5255))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5257=IKcos(j2);
IkReal x5258=IKsin(j2);
IkReal x5259=((1.0)*sj4);
IkReal x5260=((0.076)*sj5);
IkReal x5261=(r11*sj0);
IkReal x5262=((1.0)*cj4);
IkReal x5263=(cj0*r02);
IkReal x5264=(cj0*r01);
IkReal x5265=(cj5*r20);
IkReal x5266=((1.0)*sj1);
IkReal x5267=(sj4*sj5);
IkReal x5268=(r21*sj5);
IkReal x5269=(cj4*sj5);
IkReal x5270=(r12*sj0);
IkReal x5271=(cj1*x5257);
IkReal x5272=(cj5*r10*sj0);
IkReal x5273=(cj0*cj5*r00);
IkReal x5274=(cj1*x5258);
IkReal x5275=(sj1*x5258);
IkReal x5276=(sj1*x5257);
IkReal x5277=(x5258*x5266);
evalcond[0]=(((cj4*r22))+(((-1.0)*x5259*x5268))+x5271+(((-1.0)*x5277))+((sj4*x5265)));
evalcond[1]=(((cj4*x5265))+x5274+x5276+(((-1.0)*r22*x5259))+(((-1.0)*x5262*x5268)));
evalcond[2]=((((-0.3425)*x5275))+(((-0.076)*x5265))+(((0.0775)*x5274))+(((0.0775)*x5276))+(((0.0535)*sj1))+(((-0.2845)*cj1))+((r21*x5260))+(((0.3425)*x5271))+pz);
evalcond[3]=(((x5261*x5269))+x5271+(((-1.0)*x5277))+(((-1.0)*x5262*x5272))+(((-1.0)*x5262*x5273))+((x5264*x5269))+((sj4*x5263))+((sj4*x5270)));
evalcond[4]=((((-1.0)*x5259*x5272))+(((-1.0)*x5259*x5273))+((x5261*x5267))+(((-1.0)*x5262*x5270))+((x5264*x5267))+(((-1.0)*x5262*x5263))+(((-1.0)*x5274))+(((-1.0)*x5257*x5266)));
evalcond[5]=((((0.076)*x5272))+(((0.076)*x5273))+(((-0.3425)*x5274))+(((-0.3425)*x5276))+(((0.0775)*x5271))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*x5260*x5261))+(((-1.0)*x5260*x5264))+(((-0.0775)*x5275))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5278=((1.0)*cj4);
IkReal x5279=(r22*sj1);
IkReal x5280=((1.0)*sj4);
IkReal x5281=(cj1*r22);
IkReal x5282=(cj1*r21*sj5);
IkReal x5283=(cj5*r20*sj1);
IkReal x5284=(r21*sj1*sj5);
IkReal x5285=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x5278*x5282))+((cj4*x5279))+((cj4*x5285))+((sj4*x5283))+(((-1.0)*x5280*x5284))+(((-1.0)*x5280*x5281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5279*x5280))+(((-1.0)*x5278*x5284))+(((-1.0)*x5278*x5281))+((cj4*x5283))+((sj4*x5282))+(((-1.0)*x5280*x5285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5278*x5282))+((cj4*x5279))+((cj4*x5285))+((sj4*x5283))+(((-1.0)*x5280*x5284))+(((-1.0)*x5280*x5281))))+IKsqr(((((-1.0)*x5279*x5280))+(((-1.0)*x5278*x5284))+(((-1.0)*x5278*x5281))+((cj4*x5283))+((sj4*x5282))+(((-1.0)*x5280*x5285))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5278*x5282))+((cj4*x5279))+((cj4*x5285))+((sj4*x5283))+(((-1.0)*x5280*x5284))+(((-1.0)*x5280*x5281))), ((((-1.0)*x5279*x5280))+(((-1.0)*x5278*x5284))+(((-1.0)*x5278*x5281))+((cj4*x5283))+((sj4*x5282))+(((-1.0)*x5280*x5285))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5286=IKcos(j2);
IkReal x5287=IKsin(j2);
IkReal x5288=(sj0*sj4);
IkReal x5289=(cj5*r10);
IkReal x5290=((0.076)*sj0);
IkReal x5291=((1.0)*sj4);
IkReal x5292=(r11*sj5);
IkReal x5293=((0.076)*sj5);
IkReal x5294=((1.0)*cj4);
IkReal x5295=(cj0*r02);
IkReal x5296=(cj0*r01);
IkReal x5297=((1.0)*sj1);
IkReal x5298=(r21*sj5);
IkReal x5299=(cj5*r20);
IkReal x5300=(cj1*x5286);
IkReal x5301=(cj0*cj5*r00);
IkReal x5302=(cj1*x5287);
IkReal x5303=(sj1*x5287);
IkReal x5304=(sj1*x5286);
IkReal x5305=(x5286*x5297);
IkReal x5306=((1.0)*x5302);
IkReal x5307=(x5305+x5306);
evalcond[0]=((((-1.0)*x5287*x5297))+((cj4*r22))+x5300+((sj4*x5299))+(((-1.0)*x5291*x5298)));
evalcond[1]=((((-1.0)*r22*x5291))+(((-1.0)*x5307))+(((-1.0)*x5294*x5298))+((cj4*x5299)));
evalcond[2]=((((-0.3425)*x5303))+(((0.0535)*sj1))+((r21*x5293))+(((-0.076)*x5299))+(((-0.2845)*cj1))+pz+(((0.3425)*x5300))+(((0.0775)*x5302))+(((0.0775)*x5304)));
evalcond[3]=(((r12*x5288))+((cj4*sj0*x5292))+(((-1.0)*sj0*x5289*x5294))+x5303+((cj4*sj5*x5296))+(((-1.0)*x5300))+((sj4*x5295))+(((-1.0)*x5294*x5301)));
evalcond[4]=((((-1.0)*x5307))+(((-1.0)*x5291*x5301))+((sj4*sj5*x5296))+((x5288*x5292))+(((-1.0)*x5294*x5295))+(((-1.0)*x5288*x5289))+(((-1.0)*r12*sj0*x5294)));
evalcond[5]=((((-0.3425)*x5302))+(((-0.3425)*x5304))+(((0.2845)*sj1))+((x5289*x5290))+(((0.076)*x5301))+(((-0.0775)*x5303))+(((0.0535)*cj1))+(((-1.0)*x5293*x5296))+(((-1.0)*py*sj0))+(((0.0775)*x5300))+(((-1.0)*x5290*x5292))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5308=(cj1*cj4);
IkReal x5309=(r21*sj5);
IkReal x5310=((1.0)*cj3);
IkReal x5311=(cj5*r20);
IkReal x5312=(cj1*sj4);
IkReal x5313=(sj1*sj4);
IkReal x5314=(cj4*sj1);
CheckValue<IkReal> x5315 = IKatan2WithCheck(IkReal(((((-1.0)*x5308*x5311))+((r22*x5312))+((x5308*x5309))+((cj3*r22*x5314))+((cj3*x5311*x5313))+(((-1.0)*x5309*x5310*x5313)))),IkReal((((r22*x5313))+(((-1.0)*x5311*x5314))+((x5309*x5314))+(((-1.0)*x5310*x5311*x5312))+((cj3*x5309*x5312))+(((-1.0)*r22*x5308*x5310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5315.valid){
continue;
}
CheckValue<IkReal> x5316=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5316.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5315.value)+(((1.5707963267949)*(x5316.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5317=IKcos(j2);
IkReal x5318=IKsin(j2);
IkReal x5319=(r10*sj0);
IkReal x5320=((0.076)*cj5);
IkReal x5321=((1.0)*sj1);
IkReal x5322=(cj0*r00);
IkReal x5323=((0.076)*sj5);
IkReal x5324=(r11*sj0);
IkReal x5325=((1.0)*sj0);
IkReal x5326=((1.0)*sj5);
IkReal x5327=((1.0)*cj4);
IkReal x5328=(cj0*r01);
IkReal x5329=(cj0*r02);
IkReal x5330=(sj4*sj5);
IkReal x5331=(cj4*sj5);
IkReal x5332=(cj5*r20);
IkReal x5333=(cj1*x5317);
IkReal x5334=((1.0)*cj5*sj4);
IkReal x5335=(cj3*x5318);
IkReal x5336=(cj1*x5318);
IkReal x5337=(sj1*x5317);
IkReal x5338=(sj1*x5318);
evalcond[0]=((((-1.0)*r20*x5326))+((sj3*x5337))+((sj3*x5336))+(((-1.0)*cj5*r21)));
evalcond[1]=((((-1.0)*x5318*x5321))+((sj4*x5332))+((cj4*r22))+x5333+(((-1.0)*r21*sj4*x5326)));
evalcond[2]=((((-1.0)*cj4*r21*x5326))+((cj1*x5335))+((cj4*x5332))+(((-1.0)*r22*sj4))+((cj3*x5337)));
evalcond[3]=(((cj5*x5328))+((cj5*x5324))+((sj5*x5319))+(((-1.0)*sj3*x5318*x5321))+((sj3*x5333))+((sj5*x5322)));
evalcond[4]=((((-1.0)*r20*x5320))+(((0.3425)*x5333))+(((0.0535)*sj1))+(((0.0775)*x5337))+(((0.0775)*x5336))+(((-0.2845)*cj1))+(((-0.3425)*x5338))+pz+((r21*x5323)));
evalcond[5]=(((sj4*x5329))+((x5328*x5331))+((x5324*x5331))+((r12*sj0*sj4))+(((-1.0)*cj5*x5322*x5327))+(((-1.0)*cj5*x5319*x5327))+((cj3*x5333))+(((-1.0)*x5321*x5335)));
evalcond[6]=(((x5328*x5330))+(((-1.0)*x5336))+((x5324*x5330))+(((-1.0)*x5317*x5321))+(((-1.0)*x5322*x5334))+(((-1.0)*cj4*r12*x5325))+(((-1.0)*x5327*x5329))+(((-1.0)*x5319*x5334)));
evalcond[7]=((((-1.0)*py*x5325))+(((0.2845)*sj1))+(((-1.0)*x5323*x5328))+(((-1.0)*x5323*x5324))+(((0.0775)*x5333))+((x5320*x5322))+(((-0.3425)*x5337))+(((-0.3425)*x5336))+(((0.0535)*cj1))+((x5319*x5320))+(((-1.0)*cj0*px))+(((-0.0775)*x5338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5339=((1.0)*cj1);
IkReal x5340=(sj0*sj1);
IkReal x5341=(cj5*r11);
IkReal x5342=(r10*sj5);
IkReal x5343=(r20*sj5);
IkReal x5344=(cj5*r21);
IkReal x5345=(cj0*cj5*r01);
IkReal x5346=(cj0*r00*sj5);
CheckValue<IkReal> x5347=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5347.valid){
continue;
}
CheckValue<IkReal> x5348 = IKatan2WithCheck(IkReal((((sj1*x5346))+((sj1*x5345))+((cj1*x5344))+((cj1*x5343))+((x5340*x5341))+((x5340*x5342)))),IkReal((((sj1*x5343))+((sj1*x5344))+(((-1.0)*x5339*x5346))+(((-1.0)*x5339*x5345))+(((-1.0)*sj0*x5339*x5342))+(((-1.0)*sj0*x5339*x5341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5348.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5347.value)))+(x5348.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5349=IKcos(j2);
IkReal x5350=IKsin(j2);
IkReal x5351=(r10*sj0);
IkReal x5352=((0.076)*cj5);
IkReal x5353=((1.0)*sj1);
IkReal x5354=(cj0*r00);
IkReal x5355=((0.076)*sj5);
IkReal x5356=(r11*sj0);
IkReal x5357=((1.0)*sj0);
IkReal x5358=((1.0)*sj5);
IkReal x5359=((1.0)*cj4);
IkReal x5360=(cj0*r01);
IkReal x5361=(cj0*r02);
IkReal x5362=(sj4*sj5);
IkReal x5363=(cj4*sj5);
IkReal x5364=(cj5*r20);
IkReal x5365=(cj1*x5349);
IkReal x5366=((1.0)*cj5*sj4);
IkReal x5367=(cj3*x5350);
IkReal x5368=(cj1*x5350);
IkReal x5369=(sj1*x5349);
IkReal x5370=(sj1*x5350);
evalcond[0]=((((-1.0)*r20*x5358))+(((-1.0)*cj5*r21))+((sj3*x5369))+((sj3*x5368)));
evalcond[1]=(((cj4*r22))+x5365+((sj4*x5364))+(((-1.0)*x5350*x5353))+(((-1.0)*r21*sj4*x5358)));
evalcond[2]=(((cj1*x5367))+((cj3*x5369))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x5358))+((cj4*x5364)));
evalcond[3]=((((-1.0)*sj3*x5350*x5353))+((cj5*x5356))+((sj5*x5354))+((sj5*x5351))+((sj3*x5365))+((cj5*x5360)));
evalcond[4]=((((-1.0)*r20*x5352))+(((-0.3425)*x5370))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x5369))+(((0.0775)*x5368))+(((0.3425)*x5365))+((r21*x5355)));
evalcond[5]=(((x5356*x5363))+(((-1.0)*cj5*x5354*x5359))+((sj4*x5361))+((x5360*x5363))+((r12*sj0*sj4))+(((-1.0)*cj5*x5351*x5359))+((cj3*x5365))+(((-1.0)*x5353*x5367)));
evalcond[6]=(((x5356*x5362))+(((-1.0)*x5368))+((x5360*x5362))+(((-1.0)*x5349*x5353))+(((-1.0)*x5359*x5361))+(((-1.0)*cj4*r12*x5357))+(((-1.0)*x5351*x5366))+(((-1.0)*x5354*x5366)));
evalcond[7]=((((-1.0)*x5355*x5356))+(((0.2845)*sj1))+(((-0.0775)*x5370))+((x5351*x5352))+(((-1.0)*py*x5357))+((x5352*x5354))+(((0.0535)*cj1))+(((0.0775)*x5365))+(((-1.0)*x5355*x5360))+(((-0.3425)*x5369))+(((-0.3425)*x5368))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5371=(cj5*r20);
IkReal x5372=(r20*sj5);
IkReal x5373=(r21*sj5);
IkReal x5374=(cj5*r21);
IkReal x5375=(cj1*sj3*sj4);
IkReal x5376=(cj4*r22*sj3);
IkReal x5377=(sj1*sj3*sj4);
CheckValue<IkReal> x5378=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5378.valid){
continue;
}
CheckValue<IkReal> x5379 = IKatan2WithCheck(IkReal((((sj1*x5376))+((cj1*x5374))+((cj1*x5372))+((x5371*x5377))+(((-1.0)*x5373*x5377)))),IkReal((((sj1*x5372))+((sj1*x5374))+((x5373*x5375))+(((-1.0)*x5371*x5375))+(((-1.0)*cj1*x5376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5379.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5378.value)))+(x5379.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5380=IKcos(j2);
IkReal x5381=IKsin(j2);
IkReal x5382=(r10*sj0);
IkReal x5383=((0.076)*cj5);
IkReal x5384=((1.0)*sj1);
IkReal x5385=(cj0*r00);
IkReal x5386=((0.076)*sj5);
IkReal x5387=(r11*sj0);
IkReal x5388=((1.0)*sj0);
IkReal x5389=((1.0)*sj5);
IkReal x5390=((1.0)*cj4);
IkReal x5391=(cj0*r01);
IkReal x5392=(cj0*r02);
IkReal x5393=(sj4*sj5);
IkReal x5394=(cj4*sj5);
IkReal x5395=(cj5*r20);
IkReal x5396=(cj1*x5380);
IkReal x5397=((1.0)*cj5*sj4);
IkReal x5398=(cj3*x5381);
IkReal x5399=(cj1*x5381);
IkReal x5400=(sj1*x5380);
IkReal x5401=(sj1*x5381);
evalcond[0]=((((-1.0)*r20*x5389))+((sj3*x5399))+(((-1.0)*cj5*r21))+((sj3*x5400)));
evalcond[1]=(((cj4*r22))+x5396+((sj4*x5395))+(((-1.0)*r21*sj4*x5389))+(((-1.0)*x5381*x5384)));
evalcond[2]=(((cj1*x5398))+((cj4*x5395))+(((-1.0)*cj4*r21*x5389))+(((-1.0)*r22*sj4))+((cj3*x5400)));
evalcond[3]=(((cj5*x5387))+((cj5*x5391))+(((-1.0)*sj3*x5381*x5384))+((sj3*x5396))+((sj5*x5382))+((sj5*x5385)));
evalcond[4]=((((0.0775)*x5400))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x5401))+(((-1.0)*r20*x5383))+pz+(((0.0775)*x5399))+((r21*x5386))+(((0.3425)*x5396)));
evalcond[5]=((((-1.0)*cj5*x5382*x5390))+((x5391*x5394))+((sj4*x5392))+(((-1.0)*x5384*x5398))+(((-1.0)*cj5*x5385*x5390))+((r12*sj0*sj4))+((cj3*x5396))+((x5387*x5394)));
evalcond[6]=(((x5391*x5393))+(((-1.0)*x5385*x5397))+(((-1.0)*x5380*x5384))+(((-1.0)*x5390*x5392))+(((-1.0)*cj4*r12*x5388))+((x5387*x5393))+(((-1.0)*x5382*x5397))+(((-1.0)*x5399)));
evalcond[7]=(((x5383*x5385))+((x5382*x5383))+(((-0.0775)*x5401))+(((0.2845)*sj1))+(((-0.3425)*x5400))+(((0.0535)*cj1))+(((-1.0)*py*x5388))+(((-1.0)*x5386*x5387))+(((0.0775)*x5396))+(((-1.0)*x5386*x5391))+(((-0.3425)*x5399))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5402=((1.0)*cj3);
IkReal x5403=(cj5*sj4);
IkReal x5404=(cj3*sj4*sj5);
CheckValue<IkReal> x5405 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5402*x5403))+(((-1.0)*cj4*r12*x5402))+((r11*x5404)))),IkReal(((((-1.0)*r00*x5402*x5403))+(((-1.0)*cj4*r02*x5402))+((r01*x5404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5405.valid){
continue;
}
CheckValue<IkReal> x5406=IKPowWithIntegerCheck(IKsign((((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj4*cj5*r20)))),-1);
if(!x5406.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5405.value)+(((1.5707963267949)*(x5406.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5407=IKcos(j0);
IkReal x5408=IKsin(j0);
IkReal x5409=(sj4*sj5);
IkReal x5410=(cj4*sj5);
IkReal x5411=((1.0)*cj4);
IkReal x5412=((0.076)*sj5);
IkReal x5413=((1.0)*x5408);
IkReal x5414=(r11*x5407);
IkReal x5415=(r12*x5407);
IkReal x5416=(cj5*r00*x5408);
IkReal x5417=(cj5*r10*x5407);
evalcond[0]=((((-1.0)*r00*sj5*x5413))+cj3+((r10*sj5*x5407))+(((-1.0)*cj5*r01*x5413))+((cj5*x5414)));
evalcond[1]=((((-1.0)*x5412*x5414))+(((0.076)*x5417))+((px*x5408))+((r01*x5408*x5412))+(((-1.0)*py*x5407))+(((-0.076)*x5416)));
evalcond[2]=(((cj4*r02*x5408))+((sj4*x5416))+(((-1.0)*r01*x5409*x5413))+(((-1.0)*x5411*x5415))+(((-1.0)*sj4*x5417))+((x5409*x5414)));
evalcond[3]=(((x5410*x5414))+(((-1.0)*sj3))+((cj4*x5416))+((sj4*x5415))+(((-1.0)*r01*x5410*x5413))+(((-1.0)*r02*sj4*x5413))+(((-1.0)*x5411*x5417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5418=((1.138)*sj3);
IkReal x5419=((1.138)*cj3);
IkReal x5420=((0.31)*cj5);
IkReal x5421=(cj4*r20);
IkReal x5422=((0.93)*sj5);
IkReal x5423=(cj4*r21);
IkReal x5424=(r22*sj4);
IkReal x5425=((0.912)*sj3);
IkReal x5426=(cj5*r20);
IkReal x5427=(r21*sj5);
IkReal x5428=((4.11)*sj4);
IkReal x5429=((0.93)*cj5);
IkReal x5430=((0.304)*cj3);
IkReal x5431=(pz*sj3);
IkReal x5432=((0.31)*sj5);
IkReal x5433=((0.304)*sj3);
IkReal x5434=((0.912)*cj3);
IkReal x5435=((1.37)*sj3);
IkReal x5436=(cj4*r22);
IkReal x5437=(cj3*pz);
IkReal x5438=((1.37)*cj3);
IkReal x5439=(r21*x5429);
IkReal x5440=((12.0)*x5431);
IkReal x5441=(r20*x5422);
IkReal x5442=((12.0)*x5437);
IkReal x5443=((0.93)*x5424);
IkReal x5444=((4.11)*sj3*x5436);
IkReal x5445=(x5425*x5426);
IkReal x5446=(x5425*x5427);
IkReal x5447=((4.11)*cj3*x5436);
IkReal x5448=(x5426*x5434);
IkReal x5449=(x5421*x5429);
IkReal x5450=(x5427*x5434);
IkReal x5451=(x5422*x5423);
IkReal x5452=((1.37)*sj4*x5427);
IkReal x5453=(sj3*x5426*x5428);
IkReal x5454=(sj3*x5427*x5428);
IkReal x5455=(cj3*x5426*x5428);
IkReal x5456=(cj3*x5427*x5428);
IkReal x5457=(x5453+x5445+x5444);
IkReal x5458=(x5455+x5449+x5448+x5447);
IkReal x5459=(x5454+x5441+x5440+x5446+x5439);
IkReal x5460=(x5450+x5451+x5456+x5443+x5442);
j1eval[0]=((IKabs((x5458+x5419+(((-1.0)*x5460)))))+(IKabs((x5458+(((-1.0)*x5419))+(((-1.0)*x5460)))))+(IKabs((x5457+(((-1.0)*x5418))+(((-1.0)*x5459)))))+(IKabs(((((-1.0)*x5427*x5433))+((x5426*x5433))+(((-1.0)*sj4*x5427*x5435))+((x5435*x5436))+(((-1.0)*r20*x5432))+(((-1.0)*x5418))+(((-1.0)*r21*x5420))+(((-4.0)*x5431))+((sj4*x5426*x5435)))))+(IKabs(((((-1.0)*x5423*x5432))+(((-0.31)*x5424))+(((-1.0)*x5427*x5430))+((x5426*x5430))+(((-1.0)*sj4*x5427*x5438))+((x5420*x5421))+((x5436*x5438))+(((-1.0)*x5419))+(((-4.0)*x5437))+((sj4*x5426*x5438)))))+(IKabs((x5457+x5418+(((-1.0)*x5459)))))+(((1.712)*(IKabs(cj3))))+(((1.712)*(IKabs(sj3)))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5461=((1.138)*sj3);
IkReal x5462=(r20*sj5);
IkReal x5463=(pz*sj3);
IkReal x5464=((1.37)*sj4);
IkReal x5465=(cj5*r21);
IkReal x5466=((4.11)*sj4);
IkReal x5467=((0.93)*x5465);
IkReal x5468=((12.0)*x5463);
IkReal x5469=((0.93)*x5462);
IkReal x5470=((-0.428)*sj3);
IkReal x5471=((0.31)*x5462);
IkReal x5472=((4.0)*x5463);
IkReal x5473=((0.31)*x5465);
IkReal x5474=(r21*sj3*sj5);
IkReal x5475=(cj5*r20*sj3);
IkReal x5476=(cj4*r22*sj3);
IkReal x5477=((4.11)*x5476);
IkReal x5478=((0.912)*x5475);
IkReal x5479=((0.912)*x5474);
IkReal x5480=((1.37)*x5476);
IkReal x5481=((0.304)*x5475);
IkReal x5482=((0.304)*x5474);
IkReal x5483=(x5466*x5475);
IkReal x5484=(x5466*x5474);
IkReal x5485=(x5464*x5475);
IkReal x5486=(x5464*x5474);
IkReal x5487=(x5477+x5478+x5483);
IkReal x5488=(x5485+x5481+x5480);
IkReal x5489=(x5472+x5473+x5471+x5486+x5482);
IkReal x5490=(x5467+x5469+x5468+x5479+x5484);
op[0]=((((-1.0)*x5489))+x5488+(((-1.0)*x5461)));
op[1]=x5470;
op[2]=(x5487+(((-1.0)*x5490))+(((-1.0)*x5461)));
op[3]=((-0.856)*sj3);
op[4]=(x5461+x5487+(((-1.0)*x5490)));
op[5]=x5470;
op[6]=((((-1.0)*x5489))+x5461+x5488);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5491=((1.138)*cj3);
IkReal x5492=(cj5*r20);
IkReal x5493=((0.31)*cj4);
IkReal x5494=(r21*sj5);
IkReal x5495=(cj3*sj4);
IkReal x5496=(r22*sj4);
IkReal x5497=((0.93)*cj4);
IkReal x5498=((0.304)*cj3);
IkReal x5499=((0.912)*cj3);
IkReal x5500=((0.428)*cj3);
IkReal x5501=(cj3*pz);
IkReal x5502=((12.0)*x5501);
IkReal x5503=((0.93)*x5496);
IkReal x5504=((0.31)*x5496);
IkReal x5505=((4.0)*x5501);
IkReal x5506=(cj3*cj4*r22);
IkReal x5507=(x5492*x5498);
IkReal x5508=((1.37)*x5506);
IkReal x5509=((4.11)*x5506);
IkReal x5510=(x5492*x5499);
IkReal x5511=(x5492*x5497);
IkReal x5512=(x5494*x5499);
IkReal x5513=(x5494*x5497);
IkReal x5514=(x5492*x5493);
IkReal x5515=(x5494*x5498);
IkReal x5516=(x5493*x5494);
IkReal x5517=((1.37)*x5492*x5495);
IkReal x5518=((4.11)*x5492*x5495);
IkReal x5519=((4.11)*x5494*x5495);
IkReal x5520=((1.37)*x5494*x5495);
IkReal x5521=(x5509+x5518+x5511+x5510);
IkReal x5522=(x5508+x5507+x5514+x5517);
IkReal x5523=(x5502+x5503+x5519+x5513+x5512);
IkReal x5524=(x5520+x5504+x5505+x5515+x5516);
j1evalpoly[0]=((((-1.0)*x5500*(htj1*htj1*htj1*htj1*htj1)))+x5522+(((-1.0)*x5524))+x5491+(((-1.0)*htj1*x5500))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x5522+(((-1.0)*x5524))+(((-1.0)*x5491))))))+(((htj1*htj1)*((x5521+(((-1.0)*x5523))+x5491))))+(((htj1*htj1*htj1*htj1)*((x5521+(((-1.0)*x5523))+(((-1.0)*x5491))))))+(((-0.856)*cj3*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x5525=(cj5*r20);
IkReal x5526=(r20*sj5);
IkReal x5527=(r21*sj5);
IkReal x5528=(cj5*r21);
IkReal x5529=(cj1*sj3*sj4);
IkReal x5530=(cj4*r22*sj3);
IkReal x5531=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((x5527*x5529))+(((-1.0)*x5525*x5529))+((sj1*x5528))+((sj1*x5526))+(((-1.0)*cj1*x5530)))))+(IKabs((((cj1*x5526))+((cj1*x5528))+(((-1.0)*x5527*x5531))+((sj1*x5530))+((x5525*x5531))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5532=(cj4*r22);
IkReal x5533=((1.0)*cj1);
IkReal x5534=(r20*sj1);
IkReal x5535=(cj5*sj4);
IkReal x5536=(cj5*r21);
IkReal x5537=(r21*sj4*sj5);
if( IKabs((((cj1*r20*sj5))+((x5534*x5535))+(((-1.0)*sj1*x5537))+((cj1*x5536))+((sj1*x5532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x5534))+((cj1*x5537))+(((-1.0)*r20*x5533*x5535))+((sj1*x5536))+(((-1.0)*x5532*x5533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+((x5534*x5535))+(((-1.0)*sj1*x5537))+((cj1*x5536))+((sj1*x5532))))+IKsqr((((sj5*x5534))+((cj1*x5537))+(((-1.0)*r20*x5533*x5535))+((sj1*x5536))+(((-1.0)*x5532*x5533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+((x5534*x5535))+(((-1.0)*sj1*x5537))+((cj1*x5536))+((sj1*x5532))), (((sj5*x5534))+((cj1*x5537))+(((-1.0)*r20*x5533*x5535))+((sj1*x5536))+(((-1.0)*x5532*x5533))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5538=IKcos(j2);
IkReal x5539=IKsin(j2);
IkReal x5540=(r10*sj0);
IkReal x5541=((0.076)*cj5);
IkReal x5542=(cj0*r00);
IkReal x5543=((0.076)*sj5);
IkReal x5544=(r11*sj0);
IkReal x5545=((1.0)*sj5);
IkReal x5546=((1.0)*cj0);
IkReal x5547=(cj0*r01);
IkReal x5548=((1.0)*sj1);
IkReal x5549=((0.3425)*sj1);
IkReal x5550=(sj4*sj5);
IkReal x5551=((1.0)*sj0);
IkReal x5552=(cj1*x5538);
IkReal x5553=((1.0)*cj5*sj4);
IkReal x5554=(cj1*x5539);
IkReal x5555=(sj1*x5538);
IkReal x5556=(x5539*x5548);
evalcond[0]=(x5555+x5554+(((-1.0)*cj5*r21))+(((-1.0)*r20*x5545)));
evalcond[1]=(x5552+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x5545))+(((-1.0)*x5556)));
evalcond[2]=(x5552+((sj5*x5542))+((sj5*x5540))+((cj5*x5547))+((cj5*x5544))+(((-1.0)*x5556)));
CheckValue<IkReal> x5557=IKPowWithIntegerCheck(cj4,-1);
if(!x5557.valid){
continue;
}
evalcond[3]=((((-1.0)*x5539*x5549))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x5554))+(((0.0775)*x5555))+pz+(((0.3425)*x5552))+(((-0.076)*r22*sj4*(x5557.value))));
evalcond[4]=((((-1.0)*x5554))+(((-1.0)*x5538*x5548))+(((-1.0)*x5542*x5553))+((x5547*x5550))+(((-1.0)*cj4*r02*x5546))+(((-1.0)*x5540*x5553))+(((-1.0)*cj4*r12*x5551))+((x5544*x5550)));
evalcond[5]=((((-1.0)*x5538*x5549))+(((-1.0)*x5543*x5544))+(((-1.0)*x5543*x5547))+(((-0.3425)*x5554))+(((0.2845)*sj1))+(((-0.0775)*sj1*x5539))+((x5541*x5542))+(((0.0775)*x5552))+(((0.0535)*cj1))+((x5540*x5541))+(((-1.0)*px*x5546))+(((-1.0)*py*x5551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5558=((1.0)*cj1);
IkReal x5559=(cj4*r22);
IkReal x5560=(cj5*r21);
IkReal x5561=((1.0)*sj1);
IkReal x5562=(r20*sj5);
IkReal x5563=(r21*sj4*sj5);
IkReal x5564=(cj5*r20*sj4);
if( IKabs((((sj1*x5559))+((sj1*x5564))+(((-1.0)*x5561*x5563))+(((-1.0)*x5558*x5560))+(((-1.0)*x5558*x5562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x5563))+(((-1.0)*x5558*x5559))+(((-1.0)*x5561*x5562))+(((-1.0)*x5558*x5564))+(((-1.0)*x5560*x5561)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5559))+((sj1*x5564))+(((-1.0)*x5561*x5563))+(((-1.0)*x5558*x5560))+(((-1.0)*x5558*x5562))))+IKsqr((((cj1*x5563))+(((-1.0)*x5558*x5559))+(((-1.0)*x5561*x5562))+(((-1.0)*x5558*x5564))+(((-1.0)*x5560*x5561))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5559))+((sj1*x5564))+(((-1.0)*x5561*x5563))+(((-1.0)*x5558*x5560))+(((-1.0)*x5558*x5562))), (((cj1*x5563))+(((-1.0)*x5558*x5559))+(((-1.0)*x5561*x5562))+(((-1.0)*x5558*x5564))+(((-1.0)*x5560*x5561))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5565=IKcos(j2);
IkReal x5566=IKsin(j2);
IkReal x5567=(r10*sj0);
IkReal x5568=((0.076)*cj5);
IkReal x5569=(cj0*r00);
IkReal x5570=((0.076)*sj5);
IkReal x5571=(r11*sj0);
IkReal x5572=((1.0)*sj5);
IkReal x5573=((1.0)*cj0);
IkReal x5574=(cj0*r01);
IkReal x5575=((1.0)*sj1);
IkReal x5576=((0.3425)*sj1);
IkReal x5577=(sj4*sj5);
IkReal x5578=((1.0)*sj0);
IkReal x5579=(cj1*x5565);
IkReal x5580=((1.0)*cj5*sj4);
IkReal x5581=(cj1*x5566);
IkReal x5582=(sj1*x5566);
IkReal x5583=(x5565*x5575);
IkReal x5584=((1.0)*x5581);
IkReal x5585=(x5584+x5583);
evalcond[0]=((((-1.0)*x5585))+(((-1.0)*cj5*r21))+(((-1.0)*r20*x5572)));
evalcond[1]=(x5579+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x5572))+(((-1.0)*x5566*x5575)));
evalcond[2]=(x5582+((sj5*x5567))+((sj5*x5569))+((cj5*x5571))+((cj5*x5574))+(((-1.0)*x5579)));
CheckValue<IkReal> x5586=IKPowWithIntegerCheck(cj4,-1);
if(!x5586.valid){
continue;
}
evalcond[3]=((((0.3425)*x5579))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x5581))+(((0.0775)*sj1*x5565))+(((-1.0)*x5566*x5576))+(((-0.076)*r22*sj4*(x5586.value))));
evalcond[4]=((((-1.0)*cj4*r02*x5573))+((x5574*x5577))+(((-1.0)*x5567*x5580))+(((-1.0)*x5585))+(((-1.0)*x5569*x5580))+(((-1.0)*cj4*r12*x5578))+((x5571*x5577)));
evalcond[5]=((((0.0775)*x5579))+(((-1.0)*x5570*x5571))+(((-1.0)*x5570*x5574))+(((-0.0775)*x5582))+(((-1.0)*py*x5578))+(((-0.3425)*x5581))+(((0.2845)*sj1))+(((0.0535)*cj1))+((x5568*x5569))+((x5567*x5568))+(((-1.0)*x5565*x5576))+(((-1.0)*px*x5573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5587=(cj4*r22);
IkReal x5588=((1.0)*cj1);
IkReal x5589=(sj1*sj4);
IkReal x5590=(cj5*r20);
IkReal x5591=(r21*sj5);
IkReal x5592=(cj4*sj1);
IkReal x5593=(cj1*x5591);
if( IKabs(((((-1.0)*cj4*x5588*x5590))+((sj1*x5587))+((cj4*x5593))+(((-1.0)*x5589*x5591))+((cj1*r22*sj4))+((x5589*x5590)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x5588*x5590))+(((-1.0)*x5590*x5592))+(((-1.0)*x5587*x5588))+((x5591*x5592))+((r22*x5589))+((sj4*x5593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x5588*x5590))+((sj1*x5587))+((cj4*x5593))+(((-1.0)*x5589*x5591))+((cj1*r22*sj4))+((x5589*x5590))))+IKsqr(((((-1.0)*sj4*x5588*x5590))+(((-1.0)*x5590*x5592))+(((-1.0)*x5587*x5588))+((x5591*x5592))+((r22*x5589))+((sj4*x5593))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*x5588*x5590))+((sj1*x5587))+((cj4*x5593))+(((-1.0)*x5589*x5591))+((cj1*r22*sj4))+((x5589*x5590))), ((((-1.0)*sj4*x5588*x5590))+(((-1.0)*x5590*x5592))+(((-1.0)*x5587*x5588))+((x5591*x5592))+((r22*x5589))+((sj4*x5593))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5594=IKcos(j2);
IkReal x5595=IKsin(j2);
IkReal x5596=((1.0)*sj4);
IkReal x5597=((0.076)*sj5);
IkReal x5598=(r11*sj0);
IkReal x5599=((1.0)*cj4);
IkReal x5600=(cj0*r02);
IkReal x5601=(cj0*r01);
IkReal x5602=(cj5*r20);
IkReal x5603=((1.0)*sj1);
IkReal x5604=(sj4*sj5);
IkReal x5605=(r21*sj5);
IkReal x5606=(cj4*sj5);
IkReal x5607=(r12*sj0);
IkReal x5608=(cj1*x5594);
IkReal x5609=(cj5*r10*sj0);
IkReal x5610=(cj0*cj5*r00);
IkReal x5611=(cj1*x5595);
IkReal x5612=(sj1*x5595);
IkReal x5613=(sj1*x5594);
IkReal x5614=(x5595*x5603);
evalcond[0]=(x5608+((cj4*r22))+(((-1.0)*x5596*x5605))+((sj4*x5602))+(((-1.0)*x5614)));
evalcond[1]=(x5613+x5611+(((-1.0)*x5599*x5605))+(((-1.0)*r22*x5596))+((cj4*x5602)));
evalcond[2]=(((r21*x5597))+(((-0.3425)*x5612))+(((0.0535)*sj1))+(((-0.076)*x5602))+(((-0.2845)*cj1))+pz+(((0.3425)*x5608))+(((0.0775)*x5613))+(((0.0775)*x5611)));
evalcond[3]=(x5608+(((-1.0)*x5599*x5609))+(((-1.0)*x5599*x5610))+((sj4*x5607))+((sj4*x5600))+((x5601*x5606))+(((-1.0)*x5614))+((x5598*x5606)));
evalcond[4]=((((-1.0)*x5611))+(((-1.0)*x5596*x5609))+(((-1.0)*x5596*x5610))+(((-1.0)*x5599*x5607))+(((-1.0)*x5599*x5600))+(((-1.0)*x5594*x5603))+((x5601*x5604))+((x5598*x5604)));
evalcond[5]=((((-0.3425)*x5611))+(((-0.3425)*x5613))+(((-1.0)*x5597*x5601))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.0775)*x5608))+(((0.076)*x5609))+(((-1.0)*x5597*x5598))+(((-0.0775)*x5612))+(((0.076)*x5610))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5615=((1.0)*cj4);
IkReal x5616=(r22*sj1);
IkReal x5617=((1.0)*sj4);
IkReal x5618=(cj1*r22);
IkReal x5619=(cj1*r21*sj5);
IkReal x5620=(cj5*r20*sj1);
IkReal x5621=(r21*sj1*sj5);
IkReal x5622=(cj1*cj5*r20);
if( IKabs((((cj4*x5622))+(((-1.0)*x5617*x5618))+(((-1.0)*x5617*x5621))+((sj4*x5620))+(((-1.0)*x5615*x5619))+((cj4*x5616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x5620))+(((-1.0)*x5617*x5622))+((sj4*x5619))+(((-1.0)*x5615*x5621))+(((-1.0)*x5615*x5618))+(((-1.0)*x5616*x5617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x5622))+(((-1.0)*x5617*x5618))+(((-1.0)*x5617*x5621))+((sj4*x5620))+(((-1.0)*x5615*x5619))+((cj4*x5616))))+IKsqr((((cj4*x5620))+(((-1.0)*x5617*x5622))+((sj4*x5619))+(((-1.0)*x5615*x5621))+(((-1.0)*x5615*x5618))+(((-1.0)*x5616*x5617))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x5622))+(((-1.0)*x5617*x5618))+(((-1.0)*x5617*x5621))+((sj4*x5620))+(((-1.0)*x5615*x5619))+((cj4*x5616))), (((cj4*x5620))+(((-1.0)*x5617*x5622))+((sj4*x5619))+(((-1.0)*x5615*x5621))+(((-1.0)*x5615*x5618))+(((-1.0)*x5616*x5617))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5623=IKcos(j2);
IkReal x5624=IKsin(j2);
IkReal x5625=(sj0*sj4);
IkReal x5626=(cj5*r10);
IkReal x5627=((0.076)*sj0);
IkReal x5628=((1.0)*sj4);
IkReal x5629=(r11*sj5);
IkReal x5630=((0.076)*sj5);
IkReal x5631=((1.0)*cj4);
IkReal x5632=(cj0*r02);
IkReal x5633=(cj0*r01);
IkReal x5634=((1.0)*sj1);
IkReal x5635=(r21*sj5);
IkReal x5636=(cj5*r20);
IkReal x5637=(cj1*x5623);
IkReal x5638=(cj0*cj5*r00);
IkReal x5639=(cj1*x5624);
IkReal x5640=(sj1*x5624);
IkReal x5641=(sj1*x5623);
IkReal x5642=(x5623*x5634);
IkReal x5643=((1.0)*x5639);
IkReal x5644=(x5643+x5642);
evalcond[0]=(((sj4*x5636))+x5637+((cj4*r22))+(((-1.0)*x5628*x5635))+(((-1.0)*x5624*x5634)));
evalcond[1]=((((-1.0)*r22*x5628))+(((-1.0)*x5644))+((cj4*x5636))+(((-1.0)*x5631*x5635)));
evalcond[2]=((((0.0775)*x5641))+(((0.0535)*sj1))+(((0.3425)*x5637))+(((0.0775)*x5639))+(((-0.2845)*cj1))+(((-0.3425)*x5640))+pz+(((-0.076)*x5636))+((r21*x5630)));
evalcond[3]=(((sj4*x5632))+x5640+(((-1.0)*sj0*x5626*x5631))+((cj4*sj0*x5629))+(((-1.0)*x5637))+((cj4*sj5*x5633))+((r12*x5625))+(((-1.0)*x5631*x5638)));
evalcond[4]=(((x5625*x5629))+(((-1.0)*r12*sj0*x5631))+(((-1.0)*x5628*x5638))+(((-1.0)*x5644))+((sj4*sj5*x5633))+(((-1.0)*x5625*x5626))+(((-1.0)*x5631*x5632)));
evalcond[5]=((((0.2845)*sj1))+(((-1.0)*x5627*x5629))+(((0.076)*x5638))+(((0.0775)*x5637))+(((-0.3425)*x5639))+(((-0.3425)*x5641))+(((0.0535)*cj1))+(((-0.0775)*x5640))+(((-1.0)*py*sj0))+(((-1.0)*x5630*x5633))+((x5626*x5627))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5645=(cj1*cj4);
IkReal x5646=(r21*sj5);
IkReal x5647=((1.0)*cj3);
IkReal x5648=(cj5*r20);
IkReal x5649=(cj1*sj4);
IkReal x5650=(sj1*sj4);
IkReal x5651=(cj4*sj1);
CheckValue<IkReal> x5652=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5652.valid){
continue;
}
CheckValue<IkReal> x5653 = IKatan2WithCheck(IkReal((((x5645*x5646))+(((-1.0)*x5645*x5648))+((r22*x5649))+((cj3*r22*x5651))+((cj3*x5648*x5650))+(((-1.0)*x5646*x5647*x5650)))),IkReal((((cj3*x5646*x5649))+(((-1.0)*r22*x5645*x5647))+(((-1.0)*x5647*x5648*x5649))+((r22*x5650))+(((-1.0)*x5648*x5651))+((x5646*x5651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5653.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5652.value)))+(x5653.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5654=IKcos(j2);
IkReal x5655=IKsin(j2);
IkReal x5656=(r10*sj0);
IkReal x5657=((0.076)*cj5);
IkReal x5658=((1.0)*sj1);
IkReal x5659=(cj0*r00);
IkReal x5660=((0.076)*sj5);
IkReal x5661=(r11*sj0);
IkReal x5662=((1.0)*sj0);
IkReal x5663=((1.0)*sj5);
IkReal x5664=((1.0)*cj4);
IkReal x5665=(cj0*r01);
IkReal x5666=(cj0*r02);
IkReal x5667=(sj4*sj5);
IkReal x5668=(cj4*sj5);
IkReal x5669=(cj5*r20);
IkReal x5670=(cj1*x5654);
IkReal x5671=((1.0)*cj5*sj4);
IkReal x5672=(cj3*x5655);
IkReal x5673=(cj1*x5655);
IkReal x5674=(sj1*x5654);
IkReal x5675=(sj1*x5655);
evalcond[0]=((((-1.0)*r20*x5663))+(((-1.0)*cj5*r21))+((sj3*x5673))+((sj3*x5674)));
evalcond[1]=(x5670+((cj4*r22))+(((-1.0)*x5655*x5658))+(((-1.0)*r21*sj4*x5663))+((sj4*x5669)));
evalcond[2]=(((cj3*x5674))+((cj4*x5669))+((cj1*x5672))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x5663)));
evalcond[3]=(((cj5*x5661))+((cj5*x5665))+(((-1.0)*sj3*x5655*x5658))+((sj5*x5656))+((sj5*x5659))+((sj3*x5670)));
evalcond[4]=((((0.0775)*x5673))+(((0.0775)*x5674))+(((-1.0)*r20*x5657))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-0.3425)*x5675))+(((0.3425)*x5670))+((r21*x5660)));
evalcond[5]=((((-1.0)*x5658*x5672))+(((-1.0)*cj5*x5659*x5664))+((cj3*x5670))+((r12*sj0*sj4))+((x5661*x5668))+(((-1.0)*cj5*x5656*x5664))+((x5665*x5668))+((sj4*x5666)));
evalcond[6]=((((-1.0)*x5656*x5671))+(((-1.0)*x5673))+(((-1.0)*x5654*x5658))+(((-1.0)*x5659*x5671))+((x5661*x5667))+((x5665*x5667))+(((-1.0)*x5664*x5666))+(((-1.0)*cj4*r12*x5662)));
evalcond[7]=((((0.0775)*x5670))+((x5656*x5657))+((x5657*x5659))+(((0.2845)*sj1))+(((-1.0)*py*x5662))+(((0.0535)*cj1))+(((-1.0)*x5660*x5665))+(((-1.0)*x5660*x5661))+(((-0.3425)*x5673))+(((-0.3425)*x5674))+(((-0.0775)*x5675))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5676=((1.0)*cj1);
IkReal x5677=(sj0*sj1);
IkReal x5678=(cj5*r11);
IkReal x5679=(r10*sj5);
IkReal x5680=(r20*sj5);
IkReal x5681=(cj5*r21);
IkReal x5682=(cj0*cj5*r01);
IkReal x5683=(cj0*r00*sj5);
CheckValue<IkReal> x5684=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5684.valid){
continue;
}
CheckValue<IkReal> x5685 = IKatan2WithCheck(IkReal((((cj1*x5681))+((cj1*x5680))+((x5677*x5679))+((x5677*x5678))+((sj1*x5682))+((sj1*x5683)))),IkReal(((((-1.0)*sj0*x5676*x5678))+(((-1.0)*sj0*x5676*x5679))+((sj1*x5680))+((sj1*x5681))+(((-1.0)*x5676*x5682))+(((-1.0)*x5676*x5683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5685.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5684.value)))+(x5685.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5686=IKcos(j2);
IkReal x5687=IKsin(j2);
IkReal x5688=(r10*sj0);
IkReal x5689=((0.076)*cj5);
IkReal x5690=((1.0)*sj1);
IkReal x5691=(cj0*r00);
IkReal x5692=((0.076)*sj5);
IkReal x5693=(r11*sj0);
IkReal x5694=((1.0)*sj0);
IkReal x5695=((1.0)*sj5);
IkReal x5696=((1.0)*cj4);
IkReal x5697=(cj0*r01);
IkReal x5698=(cj0*r02);
IkReal x5699=(sj4*sj5);
IkReal x5700=(cj4*sj5);
IkReal x5701=(cj5*r20);
IkReal x5702=(cj1*x5686);
IkReal x5703=((1.0)*cj5*sj4);
IkReal x5704=(cj3*x5687);
IkReal x5705=(cj1*x5687);
IkReal x5706=(sj1*x5686);
IkReal x5707=(sj1*x5687);
evalcond[0]=((((-1.0)*cj5*r21))+((sj3*x5706))+((sj3*x5705))+(((-1.0)*r20*x5695)));
evalcond[1]=(((cj4*r22))+((sj4*x5701))+(((-1.0)*r21*sj4*x5695))+(((-1.0)*x5687*x5690))+x5702);
evalcond[2]=((((-1.0)*cj4*r21*x5695))+((cj4*x5701))+((cj1*x5704))+(((-1.0)*r22*sj4))+((cj3*x5706)));
evalcond[3]=((((-1.0)*sj3*x5687*x5690))+((sj5*x5688))+((sj5*x5691))+((cj5*x5693))+((cj5*x5697))+((sj3*x5702)));
evalcond[4]=((((0.3425)*x5702))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x5707))+pz+(((0.0775)*x5705))+(((0.0775)*x5706))+((r21*x5692))+(((-1.0)*r20*x5689)));
evalcond[5]=((((-1.0)*cj5*x5691*x5696))+((x5697*x5700))+(((-1.0)*cj5*x5688*x5696))+((x5693*x5700))+((r12*sj0*sj4))+(((-1.0)*x5690*x5704))+((sj4*x5698))+((cj3*x5702)));
evalcond[6]=((((-1.0)*x5688*x5703))+(((-1.0)*x5705))+((x5693*x5699))+(((-1.0)*cj4*r12*x5694))+(((-1.0)*x5686*x5690))+(((-1.0)*x5696*x5698))+(((-1.0)*x5691*x5703))+((x5697*x5699)));
evalcond[7]=((((-0.0775)*x5707))+(((0.2845)*sj1))+(((-1.0)*x5692*x5693))+(((-1.0)*x5692*x5697))+(((-0.3425)*x5705))+(((-0.3425)*x5706))+(((0.0535)*cj1))+(((0.0775)*x5702))+((x5689*x5691))+((x5688*x5689))+(((-1.0)*py*x5694))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5708=(cj5*r20);
IkReal x5709=(r20*sj5);
IkReal x5710=(r21*sj5);
IkReal x5711=(cj5*r21);
IkReal x5712=(cj1*sj3*sj4);
IkReal x5713=(cj4*r22*sj3);
IkReal x5714=(sj1*sj3*sj4);
CheckValue<IkReal> x5715=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716 = IKatan2WithCheck(IkReal((((cj1*x5709))+((cj1*x5711))+((sj1*x5713))+(((-1.0)*x5710*x5714))+((x5708*x5714)))),IkReal((((x5710*x5712))+((sj1*x5709))+((sj1*x5711))+(((-1.0)*x5708*x5712))+(((-1.0)*cj1*x5713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5716.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5715.value)))+(x5716.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5717=IKcos(j2);
IkReal x5718=IKsin(j2);
IkReal x5719=(r10*sj0);
IkReal x5720=((0.076)*cj5);
IkReal x5721=((1.0)*sj1);
IkReal x5722=(cj0*r00);
IkReal x5723=((0.076)*sj5);
IkReal x5724=(r11*sj0);
IkReal x5725=((1.0)*sj0);
IkReal x5726=((1.0)*sj5);
IkReal x5727=((1.0)*cj4);
IkReal x5728=(cj0*r01);
IkReal x5729=(cj0*r02);
IkReal x5730=(sj4*sj5);
IkReal x5731=(cj4*sj5);
IkReal x5732=(cj5*r20);
IkReal x5733=(cj1*x5717);
IkReal x5734=((1.0)*cj5*sj4);
IkReal x5735=(cj3*x5718);
IkReal x5736=(cj1*x5718);
IkReal x5737=(sj1*x5717);
IkReal x5738=(sj1*x5718);
evalcond[0]=((((-1.0)*r20*x5726))+((sj3*x5737))+((sj3*x5736))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x5718*x5721))+((sj4*x5732))+(((-1.0)*r21*sj4*x5726))+x5733);
evalcond[2]=(((cj3*x5737))+(((-1.0)*cj4*r21*x5726))+((cj1*x5735))+(((-1.0)*r22*sj4))+((cj4*x5732)));
evalcond[3]=(((sj3*x5733))+(((-1.0)*sj3*x5718*x5721))+((sj5*x5722))+((cj5*x5724))+((cj5*x5728))+((sj5*x5719)));
evalcond[4]=((((-1.0)*r20*x5720))+((r21*x5723))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x5737))+(((0.0775)*x5736))+pz+(((0.3425)*x5733))+(((-0.3425)*x5738)));
evalcond[5]=((((-1.0)*cj5*x5722*x5727))+((x5724*x5731))+((cj3*x5733))+((r12*sj0*sj4))+((x5728*x5731))+((sj4*x5729))+(((-1.0)*cj5*x5719*x5727))+(((-1.0)*x5721*x5735)));
evalcond[6]=(((x5724*x5730))+(((-1.0)*x5727*x5729))+(((-1.0)*x5719*x5734))+(((-1.0)*x5717*x5721))+(((-1.0)*x5722*x5734))+((x5728*x5730))+(((-1.0)*cj4*r12*x5725))+(((-1.0)*x5736)));
evalcond[7]=((((-1.0)*x5723*x5728))+(((-1.0)*x5723*x5724))+(((0.2845)*sj1))+(((-1.0)*py*x5725))+(((0.0775)*x5733))+((x5719*x5720))+(((0.0535)*cj1))+(((-0.0775)*x5738))+(((-0.3425)*x5737))+(((-0.3425)*x5736))+(((-1.0)*cj0*px))+((x5720*x5722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5739=((0.076)*cj3);
IkReal x5740=((1.0)*cj3);
CheckValue<IkReal> x5741=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-0.076)*r22)))),-1);
if(!x5741.valid){
continue;
}
CheckValue<IkReal> x5742 = IKatan2WithCheck(IkReal((((cj5*r10*x5739))+(((-1.0)*r11*sj5*x5739))+(((-1.0)*py*x5740)))),IkReal(((((-1.0)*px*x5740))+(((-1.0)*r01*sj5*x5739))+((cj5*r00*x5739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5742.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5741.value)))+(x5742.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5743=IKcos(j0);
IkReal x5744=IKsin(j0);
IkReal x5745=(sj4*sj5);
IkReal x5746=(cj4*sj5);
IkReal x5747=((1.0)*cj4);
IkReal x5748=((0.076)*sj5);
IkReal x5749=((1.0)*x5744);
IkReal x5750=(r11*x5743);
IkReal x5751=(r12*x5743);
IkReal x5752=(cj5*r00*x5744);
IkReal x5753=(cj5*r10*x5743);
evalcond[0]=(cj3+((cj5*x5750))+(((-1.0)*r00*sj5*x5749))+((r10*sj5*x5743))+(((-1.0)*cj5*r01*x5749)));
evalcond[1]=((((0.076)*x5753))+(((-1.0)*py*x5743))+((r01*x5744*x5748))+(((-1.0)*x5748*x5750))+(((-0.076)*x5752))+((px*x5744)));
evalcond[2]=(((cj4*r02*x5744))+(((-1.0)*x5747*x5751))+(((-1.0)*sj4*x5753))+(((-1.0)*r01*x5745*x5749))+((sj4*x5752))+((x5745*x5750)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*x5747*x5753))+((cj4*x5752))+((x5746*x5750))+(((-1.0)*r02*sj4*x5749))+(((-1.0)*r01*x5746*x5749))+((sj4*x5751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5754=((1.138)*sj3);
IkReal x5755=((1.138)*cj3);
IkReal x5756=((0.31)*cj5);
IkReal x5757=(cj4*r20);
IkReal x5758=((0.93)*sj5);
IkReal x5759=(cj4*r21);
IkReal x5760=(r22*sj4);
IkReal x5761=((0.912)*sj3);
IkReal x5762=(cj5*r20);
IkReal x5763=(r21*sj5);
IkReal x5764=((4.11)*sj4);
IkReal x5765=((0.93)*cj5);
IkReal x5766=((0.304)*cj3);
IkReal x5767=(pz*sj3);
IkReal x5768=((0.31)*sj5);
IkReal x5769=((0.304)*sj3);
IkReal x5770=((0.912)*cj3);
IkReal x5771=((1.37)*sj3);
IkReal x5772=(cj4*r22);
IkReal x5773=(cj3*pz);
IkReal x5774=((1.37)*cj3);
IkReal x5775=(r21*x5765);
IkReal x5776=((12.0)*x5767);
IkReal x5777=(r20*x5758);
IkReal x5778=((12.0)*x5773);
IkReal x5779=((0.93)*x5760);
IkReal x5780=((4.11)*sj3*x5772);
IkReal x5781=(x5761*x5762);
IkReal x5782=(x5761*x5763);
IkReal x5783=((4.11)*cj3*x5772);
IkReal x5784=(x5762*x5770);
IkReal x5785=(x5757*x5765);
IkReal x5786=(x5763*x5770);
IkReal x5787=(x5758*x5759);
IkReal x5788=((1.37)*sj4*x5763);
IkReal x5789=(sj3*x5762*x5764);
IkReal x5790=(sj3*x5763*x5764);
IkReal x5791=(cj3*x5762*x5764);
IkReal x5792=(cj3*x5763*x5764);
IkReal x5793=(x5780+x5781+x5789);
IkReal x5794=(x5784+x5785+x5783+x5791);
IkReal x5795=(x5775+x5777+x5776+x5782+x5790);
IkReal x5796=(x5779+x5778+x5786+x5787+x5792);
j1eval[0]=((IKabs(((((-1.0)*x5795))+x5754+x5793)))+(IKabs(((((-1.0)*x5796))+(((-1.0)*x5755))+x5794)))+(IKabs(((((-1.0)*x5796))+x5755+x5794)))+(IKabs(((((-1.0)*r20*x5768))+(((-4.0)*x5767))+((x5771*x5772))+(((-1.0)*sj4*x5763*x5771))+(((-1.0)*r21*x5756))+(((-1.0)*x5754))+(((-1.0)*x5763*x5769))+((sj4*x5762*x5771))+((x5762*x5769)))))+(IKabs(((((-0.31)*x5760))+(((-4.0)*x5773))+(((-1.0)*sj4*x5763*x5774))+((x5756*x5757))+(((-1.0)*x5755))+(((-1.0)*x5759*x5768))+(((-1.0)*x5763*x5766))+((sj4*x5762*x5774))+((x5762*x5766))+((x5772*x5774)))))+(IKabs(((((-1.0)*x5795))+(((-1.0)*x5754))+x5793)))+(((1.712)*(IKabs(cj3))))+(((1.712)*(IKabs(sj3)))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5797=((1.138)*sj3);
IkReal x5798=(r20*sj5);
IkReal x5799=(pz*sj3);
IkReal x5800=((1.37)*sj4);
IkReal x5801=(cj5*r21);
IkReal x5802=((4.11)*sj4);
IkReal x5803=((0.93)*x5801);
IkReal x5804=((12.0)*x5799);
IkReal x5805=((0.93)*x5798);
IkReal x5806=((-0.428)*sj3);
IkReal x5807=((0.31)*x5798);
IkReal x5808=((4.0)*x5799);
IkReal x5809=((0.31)*x5801);
IkReal x5810=(r21*sj3*sj5);
IkReal x5811=(cj5*r20*sj3);
IkReal x5812=(cj4*r22*sj3);
IkReal x5813=((4.11)*x5812);
IkReal x5814=((0.912)*x5811);
IkReal x5815=((0.912)*x5810);
IkReal x5816=((1.37)*x5812);
IkReal x5817=((0.304)*x5811);
IkReal x5818=((0.304)*x5810);
IkReal x5819=(x5802*x5811);
IkReal x5820=(x5802*x5810);
IkReal x5821=(x5800*x5811);
IkReal x5822=(x5800*x5810);
IkReal x5823=(x5819+x5813+x5814);
IkReal x5824=(x5821+x5816+x5817);
IkReal x5825=(x5809+x5808+x5807+x5822+x5818);
IkReal x5826=(x5803+x5805+x5804+x5820+x5815);
op[0]=((((-1.0)*x5825))+(((-1.0)*x5797))+x5824);
op[1]=x5806;
op[2]=((((-1.0)*x5826))+(((-1.0)*x5797))+x5823);
op[3]=((-0.856)*sj3);
op[4]=((((-1.0)*x5826))+x5823+x5797);
op[5]=x5806;
op[6]=((((-1.0)*x5825))+x5824+x5797);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5827=((1.138)*cj3);
IkReal x5828=(cj5*r20);
IkReal x5829=((0.31)*cj4);
IkReal x5830=(r21*sj5);
IkReal x5831=(cj3*sj4);
IkReal x5832=(r22*sj4);
IkReal x5833=((0.93)*cj4);
IkReal x5834=((0.304)*cj3);
IkReal x5835=((0.912)*cj3);
IkReal x5836=((0.428)*cj3);
IkReal x5837=(cj3*pz);
IkReal x5838=((12.0)*x5837);
IkReal x5839=((0.93)*x5832);
IkReal x5840=((0.31)*x5832);
IkReal x5841=((4.0)*x5837);
IkReal x5842=(cj3*cj4*r22);
IkReal x5843=(x5828*x5834);
IkReal x5844=((1.37)*x5842);
IkReal x5845=((4.11)*x5842);
IkReal x5846=(x5828*x5835);
IkReal x5847=(x5828*x5833);
IkReal x5848=(x5830*x5835);
IkReal x5849=(x5830*x5833);
IkReal x5850=(x5828*x5829);
IkReal x5851=(x5830*x5834);
IkReal x5852=(x5829*x5830);
IkReal x5853=((1.37)*x5828*x5831);
IkReal x5854=((4.11)*x5828*x5831);
IkReal x5855=((4.11)*x5830*x5831);
IkReal x5856=((1.37)*x5830*x5831);
IkReal x5857=(x5847+x5846+x5845+x5854);
IkReal x5858=(x5844+x5843+x5850+x5853);
IkReal x5859=(x5838+x5839+x5849+x5848+x5855);
IkReal x5860=(x5841+x5840+x5856+x5851+x5852);
j1evalpoly[0]=((((-1.0)*x5836*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*htj1*x5836))+(((-1.0)*x5860))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x5827))+(((-1.0)*x5859))+x5857))))+(((-0.856)*cj3*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x5827))+(((-1.0)*x5860))+x5858))))+x5827+x5858+(((htj1*htj1)*(((((-1.0)*x5859))+x5827+x5857)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x5861=(cj5*r20);
IkReal x5862=(r20*sj5);
IkReal x5863=(r21*sj5);
IkReal x5864=(cj5*r21);
IkReal x5865=(cj1*sj3*sj4);
IkReal x5866=(cj4*r22*sj3);
IkReal x5867=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((sj1*x5862))+((sj1*x5864))+(((-1.0)*x5861*x5865))+(((-1.0)*cj1*x5866))+((x5863*x5865)))))+(IKabs((((cj1*x5864))+((cj1*x5862))+((x5861*x5867))+((sj1*x5866))+(((-1.0)*x5863*x5867))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5868=(cj4*r22);
IkReal x5869=((1.0)*cj1);
IkReal x5870=(r20*sj1);
IkReal x5871=(cj5*sj4);
IkReal x5872=(cj5*r21);
IkReal x5873=(r21*sj4*sj5);
if( IKabs((((cj1*x5872))+((cj1*r20*sj5))+((sj1*x5868))+((x5870*x5871))+(((-1.0)*sj1*x5873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x5873))+((sj1*x5872))+(((-1.0)*x5868*x5869))+(((-1.0)*r20*x5869*x5871))+((sj5*x5870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x5872))+((cj1*r20*sj5))+((sj1*x5868))+((x5870*x5871))+(((-1.0)*sj1*x5873))))+IKsqr((((cj1*x5873))+((sj1*x5872))+(((-1.0)*x5868*x5869))+(((-1.0)*r20*x5869*x5871))+((sj5*x5870))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x5872))+((cj1*r20*sj5))+((sj1*x5868))+((x5870*x5871))+(((-1.0)*sj1*x5873))), (((cj1*x5873))+((sj1*x5872))+(((-1.0)*x5868*x5869))+(((-1.0)*r20*x5869*x5871))+((sj5*x5870))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5874=IKcos(j2);
IkReal x5875=IKsin(j2);
IkReal x5876=(r10*sj0);
IkReal x5877=((0.076)*cj5);
IkReal x5878=(cj0*r00);
IkReal x5879=((0.076)*sj5);
IkReal x5880=(r11*sj0);
IkReal x5881=((1.0)*sj5);
IkReal x5882=((1.0)*cj0);
IkReal x5883=(cj0*r01);
IkReal x5884=((1.0)*sj1);
IkReal x5885=((0.3425)*sj1);
IkReal x5886=(sj4*sj5);
IkReal x5887=((1.0)*sj0);
IkReal x5888=(cj1*x5874);
IkReal x5889=((1.0)*cj5*sj4);
IkReal x5890=(cj1*x5875);
IkReal x5891=(sj1*x5874);
IkReal x5892=(x5875*x5884);
evalcond[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*x5881))+x5890+x5891);
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x5881))+(((-1.0)*x5892))+x5888);
evalcond[2]=(((cj5*x5880))+((cj5*x5883))+(((-1.0)*x5892))+x5888+((sj5*x5876))+((sj5*x5878)));
CheckValue<IkReal> x5893=IKPowWithIntegerCheck(cj4,-1);
if(!x5893.valid){
continue;
}
evalcond[3]=((((0.3425)*x5888))+(((0.0535)*sj1))+(((-1.0)*x5875*x5885))+(((-0.2845)*cj1))+pz+(((0.0775)*x5890))+(((0.0775)*x5891))+(((-0.076)*r22*sj4*(x5893.value))));
evalcond[4]=((((-1.0)*cj4*r02*x5882))+(((-1.0)*x5890))+((x5880*x5886))+(((-1.0)*x5876*x5889))+(((-1.0)*cj4*r12*x5887))+((x5883*x5886))+(((-1.0)*x5874*x5884))+(((-1.0)*x5878*x5889)));
evalcond[5]=((((-1.0)*px*x5882))+((x5877*x5878))+(((0.0775)*x5888))+(((-0.0775)*sj1*x5875))+(((0.2845)*sj1))+(((-1.0)*x5879*x5880))+(((-1.0)*x5879*x5883))+(((-0.3425)*x5890))+(((-1.0)*py*x5887))+(((0.0535)*cj1))+(((-1.0)*x5874*x5885))+((x5876*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5894=((1.0)*cj1);
IkReal x5895=(cj4*r22);
IkReal x5896=(cj5*r21);
IkReal x5897=((1.0)*sj1);
IkReal x5898=(r20*sj5);
IkReal x5899=(r21*sj4*sj5);
IkReal x5900=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x5897*x5899))+((sj1*x5900))+((sj1*x5895))+(((-1.0)*x5894*x5896))+(((-1.0)*x5894*x5898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5896*x5897))+(((-1.0)*x5897*x5898))+(((-1.0)*x5894*x5900))+((cj1*x5899))+(((-1.0)*x5894*x5895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5897*x5899))+((sj1*x5900))+((sj1*x5895))+(((-1.0)*x5894*x5896))+(((-1.0)*x5894*x5898))))+IKsqr(((((-1.0)*x5896*x5897))+(((-1.0)*x5897*x5898))+(((-1.0)*x5894*x5900))+((cj1*x5899))+(((-1.0)*x5894*x5895))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5897*x5899))+((sj1*x5900))+((sj1*x5895))+(((-1.0)*x5894*x5896))+(((-1.0)*x5894*x5898))), ((((-1.0)*x5896*x5897))+(((-1.0)*x5897*x5898))+(((-1.0)*x5894*x5900))+((cj1*x5899))+(((-1.0)*x5894*x5895))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5901=IKcos(j2);
IkReal x5902=IKsin(j2);
IkReal x5903=(r10*sj0);
IkReal x5904=((0.076)*cj5);
IkReal x5905=(cj0*r00);
IkReal x5906=((0.076)*sj5);
IkReal x5907=(r11*sj0);
IkReal x5908=((1.0)*sj5);
IkReal x5909=((1.0)*cj0);
IkReal x5910=(cj0*r01);
IkReal x5911=((1.0)*sj1);
IkReal x5912=((0.3425)*sj1);
IkReal x5913=(sj4*sj5);
IkReal x5914=((1.0)*sj0);
IkReal x5915=(cj1*x5901);
IkReal x5916=((1.0)*cj5*sj4);
IkReal x5917=(cj1*x5902);
IkReal x5918=(sj1*x5902);
IkReal x5919=(x5901*x5911);
IkReal x5920=((1.0)*x5917);
IkReal x5921=(x5919+x5920);
evalcond[0]=((((-1.0)*r20*x5908))+(((-1.0)*x5921))+(((-1.0)*cj5*r21)));
evalcond[1]=((((-1.0)*x5902*x5911))+((cj4*r22))+(((-1.0)*r21*sj4*x5908))+((cj5*r20*sj4))+x5915);
evalcond[2]=(((cj5*x5910))+((sj5*x5903))+((sj5*x5905))+((cj5*x5907))+x5918+(((-1.0)*x5915)));
CheckValue<IkReal> x5922=IKPowWithIntegerCheck(cj4,-1);
if(!x5922.valid){
continue;
}
evalcond[3]=((((0.0775)*sj1*x5901))+(((-1.0)*x5902*x5912))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x5915))+pz+(((0.0775)*x5917))+(((-0.076)*r22*sj4*(x5922.value))));
evalcond[4]=((((-1.0)*cj4*r02*x5909))+(((-1.0)*x5903*x5916))+((x5910*x5913))+(((-1.0)*x5905*x5916))+(((-1.0)*x5921))+((x5907*x5913))+(((-1.0)*cj4*r12*x5914)));
evalcond[5]=(((x5903*x5904))+(((-0.0775)*x5918))+(((0.2845)*sj1))+(((-1.0)*py*x5914))+(((-1.0)*px*x5909))+(((0.0535)*cj1))+(((-1.0)*x5906*x5910))+(((-1.0)*x5906*x5907))+(((-0.3425)*x5917))+(((-1.0)*x5901*x5912))+((x5904*x5905))+(((0.0775)*x5915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5923=(cj4*r22);
IkReal x5924=((1.0)*cj1);
IkReal x5925=(sj1*sj4);
IkReal x5926=(cj5*r20);
IkReal x5927=(r21*sj5);
IkReal x5928=(cj4*sj1);
IkReal x5929=(cj1*x5927);
if( IKabs((((x5925*x5926))+((cj4*x5929))+(((-1.0)*cj4*x5924*x5926))+(((-1.0)*x5925*x5927))+((sj1*x5923))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x5924*x5926))+((x5927*x5928))+((r22*x5925))+(((-1.0)*x5926*x5928))+(((-1.0)*x5923*x5924))+((sj4*x5929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5925*x5926))+((cj4*x5929))+(((-1.0)*cj4*x5924*x5926))+(((-1.0)*x5925*x5927))+((sj1*x5923))+((cj1*r22*sj4))))+IKsqr(((((-1.0)*sj4*x5924*x5926))+((x5927*x5928))+((r22*x5925))+(((-1.0)*x5926*x5928))+(((-1.0)*x5923*x5924))+((sj4*x5929))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5925*x5926))+((cj4*x5929))+(((-1.0)*cj4*x5924*x5926))+(((-1.0)*x5925*x5927))+((sj1*x5923))+((cj1*r22*sj4))), ((((-1.0)*sj4*x5924*x5926))+((x5927*x5928))+((r22*x5925))+(((-1.0)*x5926*x5928))+(((-1.0)*x5923*x5924))+((sj4*x5929))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5930=IKcos(j2);
IkReal x5931=IKsin(j2);
IkReal x5932=((1.0)*sj4);
IkReal x5933=((0.076)*sj5);
IkReal x5934=(r11*sj0);
IkReal x5935=((1.0)*cj4);
IkReal x5936=(cj0*r02);
IkReal x5937=(cj0*r01);
IkReal x5938=(cj5*r20);
IkReal x5939=((1.0)*sj1);
IkReal x5940=(sj4*sj5);
IkReal x5941=(r21*sj5);
IkReal x5942=(cj4*sj5);
IkReal x5943=(r12*sj0);
IkReal x5944=(cj1*x5930);
IkReal x5945=(cj5*r10*sj0);
IkReal x5946=(cj0*cj5*r00);
IkReal x5947=(cj1*x5931);
IkReal x5948=(sj1*x5931);
IkReal x5949=(sj1*x5930);
IkReal x5950=(x5931*x5939);
evalcond[0]=(((cj4*r22))+(((-1.0)*x5932*x5941))+(((-1.0)*x5950))+x5944+((sj4*x5938)));
evalcond[1]=(((cj4*x5938))+(((-1.0)*x5935*x5941))+x5947+x5949+(((-1.0)*r22*x5932)));
evalcond[2]=((((0.0535)*sj1))+(((0.3425)*x5944))+(((-0.2845)*cj1))+((r21*x5933))+pz+(((-0.076)*x5938))+(((-0.3425)*x5948))+(((0.0775)*x5947))+(((0.0775)*x5949)));
evalcond[3]=(((x5934*x5942))+(((-1.0)*x5935*x5946))+(((-1.0)*x5935*x5945))+((sj4*x5943))+((x5937*x5942))+(((-1.0)*x5950))+x5944+((sj4*x5936)));
evalcond[4]=(((x5934*x5940))+(((-1.0)*x5947))+(((-1.0)*x5935*x5943))+(((-1.0)*x5932*x5945))+(((-1.0)*x5932*x5946))+(((-1.0)*x5935*x5936))+((x5937*x5940))+(((-1.0)*x5930*x5939)));
evalcond[5]=((((0.2845)*sj1))+(((0.076)*x5945))+(((0.076)*x5946))+(((-0.0775)*x5948))+(((0.0535)*cj1))+(((-1.0)*x5933*x5937))+(((-1.0)*x5933*x5934))+(((-1.0)*py*sj0))+(((-0.3425)*x5947))+(((-0.3425)*x5949))+(((-1.0)*cj0*px))+(((0.0775)*x5944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5951=((1.0)*cj4);
IkReal x5952=(r22*sj1);
IkReal x5953=((1.0)*sj4);
IkReal x5954=(cj1*r22);
IkReal x5955=(cj1*r21*sj5);
IkReal x5956=(cj5*r20*sj1);
IkReal x5957=(r21*sj1*sj5);
IkReal x5958=(cj1*cj5*r20);
if( IKabs((((sj4*x5956))+(((-1.0)*x5951*x5955))+(((-1.0)*x5953*x5954))+(((-1.0)*x5953*x5957))+((cj4*x5958))+((cj4*x5952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x5955))+(((-1.0)*x5952*x5953))+(((-1.0)*x5951*x5957))+(((-1.0)*x5951*x5954))+(((-1.0)*x5953*x5958))+((cj4*x5956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x5956))+(((-1.0)*x5951*x5955))+(((-1.0)*x5953*x5954))+(((-1.0)*x5953*x5957))+((cj4*x5958))+((cj4*x5952))))+IKsqr((((sj4*x5955))+(((-1.0)*x5952*x5953))+(((-1.0)*x5951*x5957))+(((-1.0)*x5951*x5954))+(((-1.0)*x5953*x5958))+((cj4*x5956))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x5956))+(((-1.0)*x5951*x5955))+(((-1.0)*x5953*x5954))+(((-1.0)*x5953*x5957))+((cj4*x5958))+((cj4*x5952))), (((sj4*x5955))+(((-1.0)*x5952*x5953))+(((-1.0)*x5951*x5957))+(((-1.0)*x5951*x5954))+(((-1.0)*x5953*x5958))+((cj4*x5956))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5959=IKcos(j2);
IkReal x5960=IKsin(j2);
IkReal x5961=(sj0*sj4);
IkReal x5962=(cj5*r10);
IkReal x5963=((0.076)*sj0);
IkReal x5964=((1.0)*sj4);
IkReal x5965=(r11*sj5);
IkReal x5966=((0.076)*sj5);
IkReal x5967=((1.0)*cj4);
IkReal x5968=(cj0*r02);
IkReal x5969=(cj0*r01);
IkReal x5970=((1.0)*sj1);
IkReal x5971=(r21*sj5);
IkReal x5972=(cj5*r20);
IkReal x5973=(cj1*x5959);
IkReal x5974=(cj0*cj5*r00);
IkReal x5975=(cj1*x5960);
IkReal x5976=(sj1*x5960);
IkReal x5977=(sj1*x5959);
IkReal x5978=(x5959*x5970);
IkReal x5979=((1.0)*x5975);
IkReal x5980=(x5979+x5978);
evalcond[0]=(((cj4*r22))+((sj4*x5972))+(((-1.0)*x5960*x5970))+(((-1.0)*x5964*x5971))+x5973);
evalcond[1]=((((-1.0)*x5980))+(((-1.0)*r22*x5964))+((cj4*x5972))+(((-1.0)*x5967*x5971)));
evalcond[2]=((((0.0775)*x5977))+(((0.0775)*x5975))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x5973))+((r21*x5966))+(((-0.076)*x5972))+pz+(((-0.3425)*x5976)));
evalcond[3]=((((-1.0)*x5973))+(((-1.0)*sj0*x5962*x5967))+((cj4*sj0*x5965))+((sj4*x5968))+((r12*x5961))+((cj4*sj5*x5969))+x5976+(((-1.0)*x5967*x5974)));
evalcond[4]=((((-1.0)*x5980))+((sj4*sj5*x5969))+(((-1.0)*r12*sj0*x5967))+((x5961*x5965))+(((-1.0)*x5961*x5962))+(((-1.0)*x5967*x5968))+(((-1.0)*x5964*x5974)));
evalcond[5]=((((0.0775)*x5973))+(((0.2845)*sj1))+(((0.076)*x5974))+((x5962*x5963))+(((-0.0775)*x5976))+(((-1.0)*x5966*x5969))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.3425)*x5975))+(((-0.3425)*x5977))+(((-1.0)*x5963*x5965))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5981=(cj1*cj4);
IkReal x5982=(r21*sj5);
IkReal x5983=((1.0)*cj3);
IkReal x5984=(cj5*r20);
IkReal x5985=(cj1*sj4);
IkReal x5986=(sj1*sj4);
IkReal x5987=(cj4*sj1);
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5988.valid){
continue;
}
CheckValue<IkReal> x5989 = IKatan2WithCheck(IkReal((((cj3*r22*x5987))+((cj3*x5984*x5986))+(((-1.0)*x5982*x5983*x5986))+(((-1.0)*x5981*x5984))+((r22*x5985))+((x5981*x5982)))),IkReal((((cj3*x5982*x5985))+((x5982*x5987))+(((-1.0)*x5984*x5987))+(((-1.0)*r22*x5981*x5983))+(((-1.0)*x5983*x5984*x5985))+((r22*x5986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5989.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5988.value)))+(x5989.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5990=IKcos(j2);
IkReal x5991=IKsin(j2);
IkReal x5992=(r10*sj0);
IkReal x5993=((0.076)*cj5);
IkReal x5994=((1.0)*sj1);
IkReal x5995=(cj0*r00);
IkReal x5996=((0.076)*sj5);
IkReal x5997=(r11*sj0);
IkReal x5998=((1.0)*sj0);
IkReal x5999=((1.0)*sj5);
IkReal x6000=((1.0)*cj4);
IkReal x6001=(cj0*r01);
IkReal x6002=(cj0*r02);
IkReal x6003=(sj4*sj5);
IkReal x6004=(cj4*sj5);
IkReal x6005=(cj5*r20);
IkReal x6006=(cj1*x5990);
IkReal x6007=((1.0)*cj5*sj4);
IkReal x6008=(cj3*x5991);
IkReal x6009=(cj1*x5991);
IkReal x6010=(sj1*x5990);
IkReal x6011=(sj1*x5991);
evalcond[0]=((((-1.0)*r20*x5999))+(((-1.0)*cj5*r21))+((sj3*x6010))+((sj3*x6009)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r21*sj4*x5999))+x6006+((sj4*x6005))+(((-1.0)*x5991*x5994)));
evalcond[2]=(((cj4*x6005))+((cj1*x6008))+(((-1.0)*cj4*r21*x5999))+(((-1.0)*r22*sj4))+((cj3*x6010)));
evalcond[3]=((((-1.0)*sj3*x5991*x5994))+((cj5*x6001))+((sj5*x5992))+((sj5*x5995))+((sj3*x6006))+((cj5*x5997)));
evalcond[4]=((((-1.0)*r20*x5993))+((r21*x5996))+(((0.0775)*x6009))+(((0.0535)*sj1))+(((-0.3425)*x6011))+(((0.3425)*x6006))+(((-0.2845)*cj1))+(((0.0775)*x6010))+pz);
evalcond[5]=(((r12*sj0*sj4))+(((-1.0)*cj5*x5995*x6000))+((x6001*x6004))+((sj4*x6002))+(((-1.0)*cj5*x5992*x6000))+(((-1.0)*x5994*x6008))+((x5997*x6004))+((cj3*x6006)));
evalcond[6]=(((x6001*x6003))+(((-1.0)*x5990*x5994))+(((-1.0)*cj4*r12*x5998))+(((-1.0)*x5992*x6007))+(((-1.0)*x6000*x6002))+((x5997*x6003))+(((-1.0)*x5995*x6007))+(((-1.0)*x6009)));
evalcond[7]=((((-0.0775)*x6011))+(((0.0775)*x6006))+(((-1.0)*x5996*x5997))+(((-0.3425)*x6010))+(((0.2845)*sj1))+((x5992*x5993))+(((-1.0)*x5996*x6001))+(((-1.0)*py*x5998))+(((-0.3425)*x6009))+((x5993*x5995))+(((0.0535)*cj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6012=((1.0)*cj1);
IkReal x6013=(sj0*sj1);
IkReal x6014=(cj5*r11);
IkReal x6015=(r10*sj5);
IkReal x6016=(r20*sj5);
IkReal x6017=(cj5*r21);
IkReal x6018=(cj0*cj5*r01);
IkReal x6019=(cj0*r00*sj5);
CheckValue<IkReal> x6020=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x6020.valid){
continue;
}
CheckValue<IkReal> x6021 = IKatan2WithCheck(IkReal((((sj1*x6018))+((sj1*x6019))+((cj1*x6017))+((cj1*x6016))+((x6013*x6014))+((x6013*x6015)))),IkReal(((((-1.0)*sj0*x6012*x6014))+(((-1.0)*sj0*x6012*x6015))+((sj1*x6016))+((sj1*x6017))+(((-1.0)*x6012*x6018))+(((-1.0)*x6012*x6019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6021.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6020.value)))+(x6021.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6022=IKcos(j2);
IkReal x6023=IKsin(j2);
IkReal x6024=(r10*sj0);
IkReal x6025=((0.076)*cj5);
IkReal x6026=((1.0)*sj1);
IkReal x6027=(cj0*r00);
IkReal x6028=((0.076)*sj5);
IkReal x6029=(r11*sj0);
IkReal x6030=((1.0)*sj0);
IkReal x6031=((1.0)*sj5);
IkReal x6032=((1.0)*cj4);
IkReal x6033=(cj0*r01);
IkReal x6034=(cj0*r02);
IkReal x6035=(sj4*sj5);
IkReal x6036=(cj4*sj5);
IkReal x6037=(cj5*r20);
IkReal x6038=(cj1*x6022);
IkReal x6039=((1.0)*cj5*sj4);
IkReal x6040=(cj3*x6023);
IkReal x6041=(cj1*x6023);
IkReal x6042=(sj1*x6022);
IkReal x6043=(sj1*x6023);
evalcond[0]=(((sj3*x6042))+((sj3*x6041))+(((-1.0)*cj5*r21))+(((-1.0)*r20*x6031)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x6023*x6026))+x6038+(((-1.0)*r21*sj4*x6031))+((sj4*x6037)));
evalcond[2]=((((-1.0)*cj4*r21*x6031))+((cj4*x6037))+((cj3*x6042))+(((-1.0)*r22*sj4))+((cj1*x6040)));
evalcond[3]=(((sj5*x6027))+((sj5*x6024))+((cj5*x6033))+(((-1.0)*sj3*x6023*x6026))+((sj3*x6038))+((cj5*x6029)));
evalcond[4]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*r20*x6025))+(((0.3425)*x6038))+(((0.0775)*x6042))+(((0.0775)*x6041))+((r21*x6028))+pz+(((-0.3425)*x6043)));
evalcond[5]=(((x6029*x6036))+(((-1.0)*cj5*x6027*x6032))+((r12*sj0*sj4))+(((-1.0)*x6026*x6040))+((sj4*x6034))+((x6033*x6036))+((cj3*x6038))+(((-1.0)*cj5*x6024*x6032)));
evalcond[6]=((((-1.0)*x6032*x6034))+(((-1.0)*cj4*r12*x6030))+((x6029*x6035))+(((-1.0)*x6041))+((x6033*x6035))+(((-1.0)*x6027*x6039))+(((-1.0)*x6022*x6026))+(((-1.0)*x6024*x6039)));
evalcond[7]=((((-1.0)*py*x6030))+(((-0.0775)*x6043))+((x6025*x6027))+(((0.0775)*x6038))+(((0.2845)*sj1))+(((-1.0)*x6028*x6029))+((x6024*x6025))+(((0.0535)*cj1))+(((-0.3425)*x6042))+(((-0.3425)*x6041))+(((-1.0)*x6028*x6033))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6044=(cj5*r20);
IkReal x6045=(r20*sj5);
IkReal x6046=(r21*sj5);
IkReal x6047=(cj5*r21);
IkReal x6048=(cj1*sj3*sj4);
IkReal x6049=(cj4*r22*sj3);
IkReal x6050=(sj1*sj3*sj4);
CheckValue<IkReal> x6051=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x6051.valid){
continue;
}
CheckValue<IkReal> x6052 = IKatan2WithCheck(IkReal((((sj1*x6049))+(((-1.0)*x6046*x6050))+((x6044*x6050))+((cj1*x6047))+((cj1*x6045)))),IkReal((((x6046*x6048))+(((-1.0)*x6044*x6048))+((sj1*x6045))+((sj1*x6047))+(((-1.0)*cj1*x6049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6052.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6051.value)))+(x6052.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6053=IKcos(j2);
IkReal x6054=IKsin(j2);
IkReal x6055=(r10*sj0);
IkReal x6056=((0.076)*cj5);
IkReal x6057=((1.0)*sj1);
IkReal x6058=(cj0*r00);
IkReal x6059=((0.076)*sj5);
IkReal x6060=(r11*sj0);
IkReal x6061=((1.0)*sj0);
IkReal x6062=((1.0)*sj5);
IkReal x6063=((1.0)*cj4);
IkReal x6064=(cj0*r01);
IkReal x6065=(cj0*r02);
IkReal x6066=(sj4*sj5);
IkReal x6067=(cj4*sj5);
IkReal x6068=(cj5*r20);
IkReal x6069=(cj1*x6053);
IkReal x6070=((1.0)*cj5*sj4);
IkReal x6071=(cj3*x6054);
IkReal x6072=(cj1*x6054);
IkReal x6073=(sj1*x6053);
IkReal x6074=(sj1*x6054);
evalcond[0]=(((sj3*x6072))+((sj3*x6073))+(((-1.0)*r20*x6062))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+x6069+(((-1.0)*x6054*x6057))+(((-1.0)*r21*sj4*x6062))+((sj4*x6068)));
evalcond[2]=((((-1.0)*cj4*r21*x6062))+((cj3*x6073))+(((-1.0)*r22*sj4))+((cj4*x6068))+((cj1*x6071)));
evalcond[3]=(((sj5*x6058))+((sj5*x6055))+(((-1.0)*sj3*x6054*x6057))+((sj3*x6069))+((cj5*x6060))+((cj5*x6064)));
evalcond[4]=((((0.3425)*x6069))+(((0.0535)*sj1))+(((-1.0)*r20*x6056))+(((-0.2845)*cj1))+(((0.0775)*x6072))+(((0.0775)*x6073))+(((-0.3425)*x6074))+pz+((r21*x6059)));
evalcond[5]=(((x6060*x6067))+((cj3*x6069))+((r12*sj0*sj4))+(((-1.0)*cj5*x6055*x6063))+(((-1.0)*x6057*x6071))+((x6064*x6067))+((sj4*x6065))+(((-1.0)*cj5*x6058*x6063)));
evalcond[6]=((((-1.0)*x6053*x6057))+(((-1.0)*x6072))+((x6060*x6066))+(((-1.0)*x6055*x6070))+(((-1.0)*x6058*x6070))+(((-1.0)*cj4*r12*x6061))+(((-1.0)*x6063*x6065))+((x6064*x6066)));
evalcond[7]=((((-0.0775)*x6074))+((x6055*x6056))+(((0.2845)*sj1))+(((-1.0)*x6059*x6064))+(((-1.0)*x6059*x6060))+((x6056*x6058))+(((-1.0)*py*x6061))+(((0.0535)*cj1))+(((-0.3425)*x6072))+(((-0.3425)*x6073))+(((0.0775)*x6069))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - xarm6_box_base2_ee (7f769228098e598ad97e3f388d36d96d)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
